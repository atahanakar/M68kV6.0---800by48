680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 10 Nov 2020      Time: 13:16:01          Source: C:\M68KV6.0 - 800BY48\PROGRAMS\SPEEDTESTPROGRAM\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2A44      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2388      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY48\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // SPI Registers
                     481   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     482   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     483   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     484   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     485   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     486   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     487   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     488   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     489   ; // and write FF to disable it
                     490   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     491   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     492   ; void EraseChip(void);
                     493   ; void ChipWrite(void);
                     494   ; void WaitWrite(void);
                     495   ; void DisableBlock(void);
                     496   ; void FlashMemoryTest(void);
                     497   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     498   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     499   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     500   ; unsigned int PC, SSP, USP ;
                     501   ; unsigned short int SR;
                     502   ; // Breakpoint variables
                     503   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     504   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     505   ; unsigned int BreakPointSetOrCleared[8] ;
                     506   ; unsigned int InstructionSize ;
                     507   ; // watchpoint variables
                     508   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     509   ; unsigned int WatchPointSetOrCleared[8] ;
                     510   ; char WatchPointString[8][100] ;
                     511   ; char    TempString[100] ;
                     512   ; /************************************************************************************
                     513   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     514   ; ************************************************************************************/
                     515   ; void Wait1ms(void)
                     516   ; {
                     517   _Wait1ms:
00000932  2F02       518          move.l    D2,-(A7)
                     519   ; long int  i ;
                     520   ; for(i = 0; i < 1000; i ++)
00000934  4282       521          clr.l     D2
                     522   Wait1ms_1:
00000936  0C82 0000  523          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       524          bge.s     Wait1ms_3
0000093E  5282       525          addq.l    #1,D2
00000940  60F4       526          bra       Wait1ms_1
                     527   Wait1ms_3:
00000942  241F       528          move.l    (A7)+,D2
00000944  4E75       529          rts
                     530   ; ;
                     531   ; }
                     532   ; /************************************************************************************
                     533   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     534   ; **************************************************************************************/
                     535   ; void Wait3ms(void)
                     536   ; {
                     537   _Wait3ms:
00000946  2F02       538          move.l    D2,-(A7)
                     539   ; int i ;
                     540   ; for(i = 0; i < 3; i++)
00000948  4282       541          clr.l     D2
                     542   Wait3ms_1:
0000094A  0C82 0000  543          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       544          bge.s     Wait3ms_3
                     545   ; Wait1ms() ;
00000952  4EB8 0932  546          jsr       _Wait1ms
00000956  5282       547          addq.l    #1,D2
00000958  60F0       548          bra       Wait3ms_1
                     549   Wait3ms_3:
0000095A  241F       550          move.l    (A7)+,D2
0000095C  4E75       551          rts
                     552   ; }
                     553   ; /*********************************************************************************************
                     554   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     555   ; *********************************************************************************************/
                     556   ; void Init_LCD(void)
                     557   ; {
                     558   _Init_LCD:
                     559   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  560          move.b    #12,4194336
00000962  0040 0020 
                     561   ; Wait3ms() ;
00000966  4EB8 0946  562          jsr       _Wait3ms
                     563   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  564          move.b    #56,4194336
0000096E  0040 0020 
                     565   ; Wait3ms() ;
00000972  4EB8 0946  566          jsr       _Wait3ms
00000976  4E75       567          rts
                     568   ; }
                     569   ; /******************************************************************************
                     570   ; *subroutine to output a single character held in d1 to the LCD display
                     571   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     572   ; *current cursor position
                     573   ; *******************************************************************************/
                     574   ; void Outchar(int c)
                     575   ; {
                     576   _Outchar:
00000978  4E56 0000  577          link      A6,#0
                     578   ; LCDdata = (char)(c);
0000097C  202E 0008  579          move.l    8(A6),D0
00000980  13C0 0040  580          move.b    D0,4194338
00000984  0022      
                     581   ; Wait1ms() ;
00000986  4EB8 0932  582          jsr       _Wait1ms
0000098A  4E5E       583          unlk      A6
0000098C  4E75       584          rts
                     585   ; }
                     586   ; /**********************************************************************************
                     587   ; *subroutine to output a message at the current cursor position of the LCD display
                     588   ; ************************************************************************************/
                     589   ; void OutMess(char *theMessage)
                     590   ; {
                     591   _OutMess:
0000098E  4E56 FFFC  592          link      A6,#-4
                     593   ; char c ;
                     594   ; while((c = *theMessage++) != (char)(0))
                     595   OutMess_1:
00000992  206E 0008  596          move.l    8(A6),A0
00000996  52AE 0008  597          addq.l    #1,8(A6)
0000099A  1D50 FFFF  598          move.b    (A0),-1(A6)
0000099E  1010       599          move.b    (A0),D0
000009A0  6712       600          beq.s     OutMess_3
                     601   ; Outchar(c) ;
000009A2  122E FFFF  602          move.b    -1(A6),D1
000009A6  4881       603          ext.w     D1
000009A8  48C1       604          ext.l     D1
000009AA  2F01       605          move.l    D1,-(A7)
000009AC  4EB8 0978  606          jsr       _Outchar
000009B0  584F       607          addq.w    #4,A7
000009B2  60DE       608          bra       OutMess_1
                     609   OutMess_3:
000009B4  4E5E       610          unlk      A6
000009B6  4E75       611          rts
                     612   ; }
                     613   ; /******************************************************************************
                     614   ; *subroutine to clear the line by issuing 24 space characters
                     615   ; *******************************************************************************/
                     616   ; void Clearln(void)
                     617   ; {
                     618   _Clearln:
000009B8  2F02       619          move.l    D2,-(A7)
                     620   ; unsigned char i ;
                     621   ; for(i = 0; i < 24; i ++)
000009BA  4202       622          clr.b     D2
                     623   Clearln_1:
000009BC  0C02 0018  624          cmp.b     #24,D2
000009C0  640E       625          bhs.s     Clearln_3
                     626   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  627          pea       32
000009C6  4EB8 0978  628          jsr       _Outchar
000009CA  584F       629          addq.w    #4,A7
000009CC  5202       630          addq.b    #1,D2
000009CE  60EC       631          bra       Clearln_1
                     632   Clearln_3:
000009D0  241F       633          move.l    (A7)+,D2
000009D2  4E75       634          rts
                     635   ; }
                     636   ; /******************************************************************************
                     637   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     638   ; *******************************************************************************/
                     639   ; void Oline0(char *theMessage)
                     640   ; {
                     641   _Oline0:
000009D4  4E56 0000  642          link      A6,#0
                     643   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  644          move.b    #128,4194336
000009DC  0040 0020 
                     645   ; Wait3ms();
000009E0  4EB8 0946  646          jsr       _Wait3ms
                     647   ; Clearln() ;
000009E4  4EB8 09B8  648          jsr       _Clearln
                     649   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  650          move.b    #128,4194336
000009EC  0040 0020 
                     651   ; Wait3ms() ;
000009F0  4EB8 0946  652          jsr       _Wait3ms
                     653   ; OutMess(theMessage) ;
000009F4  2F2E 0008  654          move.l    8(A6),-(A7)
000009F8  4EB8 098E  655          jsr       _OutMess
000009FC  584F       656          addq.w    #4,A7
000009FE  4E5E       657          unlk      A6
00000A00  4E75       658          rts
                     659   ; }
                     660   ; /******************************************************************************
                     661   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     662   ; *******************************************************************************/
                     663   ; void Oline1(char *theMessage)
                     664   ; {
                     665   _Oline1:
00000A02  4E56 0000  666          link      A6,#0
                     667   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  668          move.b    #192,4194336
00000A0A  0040 0020 
                     669   ; Wait3ms();
00000A0E  4EB8 0946  670          jsr       _Wait3ms
                     671   ; Clearln() ;
00000A12  4EB8 09B8  672          jsr       _Clearln
                     673   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  674          move.b    #192,4194336
00000A1A  0040 0020 
                     675   ; Wait3ms() ;
00000A1E  4EB8 0946  676          jsr       _Wait3ms
                     677   ; OutMess(theMessage) ;
00000A22  2F2E 0008  678          move.l    8(A6),-(A7)
00000A26  4EB8 098E  679          jsr       _OutMess
00000A2A  584F       680          addq.w    #4,A7
00000A2C  4E5E       681          unlk      A6
00000A2E  4E75       682          rts
                     683   ; }
                     684   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     685   ; {
                     686   _InstallExceptionHandler:
00000A30  4E56 FFFC  687          link      A6,#-4
                     688   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  689          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     690   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  691          move.l    -4(A6),A0
00000A40  202E 000C  692          move.l    12(A6),D0
00000A44  E588       693          lsl.l     #2,D0
00000A46  21AE 0008  694          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       695          unlk      A6
00000A4E  4E75       696          rts
                     697   ; }
                     698   ; void TestLEDS(void)
                     699   ; {
                     700   _TestLEDS:
00000A50  48E7 3000  701          movem.l   D2/D3,-(A7)
                     702   ; int delay ;
                     703   ; unsigned char count = 0 ;
00000A54  4202       704          clr.b     D2
                     705   ; while(1)    {
                     706   TestLEDS_1:
                     707   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       708          move.b    D2,D0
00000A58  E908       709          lsl.b     #4,D0
00000A5A  1202       710          move.b    D2,D1
00000A5C  C23C 000F  711          and.b     #15,D1
00000A60  D001       712          add.b     D1,D0
00000A62  13C0 0040  713          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  714          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  715          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  716          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  717          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  718          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  719          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  720          move.b    D0,4194304
00000A90  0000      
                     721   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       722          clr.l     D3
                     723   TestLEDS_4:
00000A94  0C83 0003  724          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       725          bge.s     TestLEDS_6
00000A9C  5283       726          addq.l    #1,D3
00000A9E  60F4       727          bra       TestLEDS_4
                     728   TestLEDS_6:
                     729   ; ;
                     730   ; count ++;
00000AA0  5202       731          addq.b    #1,D2
00000AA2  60B2       732          bra       TestLEDS_1
                     733   ; }
                     734   ; }
                     735   ; void SwitchTest(void)
                     736   ; {
                     737   _SwitchTest:
00000AA4  48E7 3020  738          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  739          lea       _printf.L,A2
00000AAC  2F1A      
                     740   ; int i, switches = 0 ;
00000AAE  4283       741          clr.l     D3
                     742   ; printf("\r\n") ;
00000AB0  4879 0000  743          pea       @m68kde~1_1.L
00000AB4  386A      
00000AB6  4E92       744          jsr       (A2)
00000AB8  584F       745          addq.w    #4,A7
                     746   ; while(1)    {
                     747   SwitchTest_1:
                     748   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  749          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  750          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       751          lsl.l     #8,D0
00000AC8  1239 0040  752          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  753          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       754          or.l      D1,D0
00000AD6  2600       755          move.l    D0,D3
                     756   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  757          pea       @m68kde~1_2.L
00000ADC  386E      
00000ADE  4E92       758          jsr       (A2)
00000AE0  584F       759          addq.w    #4,A7
                     760   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  761          move.l    #128,D2
00000AE6  0080      
                     762   SwitchTest_4:
00000AE8  0C82 0000  763          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       764          ble.s     SwitchTest_6
                     765   ; if((switches & i) == 0)
00000AF0  2003       766          move.l    D3,D0
00000AF2  C082       767          and.l     D2,D0
00000AF4  660C       768          bne.s     SwitchTest_7
                     769   ; printf("0") ;
00000AF6  4879 0000  770          pea       @m68kde~1_3.L
00000AFA  3884      
00000AFC  4E92       771          jsr       (A2)
00000AFE  584F       772          addq.w    #4,A7
00000B00  600A       773          bra.s     SwitchTest_8
                     774   SwitchTest_7:
                     775   ; else
                     776   ; printf("1") ;
00000B02  4879 0000  777          pea       @m68kde~1_4.L
00000B06  3886      
00000B08  4E92       778          jsr       (A2)
00000B0A  584F       779          addq.w    #4,A7
                     780   SwitchTest_8:
00000B0C  E282       781          asr.l     #1,D2
00000B0E  60D8       782          bra       SwitchTest_4
                     783   SwitchTest_6:
00000B10  60A8       784          bra       SwitchTest_1
                     785   ; }
                     786   ; }
                     787   ; }
                     788   ; /*********************************************************************************************
                     789   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     790   ; *********************************************************************************************/
                     791   ; void Init_RS232(void)
                     792   ; {
                     793   _Init_RS232:
                     794   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  795          move.b    #21,4194368
00000B16  0040 0040 
                     796   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  797          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       798          rts
                     799   ; }
                     800   ; int kbhit(void)
                     801   ; {
                     802   _kbhit:
                     803   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  804          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  805          and.b     #1,D0
00000B2E  0C00 0001  806          cmp.b     #1,D0
00000B32  6604       807          bne.s     kbhit_1
                     808   ; return 1 ;
00000B34  7001       809          moveq     #1,D0
00000B36  6002       810          bra.s     kbhit_3
                     811   kbhit_1:
                     812   ; else
                     813   ; return 0 ;
00000B38  4280       814          clr.l     D0
                     815   kbhit_3:
00000B3A  4E75       816          rts
                     817   ; }
                     818   ; /*********************************************************************************************************
                     819   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     820   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     821   ; **  to allow the board to communicate with HyperTerminal Program
                     822   ; **
                     823   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     824   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     825   ; **  call _putch() also
                     826   ; *********************************************************************************************************/
                     827   ; int _putch( int c)
                     828   ; {
                     829   __putch:
00000B3C  4E56 0000  830          link      A6,#0
                     831   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     832   _putch_1:
00000B40  1039 0040  833          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  834          and.b     #2,D0
00000B4A  0C00 0002  835          cmp.b     #2,D0
00000B4E  6702       836          beq.s     _putch_3
00000B50  60EE       837          bra       _putch_1
                     838   _putch_3:
                     839   ; ;
                     840   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  841          move.l    8(A6),D0
00000B56  C03C 007F  842          and.b     #127,D0
00000B5A  13C0 0040  843          move.b    D0,4194370
00000B5E  0042      
                     844   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  845          move.l    8(A6),D0
00000B64  4E5E       846          unlk      A6
00000B66  4E75       847          rts
                     848   ; }
                     849   ; /*********************************************************************************************************
                     850   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     851   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     852   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     853   ; **
                     854   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     855   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     856   ; **  call _getch() also
                     857   ; *********************************************************************************************************/
                     858   ; int _getch( void )
                     859   ; {
                     860   __getch:
00000B68  2F02       861          move.l    D2,-(A7)
                     862   ; int c ;
                     863   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     864   _getch_1:
00000B6A  1039 0040  865          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  866          and.b     #1,D0
00000B74  0C00 0001  867          cmp.b     #1,D0
00000B78  6702       868          beq.s     _getch_3
00000B7A  60EE       869          bra       _getch_1
                     870   _getch_3:
                     871   ; ;
                     872   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  873          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  874          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  875          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       876          move.l    D0,D2
                     877   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     878   ; if(Echo)
00000B90  4AB9 0B00  879          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       880          beq.s     _getch_4
                     881   ; _putch(c);
00000B98  2F02       882          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  883          jsr       __putch
00000B9E  584F       884          addq.w    #4,A7
                     885   _getch_4:
                     886   ; return c ;
00000BA0  2002       887          move.l    D2,D0
00000BA2  241F       888          move.l    (A7)+,D2
00000BA4  4E75       889          rts
                     890   ; }
                     891   ; // flush the input stream for any unread characters
                     892   ; void FlushKeyboard(void)
                     893   ; {
                     894   _FlushKeyboard:
00000BA6  4E56 FFFC  895          link      A6,#-4
                     896   ; char c ;
                     897   ; while(1)    {
                     898   FlushKeyboard_1:
                     899   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  900          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  901          and.b     #1,D0
00000BB4  0C00 0001  902          cmp.b     #1,D0
00000BB8  6610       903          bne.s     FlushKeyboard_4
                     904   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  905          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  906          and.b     #127,D0
00000BC4  1D40 FFFF  907          move.b    D0,-1(A6)
00000BC8  6002       908          bra.s     FlushKeyboard_5
                     909   FlushKeyboard_4:
                     910   ; else
                     911   ; return ;
00000BCA  6002       912          bra.s     FlushKeyboard_6
                     913   FlushKeyboard_5:
00000BCC  60DC       914          bra       FlushKeyboard_1
                     915   FlushKeyboard_6:
00000BCE  4E5E       916          unlk      A6
00000BD0  4E75       917          rts
                     918   ; }
                     919   ; }
                     920   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     921   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     922   ; char xtod(int c)
                     923   ; {
                     924   _xtod:
00000BD2  4E56 0000  925          link      A6,#0
00000BD6  2F02       926          move.l    D2,-(A7)
00000BD8  242E 0008  927          move.l    8(A6),D2
                     928   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  929          cmp.b     #57,D2
00000BE0  6E08       930          bgt.s     xtod_1
                     931   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       932          move.b    D2,D0
00000BE4  0400 0030  933          sub.b     #48,D0
00000BE8  6014       934          bra.s     xtod_3
                     935   xtod_1:
                     936   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  937          cmp.b     #70,D2
00000BEE  6F08       938          ble.s     xtod_4
                     939   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       940          move.b    D2,D0
00000BF2  0400 0057  941          sub.b     #87,D0
00000BF6  6006       942          bra.s     xtod_3
                     943   xtod_4:
                     944   ; else
                     945   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       946          move.b    D2,D0
00000BFA  0400 0037  947          sub.b     #55,D0
                     948   xtod_3:
00000BFE  241F       949          move.l    (A7)+,D2
00000C00  4E5E       950          unlk      A6
00000C02  4E75       951          rts
                     952   ; }
                     953   ; int Get2HexDigits(char *CheckSumPtr)
                     954   ; {
                     955   _Get2HexDigits:
00000C04  4E56 0000  956          link      A6,#0
00000C08  2F02       957          move.l    D2,-(A7)
                     958   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       959          move.l    D0,-(A7)
00000C0C  4EB8 0B68  960          jsr       __getch
00000C10  2200       961          move.l    D0,D1
00000C12  201F       962          move.l    (A7)+,D0
00000C14  2F01       963          move.l    D1,-(A7)
00000C16  4EB8 0BD2  964          jsr       _xtod
00000C1A  584F       965          addq.w    #4,A7
00000C1C  C0BC 0000  966          and.l     #255,D0
00000C20  00FF      
00000C22  E980       967          asl.l     #4,D0
00000C24  2F00       968          move.l    D0,-(A7)
00000C26  2F01       969          move.l    D1,-(A7)
00000C28  4EB8 0B68  970          jsr       __getch
00000C2C  221F       971          move.l    (A7)+,D1
00000C2E  2F00       972          move.l    D0,-(A7)
00000C30  4EB8 0BD2  973          jsr       _xtod
00000C34  584F       974          addq.w    #4,A7
00000C36  2200       975          move.l    D0,D1
00000C38  201F       976          move.l    (A7)+,D0
00000C3A  C2BC 0000  977          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       978          or.l      D1,D0
00000C42  2400       979          move.l    D0,D2
                     980   ; if(CheckSumPtr)
00000C44  4AAE 0008  981          tst.l     8(A6)
00000C48  6706       982          beq.s     Get2HexDigits_1
                     983   ; *CheckSumPtr += i ;
00000C4A  206E 0008  984          move.l    8(A6),A0
00000C4E  D510       985          add.b     D2,(A0)
                     986   Get2HexDigits_1:
                     987   ; return i ;
00000C50  2002       988          move.l    D2,D0
00000C52  241F       989          move.l    (A7)+,D2
00000C54  4E5E       990          unlk      A6
00000C56  4E75       991          rts
                     992   ; }
                     993   ; int Get4HexDigits(char *CheckSumPtr)
                     994   ; {
                     995   _Get4HexDigits:
00000C58  4E56 0000  996          link      A6,#0
                     997   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  998          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  999          jsr       _Get2HexDigits
00000C64  584F      1000          addq.w    #4,A7
00000C66  E180      1001          asl.l     #8,D0
00000C68  2F00      1002          move.l    D0,-(A7)
00000C6A  2F2E 0008 1003          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1004          jsr       _Get2HexDigits
00000C72  584F      1005          addq.w    #4,A7
00000C74  2200      1006          move.l    D0,D1
00000C76  201F      1007          move.l    (A7)+,D0
00000C78  8081      1008          or.l      D1,D0
00000C7A  4E5E      1009          unlk      A6
00000C7C  4E75      1010          rts
                    1011   ; }
                    1012   ; int Get6HexDigits(char *CheckSumPtr)
                    1013   ; {
                    1014   _Get6HexDigits:
00000C7E  4E56 0000 1015          link      A6,#0
                    1016   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1017          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1018          jsr       _Get4HexDigits
00000C8A  584F      1019          addq.w    #4,A7
00000C8C  E180      1020          asl.l     #8,D0
00000C8E  2F00      1021          move.l    D0,-(A7)
00000C90  2F2E 0008 1022          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1023          jsr       _Get2HexDigits
00000C98  584F      1024          addq.w    #4,A7
00000C9A  2200      1025          move.l    D0,D1
00000C9C  201F      1026          move.l    (A7)+,D0
00000C9E  8081      1027          or.l      D1,D0
00000CA0  4E5E      1028          unlk      A6
00000CA2  4E75      1029          rts
                    1030   ; }
                    1031   ; int Get8HexDigits(char *CheckSumPtr)
                    1032   ; {
                    1033   _Get8HexDigits:
00000CA4  4E56 0000 1034          link      A6,#0
                    1035   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1036          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1037          jsr       _Get4HexDigits
00000CB0  584F      1038          addq.w    #4,A7
00000CB2  E180      1039          asl.l     #8,D0
00000CB4  E180      1040          asl.l     #8,D0
00000CB6  2F00      1041          move.l    D0,-(A7)
00000CB8  2F2E 0008 1042          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1043          jsr       _Get4HexDigits
00000CC0  584F      1044          addq.w    #4,A7
00000CC2  2200      1045          move.l    D0,D1
00000CC4  201F      1046          move.l    (A7)+,D0
00000CC6  8081      1047          or.l      D1,D0
00000CC8  4E5E      1048          unlk      A6
00000CCA  4E75      1049          rts
                    1050   ; }
                    1051   ; void DumpMemory(void)   // simple dump memory fn
                    1052   ; {
                    1053   _DumpMemory:
00000CCC  48E7 3C30 1054          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1055          lea       _printf.L,A2
00000CD4  2F1A      
00000CD6  47F9 0000 1056          lea       _putch.L,A3
00000CDA  2E0C      
                    1057   ; int i, j ;
                    1058   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1059   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1060          pea       @m68kde~1_5.L
00000CE0  3888      
00000CE2  4E92      1061          jsr       (A2)
00000CE4  584F      1062          addq.w    #4,A7
                    1063   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1064          pea       @m68kde~1_6.L
00000CEA  38C2      
00000CEC  4E92      1065          jsr       (A2)
00000CEE  584F      1066          addq.w    #4,A7
                    1067   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1068          clr.l     -(A7)
00000CF2  4EB8 0CA4 1069          jsr       _Get8HexDigits
00000CF6  584F      1070          addq.w    #4,A7
00000CF8  2600      1071          move.l    D0,D3
                    1072   ; while(1)    {
                    1073   DumpMemory_1:
                    1074   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1075          clr.l     D5
                    1076   DumpMemory_4:
00000CFC  0C85 0000 1077          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1078          bge       DumpMemory_6
                    1079   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1080          move.l    D3,-(A7)
00000D08  4879 0000 1081          pea       @m68kde~1_7.L
00000D0C  38DA      
00000D0E  4E92      1082          jsr       (A2)
00000D10  504F      1083          addq.w    #8,A7
                    1084   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1085          clr.l     D2
                    1086   DumpMemory_7:
00000D14  0C82 0000 1087          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1088          bge.s     DumpMemory_9
                    1089   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1090          move.l    D3,A0
00000D1E  1230 2800 1091          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1092          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1093          move.l    D1,-(A7)
00000D2A  4879 0000 1094          pea       @m68kde~1_8.L
00000D2E  38E2      
00000D30  4E92      1095          jsr       (A2)
00000D32  504F      1096          addq.w    #8,A7
                    1097   ; putchar(' ') ;
00000D34  4878 0020 1098          pea       32
00000D38  4E93      1099          jsr       (A3)
00000D3A  584F      1100          addq.w    #4,A7
00000D3C  5282      1101          addq.l    #1,D2
00000D3E  60D4      1102          bra       DumpMemory_7
                    1103   DumpMemory_9:
                    1104   ; }
                    1105   ; // now display the data as ASCII at the end
                    1106   ; printf("  ") ;
00000D40  4879 0000 1107          pea       @m68kde~1_9.L
00000D44  38E8      
00000D46  4E92      1108          jsr       (A2)
00000D48  584F      1109          addq.w    #4,A7
                    1110   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1111          clr.l     D2
                    1112   DumpMemory_10:
00000D4C  0C82 0000 1113          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1114          bge       DumpMemory_12
                    1115   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1116          move.l    D3,A0
00000D58  1030 2800 1117          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1118          and.b     #127,D0
00000D60  1800      1119          move.b    D0,D4
                    1120   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1121          cmp.b     #127,D4
00000D66  6206      1122          bhi.s     DumpMemory_15
00000D68  0C04 0020 1123          cmp.b     #32,D4
00000D6C  640A      1124          bhs.s     DumpMemory_13
                    1125   DumpMemory_15:
                    1126   ; putchar('.') ;
00000D6E  4878 002E 1127          pea       46
00000D72  4E93      1128          jsr       (A3)
00000D74  584F      1129          addq.w    #4,A7
00000D76  6012      1130          bra.s     DumpMemory_14
                    1131   DumpMemory_13:
                    1132   ; else
                    1133   ; putchar(RamPtr[j]) ;
00000D78  2043      1134          move.l    D3,A0
00000D7A  1230 2800 1135          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1136          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1137          move.l    D1,-(A7)
00000D86  4E93      1138          jsr       (A3)
00000D88  584F      1139          addq.w    #4,A7
                    1140   DumpMemory_14:
00000D8A  5282      1141          addq.l    #1,D2
00000D8C  60BE      1142          bra       DumpMemory_10
                    1143   DumpMemory_12:
                    1144   ; }
                    1145   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1146          add.l     #16,D3
00000D92  0010      
00000D94  5285      1147          addq.l    #1,D5
00000D96  6000 FF64 1148          bra       DumpMemory_4
                    1149   DumpMemory_6:
                    1150   ; }
                    1151   ; printf("\r\n") ;
00000D9A  4879 0000 1152          pea       @m68kde~1_1.L
00000D9E  386A      
00000DA0  4E92      1153          jsr       (A2)
00000DA2  584F      1154          addq.w    #4,A7
                    1155   ; c = _getch() ;
00000DA4  4EB8 0B68 1156          jsr       __getch
00000DA8  1800      1157          move.b    D0,D4
                    1158   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1159          cmp.b     #27,D4
00000DAE  6602      1160          bne.s     DumpMemory_16
                    1161   ; break ;
00000DB0  6004      1162          bra.s     DumpMemory_3
                    1163   DumpMemory_16:
00000DB2  6000 FF46 1164          bra       DumpMemory_1
                    1165   DumpMemory_3:
00000DB6  4CDF 0C3C 1166          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1167          rts
                    1168   ; }
                    1169   ; }
                    1170   ; void FillMemory()
                    1171   ; {
                    1172   _FillMemory:
00000DBC  48E7 3820 1173          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1174          lea       _printf.L,A2
00000DC4  2F1A      
                    1175   ; char *StartRamPtr, *EndRamPtr ;
                    1176   ; unsigned char FillData ;
                    1177   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1178          pea       @m68kde~1_10.L
00000DCA  38EC      
00000DCC  4E92      1179          jsr       (A2)
00000DCE  584F      1180          addq.w    #4,A7
                    1181   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1182          pea       @m68kde~1_6.L
00000DD4  38C2      
00000DD6  4E92      1183          jsr       (A2)
00000DD8  584F      1184          addq.w    #4,A7
                    1185   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1186          clr.l     -(A7)
00000DDC  4EB8 0CA4 1187          jsr       _Get8HexDigits
00000DE0  584F      1188          addq.w    #4,A7
00000DE2  2400      1189          move.l    D0,D2
                    1190   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1191          pea       @m68kde~1_11.L
00000DE8  3900      
00000DEA  4E92      1192          jsr       (A2)
00000DEC  584F      1193          addq.w    #4,A7
                    1194   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1195          clr.l     -(A7)
00000DF0  4EB8 0CA4 1196          jsr       _Get8HexDigits
00000DF4  584F      1197          addq.w    #4,A7
00000DF6  2800      1198          move.l    D0,D4
                    1199   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1200          pea       @m68kde~1_12.L
00000DFC  3916      
00000DFE  4E92      1201          jsr       (A2)
00000E00  584F      1202          addq.w    #4,A7
                    1203   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1204          clr.l     -(A7)
00000E04  4EB8 0C04 1205          jsr       _Get2HexDigits
00000E08  584F      1206          addq.w    #4,A7
00000E0A  1600      1207          move.b    D0,D3
                    1208   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1209          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1210          move.l    D3,-(A7)
00000E14  2F04      1211          move.l    D4,-(A7)
00000E16  2F02      1212          move.l    D2,-(A7)
00000E18  4879 0000 1213          pea       @m68kde~1_13.L
00000E1C  392A      
00000E1E  4E92      1214          jsr       (A2)
00000E20  DEFC 0010 1215          add.w     #16,A7
                    1216   ; while(StartRamPtr < EndRamPtr)
                    1217   FillMemory_1:
00000E24  B484      1218          cmp.l     D4,D2
00000E26  6408      1219          bhs.s     FillMemory_3
                    1220   ; *StartRamPtr++ = FillData ;
00000E28  2042      1221          move.l    D2,A0
00000E2A  5282      1222          addq.l    #1,D2
00000E2C  1083      1223          move.b    D3,(A0)
00000E2E  60F4      1224          bra       FillMemory_1
                    1225   FillMemory_3:
00000E30  4CDF 041C 1226          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1227          rts
                    1228   ; }
                    1229   ; void Load_SRecordFile()
                    1230   ; {
                    1231   _Load_SRecordFile:
00000E36  4E56 FFDC 1232          link      A6,#-36
00000E3A  48E7 3F3C 1233          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1234          lea       -6(A6),A2
00000E42  47F8 0C04 1235          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1236          lea       _printf.L,A4
00000E4A  2F1A      
                    1237   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1238          clr.l     -18(A6)
00000E50  3A7C 0000 1239          move.w    #0,A5
                    1240   ; int result, ByteCount ;
                    1241   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1242   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1243   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1244          moveq     #0,D7
                    1245   ; AddressFail = 0 ;
00000E56  42AE FFEA 1246          clr.l     -22(A6)
                    1247   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1248          clr.l     _Echo.L
00000E5E  00E0      
                    1249   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1250          pea       @m68kde~1_14.L
00000E64  395A      
00000E66  4E94      1251          jsr       (A4)
00000E68  584F      1252          addq.w    #4,A7
                    1253   ; while(1)    {
                    1254   Load_SRecordFile_1:
                    1255   ; CheckSum = 0 ;
00000E6A  4212      1256          clr.b     (A2)
                    1257   ; do {
                    1258   Load_SRecordFile_4:
                    1259   ; c = toupper(_getch()) ;
00000E6C  2F00      1260          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1261          jsr       __getch
00000E72  2200      1262          move.l    D0,D1
00000E74  201F      1263          move.l    (A7)+,D0
00000E76  2F01      1264          move.l    D1,-(A7)
00000E78  4EB9 0000 1265          jsr       _toupper
00000E7C  2EEE      
00000E7E  584F      1266          addq.w    #4,A7
00000E80  1C00      1267          move.b    D0,D6
                    1268   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1269          cmp.b     #27,D6
00000E86  6604      1270          bne.s     Load_SRecordFile_6
                    1271   ; return;
00000E88  6000 0132 1272          bra       Load_SRecordFile_8
                    1273   Load_SRecordFile_6:
00000E8C  0C06 0053 1274          cmp.b     #83,D6
00000E90  66DA      1275          bne       Load_SRecordFile_4
                    1276   ; }while(c != (char)('S'));   // wait for S start of header
                    1277   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1278          jsr       __getch
00000E96  1600      1279          move.b    D0,D3
                    1280   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1281          cmp.b     #48,D3
00000E9C  6706      1282          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1283          cmp.b     #53,D3
00000EA2  6604      1284          bne.s     Load_SRecordFile_9
                    1285   Load_SRecordFile_11:
                    1286   ; continue ;
00000EA4  6000 00D2 1287          bra       Load_SRecordFile_23
                    1288   Load_SRecordFile_9:
                    1289   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1290          cmp.b     #55,D3
00000EAC  6D04      1291          blt.s     Load_SRecordFile_12
                    1292   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1293          bra       Load_SRecordFile_3
                    1294   Load_SRecordFile_12:
                    1295   ; // get the bytecount
                    1296   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1297          move.l    A2,-(A7)
00000EB4  4E93      1298          jsr       (A3)
00000EB6  584F      1299          addq.w    #4,A7
00000EB8  2D40 FFF6 1300          move.l    D0,-10(A6)
                    1301   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1302   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1303          cmp.b     #49,D3
00000EC0  660E      1304          bne.s     Load_SRecordFile_14
                    1305   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1306          moveq     #2,D5
                    1307   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1308          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1309          jsr       _Get4HexDigits
00000ECA  584F      1310          addq.w    #4,A7
00000ECC  2800      1311          move.l    D0,D4
00000ECE  6020      1312          bra.s     Load_SRecordFile_17
                    1313   Load_SRecordFile_14:
                    1314   ; }
                    1315   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1316          cmp.b     #50,D3
00000ED4  660E      1317          bne.s     Load_SRecordFile_16
                    1318   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1319          moveq     #3,D5
                    1320   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1321          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1322          jsr       _Get6HexDigits
00000EDE  584F      1323          addq.w    #4,A7
00000EE0  2800      1324          move.l    D0,D4
00000EE2  600C      1325          bra.s     Load_SRecordFile_17
                    1326   Load_SRecordFile_16:
                    1327   ; }
                    1328   ; else    {
                    1329   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1330          moveq     #4,D5
                    1331   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1332          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1333          jsr       _Get8HexDigits
00000EEC  584F      1334          addq.w    #4,A7
00000EEE  2800      1335          move.l    D0,D4
                    1336   Load_SRecordFile_17:
                    1337   ; }
                    1338   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1339          move.l    D4,-4(A6)
                    1340   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1341          move.l    -10(A6),D0
00000EF8  9085      1342          sub.l     D5,D0
00000EFA  5380      1343          subq.l    #1,D0
00000EFC  2D40 FFE2 1344          move.l    D0,-30(A6)
                    1345   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1346          clr.l     D2
                    1347   Load_SRecordFile_18:
00000F02  B4AE FFE2 1348          cmp.l     -30(A6),D2
00000F06  6C1E      1349          bge.s     Load_SRecordFile_20
                    1350   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1351          move.l    A2,-(A7)
00000F0A  4E93      1352          jsr       (A3)
00000F0C  584F      1353          addq.w    #4,A7
00000F0E  2D40 FFDE 1354          move.l    D0,-34(A6)
                    1355   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1356          move.l    -34(A6),D0
00000F16  206E FFFC 1357          move.l    -4(A6),A0
00000F1A  52AE FFFC 1358          addq.l    #1,-4(A6)
00000F1E  1080      1359          move.b    D0,(A0)
                    1360   ; ByteTotal++;
00000F20  524D      1361          addq.w    #1,A5
00000F22  5282      1362          addq.l    #1,D2
00000F24  60DC      1363          bra       Load_SRecordFile_18
                    1364   Load_SRecordFile_20:
                    1365   ; }
                    1366   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1367   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1368          clr.l     -(A7)
00000F28  4E93      1369          jsr       (A3)
00000F2A  584F      1370          addq.w    #4,A7
00000F2C  1D40 FFFB 1371          move.b    D0,-5(A6)
                    1372   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1373          move.b    (A2),D0
00000F32  4600      1374          not.b     D0
00000F34  4880      1375          ext.w     D0
00000F36  C07C 00FF 1376          and.w     #255,D0
00000F3A  122E FFFB 1377          move.b    -5(A6),D1
00000F3E  4881      1378          ext.w     D1
00000F40  C27C 00FF 1379          and.w     #255,D1
00000F44  B041      1380          cmp.w     D1,D0
00000F46  6708      1381          beq.s     Load_SRecordFile_21
                    1382   ; LoadFailed = 1 ;
00000F48  7E01      1383          moveq     #1,D7
                    1384   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1385          move.l    D4,-26(A6)
                    1386   ; break;
00000F4E  602C      1387          bra.s     Load_SRecordFile_3
                    1388   Load_SRecordFile_21:
                    1389   ; }
                    1390   ; SRecordCount++ ;
00000F50  52AE FFEE 1391          addq.l    #1,-18(A6)
                    1392   ; // display feedback on progress
                    1393   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1394          move.l    -18(A6),-(A7)
00000F58  4878 0019 1395          pea       25
00000F5C  4EB9 0000 1396          jsr       LDIV
00000F60  2D40      
00000F62  202F 0004 1397          move.l    4(A7),D0
00000F66  504F      1398          addq.w    #8,A7
00000F68  4A80      1399          tst.l     D0
00000F6A  660C      1400          bne.s     Load_SRecordFile_23
                    1401   ; putchar('.') ;
00000F6C  4878 002E 1402          pea       46
00000F70  4EB9 0000 1403          jsr       _putch
00000F74  2E0C      
00000F76  584F      1404          addq.w    #4,A7
                    1405   Load_SRecordFile_23:
00000F78  6000 FEF0 1406          bra       Load_SRecordFile_1
                    1407   Load_SRecordFile_3:
                    1408   ; }
                    1409   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1410          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1411          bne.s     Load_SRecordFile_25
                    1412   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1413          move.l    -26(A6),-(A7)
00000F88  4879 0000 1414          pea       @m68kde~1_15.L
00000F8C  398A      
00000F8E  4E94      1415          jsr       (A4)
00000F90  504F      1416          addq.w    #8,A7
00000F92  600C      1417          bra.s     Load_SRecordFile_26
                    1418   Load_SRecordFile_25:
                    1419   ; }
                    1420   ; else
                    1421   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1422          move.l    A5,-(A7)
00000F96  4879 0000 1423          pea       @m68kde~1_16.L
00000F9A  39B0      
00000F9C  4E94      1424          jsr       (A4)
00000F9E  504F      1425          addq.w    #8,A7
                    1426   Load_SRecordFile_26:
                    1427   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1428   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1429          clr.l     D2
                    1430   Load_SRecordFile_27:
00000FA2  0C82 0006 1431          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1432          bge.s     Load_SRecordFile_29
00000FAA  5282      1433          addq.l    #1,D2
00000FAC  60F4      1434          bra       Load_SRecordFile_27
                    1435   Load_SRecordFile_29:
                    1436   ; ;
                    1437   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1438          jsr       _FlushKeyboard
                    1439   ; Echo = 1;
00000FB2  23FC 0000 1440          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1441   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1442          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1443          unlk      A6
00000FC2  4E75      1444          rts
                    1445   ; }
                    1446   ; void MemoryChange(void)
                    1447   ; {
                    1448   _MemoryChange:
00000FC4  48E7 3820 1449          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1450          lea       _printf.L,A2
00000FCC  2F1A      
                    1451   ; unsigned char *RamPtr,c ; // pointer to memory
                    1452   ; int data ;
                    1453   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1454          pea       @m68kde~1_17.L
00000FD2  39D2      
00000FD4  4E92      1455          jsr       (A2)
00000FD6  584F      1456          addq.w    #4,A7
                    1457   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1458          pea       @m68kde~1_18.L
00000FDC  39EE      
00000FDE  4E92      1459          jsr       (A2)
00000FE0  584F      1460          addq.w    #4,A7
                    1461   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1462          pea       @m68kde~1_19.L
00000FE6  3A34      
00000FE8  4E92      1463          jsr       (A2)
00000FEA  584F      1464          addq.w    #4,A7
                    1465   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1466          clr.l     -(A7)
00000FEE  4EB8 0CA4 1467          jsr       _Get8HexDigits
00000FF2  584F      1468          addq.w    #4,A7
00000FF4  2600      1469          move.l    D0,D3
                    1470   ; // printf("\r\nEnter byte:");
                    1471   ; // Data = Get2HexDigits(0) ;
                    1472   ; while(1){
                    1473   MemoryChange_1:
                    1474   ; printf("\r\n[%08x] : %02x", RamPtr, *RamPtr) ;
00000FF6  2043      1475          move.l    D3,A0
00000FF8  1210      1476          move.b    (A0),D1
00000FFA  C2BC 0000 1477          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1478          move.l    D1,-(A7)
00001002  2F03      1479          move.l    D3,-(A7)
00001004  4879 0000 1480          pea       @m68kde~1_20.L
00001008  3A46      
0000100A  4E92      1481          jsr       (A2)
0000100C  DEFC 000C 1482          add.w     #12,A7
                    1483   ; c = tolower(_getch()) ;
00001010  2F00      1484          move.l    D0,-(A7)
00001012  4EB8 0B68 1485          jsr       __getch
00001016  2200      1486          move.l    D0,D1
00001018  201F      1487          move.l    (A7)+,D0
0000101A  2F01      1488          move.l    D1,-(A7)
0000101C  4EB9 0000 1489          jsr       _tolower
00001020  2E78      
00001022  584F      1490          addq.w    #4,A7
00001024  1400      1491          move.b    D0,D2
                    1492   ; if(c == (char)(0x1b))
00001026  0C02 001B 1493          cmp.b     #27,D2
0000102A  6604      1494          bne.s     MemoryChange_4
                    1495   ; return ;                                // abort on escape
0000102C  6000 0090 1496          bra       MemoryChange_6
                    1497   MemoryChange_4:
                    1498   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1499          cmp.b     #48,D2
00001034  6506      1500          blo.s     MemoryChange_10
00001036  0C02 0039 1501          cmp.b     #57,D2
0000103A  6310      1502          bls.s     MemoryChange_9
                    1503   MemoryChange_10:
0000103C  0C02 0061 1504          cmp.b     #97,D2
00001040  6500 006E 1505          blo       MemoryChange_7
00001044  0C02 0066 1506          cmp.b     #102,D2
00001048  6200 0066 1507          bhi       MemoryChange_7
                    1508   MemoryChange_9:
                    1509   ; data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1510          and.l     #255,D2
00001050  00FF      
00001052  2F02      1511          move.l    D2,-(A7)
00001054  4EB8 0BD2 1512          jsr       _xtod
00001058  584F      1513          addq.w    #4,A7
0000105A  C0BC 0000 1514          and.l     #255,D0
0000105E  00FF      
00001060  E980      1515          asl.l     #4,D0
00001062  2F00      1516          move.l    D0,-(A7)
00001064  2F01      1517          move.l    D1,-(A7)
00001066  4EB8 0B68 1518          jsr       __getch
0000106A  221F      1519          move.l    (A7)+,D1
0000106C  2F00      1520          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1521          jsr       _xtod
00001072  584F      1522          addq.w    #4,A7
00001074  2200      1523          move.l    D0,D1
00001076  201F      1524          move.l    (A7)+,D0
00001078  C2BC 0000 1525          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1526          or.l      D1,D0
00001080  2800      1527          move.l    D0,D4
                    1528   ; *RamPtr = (char)(data) ;
00001082  2043      1529          move.l    D3,A0
00001084  1084      1530          move.b    D4,(A0)
                    1531   ; if(*RamPtr != data) {
00001086  2043      1532          move.l    D3,A0
00001088  1010      1533          move.b    (A0),D0
0000108A  C0BC 0000 1534          and.l     #255,D0
0000108E  00FF      
00001090  B084      1535          cmp.l     D4,D0
00001092  671A      1536          beq.s     MemoryChange_11
                    1537   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", data, *RamPtr) ;
00001094  2043      1538          move.l    D3,A0
00001096  1210      1539          move.b    (A0),D1
00001098  C2BC 0000 1540          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1541          move.l    D1,-(A7)
000010A0  2F04      1542          move.l    D4,-(A7)
000010A2  4879 0000 1543          pea       @m68kde~1_21.L
000010A6  3A56      
000010A8  4E92      1544          jsr       (A2)
000010AA  DEFC 000C 1545          add.w     #12,A7
                    1546   MemoryChange_11:
000010AE  6008      1547          bra.s     MemoryChange_13
                    1548   MemoryChange_7:
                    1549   ; }
                    1550   ; }
                    1551   ; else if(c==(char)('-'))
000010B0  0C02 002D 1552          cmp.b     #45,D2
000010B4  6602      1553          bne.s     MemoryChange_13
                    1554   ; RamPtr -= 2 ; ;
000010B6  5583      1555          subq.l    #2,D3
                    1556   MemoryChange_13:
                    1557   ; RamPtr ++ ;
000010B8  5283      1558          addq.l    #1,D3
000010BA  6000 FF3A 1559          bra       MemoryChange_1
                    1560   MemoryChange_6:
000010BE  4CDF 041C 1561          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1562          rts
                    1563   ; }
                    1564   ; }
                    1565   ; //*************************LAB3******************************************/
                    1566   ; /******************************************************************************************
                    1567   ; ** The following code is for the SPI controller
                    1568   ; *******************************************************************************************/
                    1569   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1570   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1571   ; int TestForSPITransmitDataComplete(void)    {
                    1572   _TestForSPITransmitDataComplete:
                    1573   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1574   ; while((SPI_Status & 128)>>7 != 1);
                    1575   TestForSPITransmitDataComplete_1:
000010C4  1039 0040 1576          move.b    4227106,D0
000010C8  8022      
000010CA  C07C 00FF 1577          and.w     #255,D0
000010CE  C07C 0080 1578          and.w     #128,D0
000010D2  EE40      1579          asr.w     #7,D0
000010D4  0C40 0001 1580          cmp.w     #1,D0
000010D8  6702      1581          beq.s     TestForSPITransmitDataComplete_3
000010DA  60E8      1582          bra       TestForSPITransmitDataComplete_1
                    1583   TestForSPITransmitDataComplete_3:
                    1584   ; return 1; //TRUE
000010DC  7001      1585          moveq     #1,D0
000010DE  4E75      1586          rts
                    1587   ; }
                    1588   ; /************************************************************************************
                    1589   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1590   ; ************************************************************************************/
                    1591   ; void SPI_Init(void)
                    1592   ; {
                    1593   _SPI_Init:
                    1594   ; //TODO
                    1595   ; //
                    1596   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1597   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1598   ; //
                    1599   ; // Here are some settings we want to create
                    1600   ; //
                    1601   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1602   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1603   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1604   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1605   ; SPI_Control = 0x53;
000010E0  13FC 0053 1606          move.b    #83,4227104
000010E4  0040 8020 
                    1607   ; SPI_Ext = 0;
000010E8  4239 0040 1608          clr.b     4227110
000010EC  8026      
                    1609   ; SPI_CS = Disable_SPI_CS();
000010EE  13FC 00FF 1610          move.b    #255,4227112
000010F2  0040 8028 
000010F6  13FC 00FF 1611          move.b    #255,4227112
000010FA  0040 8028 
                    1612   ; SPI_Status = 0xC0;
000010FE  13FC 00C0 1613          move.b    #192,4227106
00001102  0040 8022 
00001106  4E75      1614          rts
                    1615   ; }
                    1616   ; /************************************************************************************
                    1617   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1618   ; ************************************************************************************/
                    1619   ; void WaitForSPITransmitComplete(void)
                    1620   ; {
                    1621   _WaitForSPITransmitComplete:
                    1622   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1623   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1624   ; // just in case they were set
                    1625   ; TestForSPITransmitDataComplete();
00001108  4EB8 10C4 1626          jsr       _TestForSPITransmitDataComplete
                    1627   ; SPI_Status=0xC0;
0000110C  13FC 00C0 1628          move.b    #192,4227106
00001110  0040 8022 
00001114  4E75      1629          rts
                    1630   ; }
                    1631   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1632   ; // wait for completion of transmission
                    1633   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1634   ; // by reading fom the SPI controller Data Register.
                    1635   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1636   ; //
                    1637   ; // modify '0' below to return back read byte from data register
                    1638   ; //
                    1639   ; /*******************************************************************
                    1640   ; ** Tell chip to disable blocks writes
                    1641   ; ********************************************************************/
                    1642   ; void DisableBlock(){
                    1643   _DisableBlock:
00001116  4E56 FFFC 1644          link      A6,#-4
                    1645   ; unsigned char c;
                    1646   ; Enable_SPI_CS();
0000111A  13FC 00FE 1647          move.b    #254,4227112
0000111E  0040 8028 
                    1648   ; SPI_Data = 1; //WRITE
00001122  13FC 0001 1649          move.b    #1,4227108
00001126  0040 8024 
                    1650   ; WaitForSPITransmitComplete();
0000112A  4EB8 1108 1651          jsr       _WaitForSPITransmitComplete
                    1652   ; c=SPI_Data;
0000112E  1D79 0040 1653          move.b    4227108,-1(A6)
00001132  8024 FFFF 
                    1654   ; SPI_Data = 2; //WRITE
00001136  13FC 0002 1655          move.b    #2,4227108
0000113A  0040 8024 
                    1656   ; WaitForSPITransmitComplete();
0000113E  4EB8 1108 1657          jsr       _WaitForSPITransmitComplete
                    1658   ; c=SPI_Data;
00001142  1D79 0040 1659          move.b    4227108,-1(A6)
00001146  8024 FFFF 
                    1660   ; Disable_SPI_CS();
0000114A  13FC 00FF 1661          move.b    #255,4227112
0000114E  0040 8028 
00001152  4E5E      1662          unlk      A6
00001154  4E75      1663          rts
                    1664   ; }
                    1665   ; /*******************************************************************
                    1666   ; ** Erase the chip before loading
                    1667   ; ********************************************************************/
                    1668   ; void EraseChip(void){
                    1669   _EraseChip:
00001156  4E56 FFFC 1670          link      A6,#-4
                    1671   ; unsigned char c;
                    1672   ; DisableBlock();
0000115A  4EB8 1116 1673          jsr       _DisableBlock
                    1674   ; ChipWrite();
0000115E  4EB9 0000 1675          jsr       _ChipWrite
00001162  11A0      
                    1676   ; Enable_SPI_CS();
00001164  13FC 00FE 1677          move.b    #254,4227112
00001168  0040 8028 
                    1678   ; SPI_Data = 0xC7; //dummy data
0000116C  13FC 00C7 1679          move.b    #199,4227108
00001170  0040 8024 
                    1680   ; WaitForSPITransmitComplete();
00001174  4EB8 1108 1681          jsr       _WaitForSPITransmitComplete
                    1682   ; c = SPI_Data;
00001178  1D79 0040 1683          move.b    4227108,-1(A6)
0000117C  8024 FFFF 
                    1684   ; Disable_SPI_CS();
00001180  13FC 00FF 1685          move.b    #255,4227112
00001184  0040 8028 
                    1686   ; WaitWrite();
00001188  4EB9 0000 1687          jsr       _WaitWrite
0000118C  11CC      
                    1688   ; printf("\r\nErased the chip");
0000118E  4879 0000 1689          pea       @m68kde~1_22.L
00001192  3A8A      
00001194  4EB9 0000 1690          jsr       _printf
00001198  2F1A      
0000119A  584F      1691          addq.w    #4,A7
0000119C  4E5E      1692          unlk      A6
0000119E  4E75      1693          rts
                    1694   ; }
                    1695   ; /*******************************************************************
                    1696   ; ** Enabling chip's write
                    1697   ; ********************************************************************/
                    1698   ; void ChipWrite(void){
                    1699   _ChipWrite:
000011A0  4E56 FFFC 1700          link      A6,#-4
                    1701   ; unsigned char c;
                    1702   ; Enable_SPI_CS();
000011A4  13FC 00FE 1703          move.b    #254,4227112
000011A8  0040 8028 
                    1704   ; SPI_Data = 6;
000011AC  13FC 0006 1705          move.b    #6,4227108
000011B0  0040 8024 
                    1706   ; WaitForSPITransmitComplete();
000011B4  4EB8 1108 1707          jsr       _WaitForSPITransmitComplete
                    1708   ; c=SPI_Data;
000011B8  1D79 0040 1709          move.b    4227108,-1(A6)
000011BC  8024 FFFF 
                    1710   ; Disable_SPI_CS();
000011C0  13FC 00FF 1711          move.b    #255,4227112
000011C4  0040 8028 
000011C8  4E5E      1712          unlk      A6
000011CA  4E75      1713          rts
                    1714   ; }
                    1715   ; /*******************************************************************
                    1716   ; ** Waiting for write
                    1717   ; ********************************************************************/
                    1718   ; void WaitWrite(void){
                    1719   _WaitWrite:
000011CC  2F02      1720          move.l    D2,-(A7)
                    1721   ; unsigned char c;
                    1722   ; Enable_SPI_CS();
000011CE  13FC 00FE 1723          move.b    #254,4227112
000011D2  0040 8028 
                    1724   ; SPI_Data = 5;
000011D6  13FC 0005 1725          move.b    #5,4227108
000011DA  0040 8024 
                    1726   ; WaitForSPITransmitComplete();
000011DE  4EB8 1108 1727          jsr       _WaitForSPITransmitComplete
                    1728   ; c=SPI_Data;
000011E2  1439 0040 1729          move.b    4227108,D2
000011E6  8024      
                    1730   ; while(1){
                    1731   WaitWrite_1:
                    1732   ; SPI_Data =0xFF;
000011E8  13FC 00FF 1733          move.b    #255,4227108
000011EC  0040 8024 
                    1734   ; WaitForSPITransmitComplete();
000011F0  4EB8 1108 1735          jsr       _WaitForSPITransmitComplete
                    1736   ; c=SPI_Data;
000011F4  1439 0040 1737          move.b    4227108,D2
000011F8  8024      
                    1738   ; if((c&1)!= 1)
000011FA  1002      1739          move.b    D2,D0
000011FC  C03C 0001 1740          and.b     #1,D0
00001200  0C00 0001 1741          cmp.b     #1,D0
00001204  6702      1742          beq.s     WaitWrite_4
                    1743   ; break;
00001206  6002      1744          bra.s     WaitWrite_3
                    1745   WaitWrite_4:
00001208  60DE      1746          bra       WaitWrite_1
                    1747   WaitWrite_3:
                    1748   ; }
                    1749   ; Disable_SPI_CS();
0000120A  13FC 00FF 1750          move.b    #255,4227112
0000120E  0040 8028 
00001212  241F      1751          move.l    (A7)+,D2
00001214  4E75      1752          rts
                    1753   ; }
                    1754   ; /*******************************************************************
                    1755   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1756   ; ********************************************************************/
                    1757   ; void ProgramFlashChip(void)
                    1758   ; {
                    1759   _ProgramFlashChip:
00001216  4E56 FFFC 1760          link      A6,#-4
0000121A  48E7 3C30 1761          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
0000121E  45F8 1108 1762          lea       _WaitForSPITransmitComplete.L,A2
00001222  47F9 0000 1763          lea       _printf.L,A3
00001226  2F1A      
                    1764   ; //
                    1765   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1766   ; // TODO : then verify by reading it back and comparing to memory
                    1767   ; //
                    1768   ; unsigned char *RamPtr;
                    1769   ; unsigned char  c;
                    1770   ; unsigned char Address1,Address2,Address3;
                    1771   ; int FlashAddress = 0;
00001228  4285      1772          clr.l     D5
                    1773   ; int i_1=0; //counter
0000122A  4284      1774          clr.l     D4
                    1775   ; printf("\r\nLet's run the ProgramFlashChip()");
0000122C  4879 0000 1776          pea       @m68kde~1_23.L
00001230  3A9C      
00001232  4E93      1777          jsr       (A3)
00001234  584F      1778          addq.w    #4,A7
                    1779   ; SPI_Init();
00001236  4EB8 10E0 1780          jsr       _SPI_Init
                    1781   ; EraseChip();
0000123A  4EB8 1156 1782          jsr       _EraseChip
                    1783   ; for(RamPtr= 0x08000000; RamPtr<= 0x08040000 ; RamPtr++){
0000123E  263C 0800 1784          move.l    #134217728,D3
00001242  0000      
                    1785   ProgramFlashChip_1:
00001244  0C83 0804 1786          cmp.l     #134479872,D3
00001248  0000      
0000124A  6200 00D6 1787          bhi       ProgramFlashChip_3
                    1788   ; if(i_1==0){
0000124E  4A84      1789          tst.l     D4
00001250  6600 007E 1790          bne       ProgramFlashChip_4
                    1791   ; //printf("\r\nEntered the loop_0");
                    1792   ; Address1 = ( FlashAddress>>16 ) & 0xFF;
00001254  2005      1793          move.l    D5,D0
00001256  E080      1794          asr.l     #8,D0
00001258  E080      1795          asr.l     #8,D0
0000125A  C0BC 0000 1796          and.l     #255,D0
0000125E  00FF      
00001260  1D40 FFFD 1797          move.b    D0,-3(A6)
                    1798   ; Address2 = ( FlashAddress>>8 ) & 0xFF;
00001264  2005      1799          move.l    D5,D0
00001266  E080      1800          asr.l     #8,D0
00001268  C0BC 0000 1801          and.l     #255,D0
0000126C  00FF      
0000126E  1D40 FFFE 1802          move.b    D0,-2(A6)
                    1803   ; Address3 = ( FlashAddress ) & 0xFF;
00001272  2005      1804          move.l    D5,D0
00001274  C0BC 0000 1805          and.l     #255,D0
00001278  00FF      
0000127A  1D40 FFFF 1806          move.b    D0,-1(A6)
                    1807   ; DisableBlock();
0000127E  4EB8 1116 1808          jsr       _DisableBlock
                    1809   ; //printf("\r\nEntered the loop_1");
                    1810   ; ChipWrite();
00001282  4EB8 11A0 1811          jsr       _ChipWrite
                    1812   ; //printf("\r\nEntered the loop_2");
                    1813   ; Enable_SPI_CS();
00001286  13FC 00FE 1814          move.b    #254,4227112
0000128A  0040 8028 
                    1815   ; SPI_Data=2;
0000128E  13FC 0002 1816          move.b    #2,4227108
00001292  0040 8024 
                    1817   ; WaitForSPITransmitComplete();
00001296  4E92      1818          jsr       (A2)
                    1819   ; c=SPI_Data;
00001298  1439 0040 1820          move.b    4227108,D2
0000129C  8024      
                    1821   ; //printf("\r\nEntered the loop_3");
                    1822   ; SPI_Data=Address1;
0000129E  13EE FFFD 1823          move.b    -3(A6),4227108
000012A2  0040 8024 
                    1824   ; WaitForSPITransmitComplete();
000012A6  4E92      1825          jsr       (A2)
                    1826   ; c=SPI_Data;
000012A8  1439 0040 1827          move.b    4227108,D2
000012AC  8024      
                    1828   ; //printf("\r\nEntered the loop_4");
                    1829   ; SPI_Data=Address2;
000012AE  13EE FFFE 1830          move.b    -2(A6),4227108
000012B2  0040 8024 
                    1831   ; WaitForSPITransmitComplete();
000012B6  4E92      1832          jsr       (A2)
                    1833   ; c=SPI_Data;
000012B8  1439 0040 1834          move.b    4227108,D2
000012BC  8024      
                    1835   ; //printf("\r\nEntered the loop_5");
                    1836   ; SPI_Data=Address3;
000012BE  13EE FFFF 1837          move.b    -1(A6),4227108
000012C2  0040 8024 
                    1838   ; WaitForSPITransmitComplete();
000012C6  4E92      1839          jsr       (A2)
                    1840   ; c=SPI_Data;
000012C8  1439 0040 1841          move.b    4227108,D2
000012CC  8024      
000012CE  603A      1842          bra.s     ProgramFlashChip_6
                    1843   ProgramFlashChip_4:
                    1844   ; //printf("\r\nEntered the loop_6");
                    1845   ; }
                    1846   ; else if(i_1== 255){
000012D0  0C84 0000 1847          cmp.l     #255,D4
000012D4  00FF      
000012D6  6632      1848          bne.s     ProgramFlashChip_6
                    1849   ; SPI_Data = *RamPtr;
000012D8  2043      1850          move.l    D3,A0
000012DA  13D0 0040 1851          move.b    (A0),4227108
000012DE  8024      
                    1852   ; WaitForSPITransmitComplete();
000012E0  4E92      1853          jsr       (A2)
                    1854   ; c=SPI_Data;
000012E2  1439 0040 1855          move.b    4227108,D2
000012E6  8024      
                    1856   ; //printf("\r\nEntered the loop_7");
                    1857   ; Disable_SPI_CS();
000012E8  13FC 00FF 1858          move.b    #255,4227112
000012EC  0040 8028 
                    1859   ; WaitWrite();
000012F0  4EB8 11CC 1860          jsr       _WaitWrite
                    1861   ; // printf("\r\nEntered the loop_8");
                    1862   ; FlashAddress +=256; //256
000012F4  0685 0000 1863          add.l     #256,D5
000012F8  0100      
                    1864   ; i_1=0;
000012FA  4284      1865          clr.l     D4
                    1866   ; printf("\n\r\n Address = %x DONE! ", RamPtr);
000012FC  2F03      1867          move.l    D3,-(A7)
000012FE  4879 0000 1868          pea       @m68kde~1_24.L
00001302  3AC0      
00001304  4E93      1869          jsr       (A3)
00001306  504F      1870          addq.w    #8,A7
                    1871   ; continue;
00001308  6012      1872          bra.s     ProgramFlashChip_2
                    1873   ProgramFlashChip_6:
                    1874   ; }
                    1875   ; SPI_Data = *RamPtr;
0000130A  2043      1876          move.l    D3,A0
0000130C  13D0 0040 1877          move.b    (A0),4227108
00001310  8024      
                    1878   ; WaitForSPITransmitComplete();
00001312  4E92      1879          jsr       (A2)
                    1880   ; c=SPI_Data;
00001314  1439 0040 1881          move.b    4227108,D2
00001318  8024      
                    1882   ; i_1++;
0000131A  5284      1883          addq.l    #1,D4
                    1884   ProgramFlashChip_2:
0000131C  5283      1885          addq.l    #1,D3
0000131E  6000 FF24 1886          bra       ProgramFlashChip_1
                    1887   ProgramFlashChip_3:
                    1888   ; //printf("\r %d ", i_1);
                    1889   ; }
                    1890   ; Disable_SPI_CS();
00001322  13FC 00FF 1891          move.b    #255,4227112
00001326  0040 8028 
                    1892   ; WaitWrite();
0000132A  4EB8 11CC 1893          jsr       _WaitWrite
                    1894   ; printf("\r\nFlash chip is programmed!");
0000132E  4879 0000 1895          pea       @m68kde~1_25.L
00001332  3AD8      
00001334  4E93      1896          jsr       (A3)
00001336  584F      1897          addq.w    #4,A7
                    1898   ; FlashMemoryTest();
00001338  4EB9 0000 1899          jsr       _FlashMemoryTest
0000133C  1346      
0000133E  4CDF 0C3C 1900          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001342  4E5E      1901          unlk      A6
00001344  4E75      1902          rts
                    1903   ; }
                    1904   ; void FlashMemoryTest(void){
                    1905   _FlashMemoryTest:
00001346  4E56 FFFC 1906          link      A6,#-4
0000134A  48E7 3030 1907          movem.l   D2/D3/A2/A3,-(A7)
0000134E  45F8 1108 1908          lea       _WaitForSPITransmitComplete.L,A2
00001352  47F9 0000 1909          lea       _printf.L,A3
00001356  2F1A      
                    1910   ; unsigned char *RamPtr;
                    1911   ; unsigned char test_byte,c;
                    1912   ; unsigned char Address1,Address2,Address3;
                    1913   ; Address1=0x00;
00001358  422E FFFD 1914          clr.b     -3(A6)
                    1915   ; Address2=0x00;
0000135C  422E FFFE 1916          clr.b     -2(A6)
                    1917   ; Address3=0x00;
00001360  422E FFFF 1918          clr.b     -1(A6)
                    1919   ; Enable_SPI_CS();
00001364  13FC 00FE 1920          move.b    #254,4227112
00001368  0040 8028 
                    1921   ; SPI_Data=3;
0000136C  13FC 0003 1922          move.b    #3,4227108
00001370  0040 8024 
                    1923   ; WaitForSPITransmitComplete();
00001374  4E92      1924          jsr       (A2)
                    1925   ; c=SPI_Data;
00001376  1639 0040 1926          move.b    4227108,D3
0000137A  8024      
                    1927   ; SPI_Data=Address1;
0000137C  13EE FFFD 1928          move.b    -3(A6),4227108
00001380  0040 8024 
                    1929   ; WaitForSPITransmitComplete();
00001384  4E92      1930          jsr       (A2)
                    1931   ; c=SPI_Data;
00001386  1639 0040 1932          move.b    4227108,D3
0000138A  8024      
                    1933   ; SPI_Data=Address2;
0000138C  13EE FFFE 1934          move.b    -2(A6),4227108
00001390  0040 8024 
                    1935   ; WaitForSPITransmitComplete();
00001394  4E92      1936          jsr       (A2)
                    1937   ; c=SPI_Data;
00001396  1639 0040 1938          move.b    4227108,D3
0000139A  8024      
                    1939   ; SPI_Data=Address3;
0000139C  13EE FFFF 1940          move.b    -1(A6),4227108
000013A0  0040 8024 
                    1941   ; WaitForSPITransmitComplete();
000013A4  4E92      1942          jsr       (A2)
                    1943   ; c=SPI_Data;
000013A6  1639 0040 1944          move.b    4227108,D3
000013AA  8024      
                    1945   ; for(RamPtr= 0x08000000; RamPtr<= 0x08040000 ; RamPtr++){
000013AC  243C 0800 1946          move.l    #134217728,D2
000013B0  0000      
                    1947   FlashMemoryTest_1:
000013B2  0C82 0804 1948          cmp.l     #134479872,D2
000013B6  0000      
000013B8  6200 004A 1949          bhi       FlashMemoryTest_3
                    1950   ; SPI_Data = 0xFF; //Dummy DATA
000013BC  13FC 00FF 1951          move.b    #255,4227108
000013C0  0040 8024 
                    1952   ; WaitForSPITransmitComplete();
000013C4  4E92      1953          jsr       (A2)
                    1954   ; test_byte=SPI_Data;
000013C6  1D79 0040 1955          move.b    4227108,-4(A6)
000013CA  8024 FFFC 
                    1956   ; if(test_byte!=*RamPtr){
000013CE  2042      1957          move.l    D2,A0
000013D0  102E FFFC 1958          move.b    -4(A6),D0
000013D4  B010      1959          cmp.b     (A0),D0
000013D6  6728      1960          beq.s     FlashMemoryTest_4
                    1961   ; printf("\r\nFailed");
000013D8  4879 0000 1962          pea       @m68kde~1_26.L
000013DC  3AF4      
000013DE  4E93      1963          jsr       (A3)
000013E0  584F      1964          addq.w    #4,A7
                    1965   ; printf("\r\nThe byte number %d is wrong",RamPtr-0x08000000);
000013E2  2202      1966          move.l    D2,D1
000013E4  0481 0800 1967          sub.l     #134217728,D1
000013E8  0000      
000013EA  2F01      1968          move.l    D1,-(A7)
000013EC  4879 0000 1969          pea       @m68kde~1_27.L
000013F0  3AFE      
000013F2  4E93      1970          jsr       (A3)
000013F4  504F      1971          addq.w    #8,A7
                    1972   ; Disable_SPI_CS();
000013F6  13FC 00FF 1973          move.b    #255,4227112
000013FA  0040 8028 
                    1974   ; return;
000013FE  6016      1975          bra.s     FlashMemoryTest_6
                    1976   FlashMemoryTest_4:
00001400  5282      1977          addq.l    #1,D2
00001402  60AE      1978          bra       FlashMemoryTest_1
                    1979   FlashMemoryTest_3:
                    1980   ; }
                    1981   ; }
                    1982   ; Disable_SPI_CS();
00001404  13FC 00FF 1983          move.b    #255,4227112
00001408  0040 8028 
                    1984   ; printf("\r\n Flash Memory Test Succesful !");
0000140C  4879 0000 1985          pea       @m68kde~1_28.L
00001410  3B1C      
00001412  4E93      1986          jsr       (A3)
00001414  584F      1987          addq.w    #4,A7
                    1988   FlashMemoryTest_6:
00001416  4CDF 0C0C 1989          movem.l   (A7)+,D2/D3/A2/A3
0000141A  4E5E      1990          unlk      A6
0000141C  4E75      1991          rts
                    1992   ; }
                    1993   ; /*************************************************************************
                    1994   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1995   ; **************************************************************************/
                    1996   ; void LoadFromFlashChip(void)
                    1997   ; {
                    1998   _LoadFromFlashChip:
0000141E  4E56 FFFC 1999          link      A6,#-4
00001422  48E7 3020 2000          movem.l   D2/D3/A2,-(A7)
00001426  45F8 1108 2001          lea       _WaitForSPITransmitComplete.L,A2
                    2002   ; //
                    2003   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2004   ; //
                    2005   ; unsigned char *RamPtr;
                    2006   ; unsigned char test_byte,c;
                    2007   ; unsigned char Address1,Address2,Address3;
                    2008   ; Address1=0x00;
0000142A  422E FFFD 2009          clr.b     -3(A6)
                    2010   ; Address2=0x00;
0000142E  422E FFFE 2011          clr.b     -2(A6)
                    2012   ; Address3=0x00;
00001432  422E FFFF 2013          clr.b     -1(A6)
                    2014   ; printf("\r\n Loading from Flash Chip ...");
00001436  4879 0000 2015          pea       @m68kde~1_29.L
0000143A  3B3E      
0000143C  4EB9 0000 2016          jsr       _printf
00001440  2F1A      
00001442  584F      2017          addq.w    #4,A7
                    2018   ; SPI_Init();
00001444  4EB8 10E0 2019          jsr       _SPI_Init
                    2020   ; Enable_SPI_CS();
00001448  13FC 00FE 2021          move.b    #254,4227112
0000144C  0040 8028 
                    2022   ; SPI_Data=0x03;
00001450  13FC 0003 2023          move.b    #3,4227108
00001454  0040 8024 
                    2024   ; WaitForSPITransmitComplete();
00001458  4E92      2025          jsr       (A2)
                    2026   ; c=SPI_Data;
0000145A  1639 0040 2027          move.b    4227108,D3
0000145E  8024      
                    2028   ; SPI_Data=Address1;
00001460  13EE FFFD 2029          move.b    -3(A6),4227108
00001464  0040 8024 
                    2030   ; WaitForSPITransmitComplete();
00001468  4E92      2031          jsr       (A2)
                    2032   ; c=SPI_Data;
0000146A  1639 0040 2033          move.b    4227108,D3
0000146E  8024      
                    2034   ; SPI_Data=Address2;
00001470  13EE FFFE 2035          move.b    -2(A6),4227108
00001474  0040 8024 
                    2036   ; WaitForSPITransmitComplete();
00001478  4E92      2037          jsr       (A2)
                    2038   ; c=SPI_Data;
0000147A  1639 0040 2039          move.b    4227108,D3
0000147E  8024      
                    2040   ; SPI_Data=Address3;
00001480  13EE FFFF 2041          move.b    -1(A6),4227108
00001484  0040 8024 
                    2042   ; WaitForSPITransmitComplete();
00001488  4E92      2043          jsr       (A2)
                    2044   ; c=SPI_Data;
0000148A  1639 0040 2045          move.b    4227108,D3
0000148E  8024      
                    2046   ; for(RamPtr= 0x08000000; RamPtr<= 0x08040000 ; RamPtr++){
00001490  243C 0800 2047          move.l    #134217728,D2
00001494  0000      
                    2048   LoadFromFlashChip_1:
00001496  0C82 0804 2049          cmp.l     #134479872,D2
0000149A  0000      
0000149C  621C      2050          bhi.s     LoadFromFlashChip_3
                    2051   ; SPI_Data = 0xFF; //Dummy DATA
0000149E  13FC 00FF 2052          move.b    #255,4227108
000014A2  0040 8024 
                    2053   ; WaitForSPITransmitComplete();
000014A6  4E92      2054          jsr       (A2)
                    2055   ; test_byte=SPI_Data;
000014A8  1D79 0040 2056          move.b    4227108,-4(A6)
000014AC  8024 FFFC 
                    2057   ; *RamPtr = test_byte;
000014B0  2042      2058          move.l    D2,A0
000014B2  10AE FFFC 2059          move.b    -4(A6),(A0)
000014B6  5282      2060          addq.l    #1,D2
000014B8  60DC      2061          bra       LoadFromFlashChip_1
                    2062   LoadFromFlashChip_3:
                    2063   ; }
                    2064   ; Disable_SPI_CS();
000014BA  13FC 00FF 2065          move.b    #255,4227112
000014BE  0040 8028 
                    2066   ; printf("\r\nLoading from Chip is Succesful!");
000014C2  4879 0000 2067          pea       @m68kde~1_30.L
000014C6  3B5E      
000014C8  4EB9 0000 2068          jsr       _printf
000014CC  2F1A      
000014CE  584F      2069          addq.w    #4,A7
000014D0  4CDF 040C 2070          movem.l   (A7)+,D2/D3/A2
000014D4  4E5E      2071          unlk      A6
000014D6  4E75      2072          rts
                    2073   ; }
                    2074   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2075   ; // IMPORTANT
                    2076   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2077   ; // has to be done with an interrupt (IRQ Level 6)
                    2078   ; //
                    2079   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2080   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2081   ; //
                    2082   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2083   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2084   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2085   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2086   ; // program area
                    2087   ; //
                    2088   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2089   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2090   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2091   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2092   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2093   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2094   ; void DumpRegisters()
                    2095   ; {
                    2096   _DumpRegisters:
000014D8  48E7 3F3C 2097          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000014DC  45F9 0000 2098          lea       _putch.L,A2
000014E0  2E0C      
000014E2  47F9 0000 2099          lea       _printf.L,A3
000014E6  2F1A      
000014E8  49F9 0B00 2100          lea       _SR.L,A4
000014EC  012C      
000014EE  4BF9 0B00 2101          lea       _WatchPointString.L,A5
000014F2  01C2      
                    2102   ; short i, x, j, k ;
                    2103   ; unsigned char c, *BytePointer;
                    2104   ; // buld up strings for displaying watchpoints
                    2105   ; for(x = 0; x < (short)(8); x++)
000014F4  4242      2106          clr.w     D2
                    2107   DumpRegisters_1:
000014F6  0C42 0008 2108          cmp.w     #8,D2
000014FA  6C00 01C6 2109          bge       DumpRegisters_3
                    2110   ; {
                    2111   ; if(WatchPointSetOrCleared[x] == 1)
000014FE  48C2      2112          ext.l     D2
00001500  2002      2113          move.l    D2,D0
00001502  E588      2114          lsl.l     #2,D0
00001504  41F9 0B00 2115          lea       _WatchPointSetOrCleared.L,A0
00001508  01A2      
0000150A  2030 0800 2116          move.l    0(A0,D0.L),D0
0000150E  0C80 0000 2117          cmp.l     #1,D0
00001512  0001      
00001514  6600 0186 2118          bne       DumpRegisters_4
                    2119   ; {
                    2120   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001518  48C2      2121          ext.l     D2
0000151A  2202      2122          move.l    D2,D1
0000151C  E589      2123          lsl.l     #2,D1
0000151E  41F9 0B00 2124          lea       _WatchPointAddress.L,A0
00001522  0182      
00001524  2F30 1800 2125          move.l    0(A0,D1.L),-(A7)
00001528  4879 0000 2126          pea       @m68kde~1_31.L
0000152C  3B80      
0000152E  220D      2127          move.l    A5,D1
00001530  48C2      2128          ext.l     D2
00001532  2F00      2129          move.l    D0,-(A7)
00001534  2002      2130          move.l    D2,D0
00001536  C1FC 0064 2131          muls      #100,D0
0000153A  D280      2132          add.l     D0,D1
0000153C  201F      2133          move.l    (A7)+,D0
0000153E  2F01      2134          move.l    D1,-(A7)
00001540  4EB9 0000 2135          jsr       _sprintf
00001544  2EA4      
00001546  DEFC 000C 2136          add.w     #12,A7
                    2137   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000154A  48C2      2138          ext.l     D2
0000154C  2002      2139          move.l    D2,D0
0000154E  E588      2140          lsl.l     #2,D0
00001550  41F9 0B00 2141          lea       _WatchPointAddress.L,A0
00001554  0182      
00001556  2A30 0800 2142          move.l    0(A0,D0.L),D5
                    2143   ; for(j = 0; j < (short)(16); j+=2)
0000155A  4243      2144          clr.w     D3
                    2145   DumpRegisters_6:
0000155C  0C43 0010 2146          cmp.w     #16,D3
00001560  6C00 0082 2147          bge       DumpRegisters_8
                    2148   ; {
                    2149   ; for(k = 0; k < (short)(2); k++)
00001564  4246      2150          clr.w     D6
                    2151   DumpRegisters_9:
00001566  0C46 0002 2152          cmp.w     #2,D6
0000156A  6C00 0052 2153          bge       DumpRegisters_11
                    2154   ; {
                    2155   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000156E  2045      2156          move.l    D5,A0
00001570  48C3      2157          ext.l     D3
00001572  2203      2158          move.l    D3,D1
00001574  48C6      2159          ext.l     D6
00001576  D286      2160          add.l     D6,D1
00001578  1230 1800 2161          move.b    0(A0,D1.L),D1
0000157C  C2BC 0000 2162          and.l     #255,D1
00001580  00FF      
00001582  2F01      2163          move.l    D1,-(A7)
00001584  4879 0000 2164          pea       @m68kde~1_8.L
00001588  38E2      
0000158A  4879 0B00 2165          pea       _TempString.L
0000158E  04E2      
00001590  4EB9 0000 2166          jsr       _sprintf
00001594  2EA4      
00001596  DEFC 000C 2167          add.w     #12,A7
                    2168   ; strcat(WatchPointString[x], TempString) ;
0000159A  4879 0B00 2169          pea       _TempString.L
0000159E  04E2      
000015A0  220D      2170          move.l    A5,D1
000015A2  48C2      2171          ext.l     D2
000015A4  2F00      2172          move.l    D0,-(A7)
000015A6  2002      2173          move.l    D2,D0
000015A8  C1FC 0064 2174          muls      #100,D0
000015AC  D280      2175          add.l     D0,D1
000015AE  201F      2176          move.l    (A7)+,D0
000015B0  2F01      2177          move.l    D1,-(A7)
000015B2  4EB9 0000 2178          jsr       _strcat
000015B6  2ED8      
000015B8  504F      2179          addq.w    #8,A7
000015BA  5246      2180          addq.w    #1,D6
000015BC  60A8      2181          bra       DumpRegisters_9
                    2182   DumpRegisters_11:
                    2183   ; }
                    2184   ; strcat(WatchPointString[x]," ") ;
000015BE  4879 0000 2185          pea       @m68kde~1_32.L
000015C2  3B88      
000015C4  220D      2186          move.l    A5,D1
000015C6  48C2      2187          ext.l     D2
000015C8  2F00      2188          move.l    D0,-(A7)
000015CA  2002      2189          move.l    D2,D0
000015CC  C1FC 0064 2190          muls      #100,D0
000015D0  D280      2191          add.l     D0,D1
000015D2  201F      2192          move.l    (A7)+,D0
000015D4  2F01      2193          move.l    D1,-(A7)
000015D6  4EB9 0000 2194          jsr       _strcat
000015DA  2ED8      
000015DC  504F      2195          addq.w    #8,A7
000015DE  5443      2196          addq.w    #2,D3
000015E0  6000 FF7A 2197          bra       DumpRegisters_6
                    2198   DumpRegisters_8:
                    2199   ; }
                    2200   ; strcat(WatchPointString[x], "  ") ;
000015E4  4879 0000 2201          pea       @m68kde~1_9.L
000015E8  38E8      
000015EA  220D      2202          move.l    A5,D1
000015EC  48C2      2203          ext.l     D2
000015EE  2F00      2204          move.l    D0,-(A7)
000015F0  2002      2205          move.l    D2,D0
000015F2  C1FC 0064 2206          muls      #100,D0
000015F6  D280      2207          add.l     D0,D1
000015F8  201F      2208          move.l    (A7)+,D0
000015FA  2F01      2209          move.l    D1,-(A7)
000015FC  4EB9 0000 2210          jsr       _strcat
00001600  2ED8      
00001602  504F      2211          addq.w    #8,A7
                    2212   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001604  48C2      2213          ext.l     D2
00001606  2002      2214          move.l    D2,D0
00001608  E588      2215          lsl.l     #2,D0
0000160A  41F9 0B00 2216          lea       _WatchPointAddress.L,A0
0000160E  0182      
00001610  2A30 0800 2217          move.l    0(A0,D0.L),D5
                    2218   ; for(j = 0; j < (short)(16); j++)
00001614  4243      2219          clr.w     D3
                    2220   DumpRegisters_12:
00001616  0C43 0010 2221          cmp.w     #16,D3
0000161A  6C00 007E 2222          bge       DumpRegisters_14
                    2223   ; {
                    2224   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000161E  2045      2225          move.l    D5,A0
00001620  48C3      2226          ext.l     D3
00001622  1030 3800 2227          move.b    0(A0,D3.L),D0
00001626  C03C 007F 2228          and.b     #127,D0
0000162A  1E00      2229          move.b    D0,D7
                    2230   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000162C  0C07 007F 2231          cmp.b     #127,D7
00001630  6206      2232          bhi.s     DumpRegisters_17
00001632  0C07 0020 2233          cmp.b     #32,D7
00001636  6416      2234          bhs.s     DumpRegisters_15
                    2235   DumpRegisters_17:
                    2236   ; sprintf(TempString, ".") ;
00001638  4879 0000 2237          pea       @m68kde~1_33.L
0000163C  3B8A      
0000163E  4879 0B00 2238          pea       _TempString.L
00001642  04E2      
00001644  4EB9 0000 2239          jsr       _sprintf
00001648  2EA4      
0000164A  504F      2240          addq.w    #8,A7
0000164C  6026      2241          bra.s     DumpRegisters_16
                    2242   DumpRegisters_15:
                    2243   ; else
                    2244   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000164E  2045      2245          move.l    D5,A0
00001650  48C3      2246          ext.l     D3
00001652  1230 3800 2247          move.b    0(A0,D3.L),D1
00001656  C2BC 0000 2248          and.l     #255,D1
0000165A  00FF      
0000165C  2F01      2249          move.l    D1,-(A7)
0000165E  4879 0000 2250          pea       @m68kde~1_34.L
00001662  3B8C      
00001664  4879 0B00 2251          pea       _TempString.L
00001668  04E2      
0000166A  4EB9 0000 2252          jsr       _sprintf
0000166E  2EA4      
00001670  DEFC 000C 2253          add.w     #12,A7
                    2254   DumpRegisters_16:
                    2255   ; strcat(WatchPointString[x], TempString) ;
00001674  4879 0B00 2256          pea       _TempString.L
00001678  04E2      
0000167A  220D      2257          move.l    A5,D1
0000167C  48C2      2258          ext.l     D2
0000167E  2F00      2259          move.l    D0,-(A7)
00001680  2002      2260          move.l    D2,D0
00001682  C1FC 0064 2261          muls      #100,D0
00001686  D280      2262          add.l     D0,D1
00001688  201F      2263          move.l    (A7)+,D0
0000168A  2F01      2264          move.l    D1,-(A7)
0000168C  4EB9 0000 2265          jsr       _strcat
00001690  2ED8      
00001692  504F      2266          addq.w    #8,A7
00001694  5243      2267          addq.w    #1,D3
00001696  6000 FF7E 2268          bra       DumpRegisters_12
                    2269   DumpRegisters_14:
0000169A  6020      2270          bra.s     DumpRegisters_5
                    2271   DumpRegisters_4:
                    2272   ; }
                    2273   ; }
                    2274   ; else
                    2275   ; strcpy(WatchPointString[x], "") ;
0000169C  4879 0000 2276          pea       @m68kde~1_35.L
000016A0  3B90      
000016A2  220D      2277          move.l    A5,D1
000016A4  48C2      2278          ext.l     D2
000016A6  2F00      2279          move.l    D0,-(A7)
000016A8  2002      2280          move.l    D2,D0
000016AA  C1FC 0064 2281          muls      #100,D0
000016AE  D280      2282          add.l     D0,D1
000016B0  201F      2283          move.l    (A7)+,D0
000016B2  2F01      2284          move.l    D1,-(A7)
000016B4  4EB9 0000 2285          jsr       _strcpy
000016B8  2D1E      
000016BA  504F      2286          addq.w    #8,A7
                    2287   DumpRegisters_5:
000016BC  5242      2288          addq.w    #1,D2
000016BE  6000 FE36 2289          bra       DumpRegisters_1
                    2290   DumpRegisters_3:
                    2291   ; }
                    2292   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000016C2  2F39 0B00 2293          move.l    _a0.L,-(A7)
000016C6  0104      
000016C8  2F39 0B00 2294          move.l    _d0.L,-(A7)
000016CC  00E4      
000016CE  4879 0000 2295          pea       @m68kde~1_36.L
000016D2  3B92      
000016D4  4E93      2296          jsr       (A3)
000016D6  DEFC 000C 2297          add.w     #12,A7
                    2298   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000016DA  2F39 0B00 2299          move.l    _a1.L,-(A7)
000016DE  0108      
000016E0  2F39 0B00 2300          move.l    _d1.L,-(A7)
000016E4  00E8      
000016E6  4879 0000 2301          pea       @m68kde~1_37.L
000016EA  3BAE      
000016EC  4E93      2302          jsr       (A3)
000016EE  DEFC 000C 2303          add.w     #12,A7
                    2304   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000016F2  2F39 0B00 2305          move.l    _a2.L,-(A7)
000016F6  010C      
000016F8  2F39 0B00 2306          move.l    _d2.L,-(A7)
000016FC  00EC      
000016FE  4879 0000 2307          pea       @m68kde~1_38.L
00001702  3BC8      
00001704  4E93      2308          jsr       (A3)
00001706  DEFC 000C 2309          add.w     #12,A7
                    2310   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000170A  2F39 0B00 2311          move.l    _a3.L,-(A7)
0000170E  0110      
00001710  2F39 0B00 2312          move.l    _d3.L,-(A7)
00001714  00F0      
00001716  4879 0000 2313          pea       @m68kde~1_39.L
0000171A  3BE2      
0000171C  4E93      2314          jsr       (A3)
0000171E  DEFC 000C 2315          add.w     #12,A7
                    2316   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001722  2F39 0B00 2317          move.l    _a4.L,-(A7)
00001726  0114      
00001728  2F39 0B00 2318          move.l    _d4.L,-(A7)
0000172C  00F4      
0000172E  4879 0000 2319          pea       @m68kde~1_40.L
00001732  3BFC      
00001734  4E93      2320          jsr       (A3)
00001736  DEFC 000C 2321          add.w     #12,A7
                    2322   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000173A  2F39 0B00 2323          move.l    _a5.L,-(A7)
0000173E  0118      
00001740  2F39 0B00 2324          move.l    _d5.L,-(A7)
00001744  00F8      
00001746  4879 0000 2325          pea       @m68kde~1_41.L
0000174A  3C16      
0000174C  4E93      2326          jsr       (A3)
0000174E  DEFC 000C 2327          add.w     #12,A7
                    2328   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001752  2F39 0B00 2329          move.l    _a6.L,-(A7)
00001756  011C      
00001758  2F39 0B00 2330          move.l    _d6.L,-(A7)
0000175C  00FC      
0000175E  4879 0000 2331          pea       @m68kde~1_42.L
00001762  3C30      
00001764  4E93      2332          jsr       (A3)
00001766  DEFC 000C 2333          add.w     #12,A7
                    2334   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000176A  3214      2335          move.w    (A4),D1
0000176C  C27C 2000 2336          and.w     #8192,D1
00001770  0C41 2000 2337          cmp.w     #8192,D1
00001774  6608      2338          bne.s     DumpRegisters_18
00001776  2239 0B00 2339          move.l    _SSP.L,D1
0000177A  0124      
0000177C  6006      2340          bra.s     DumpRegisters_19
                    2341   DumpRegisters_18:
0000177E  2239 0B00 2342          move.l    _USP.L,D1
00001782  0128      
                    2343   DumpRegisters_19:
00001784  2F01      2344          move.l    D1,-(A7)
00001786  2F39 0B00 2345          move.l    _d7.L,-(A7)
0000178A  0100      
0000178C  4879 0000 2346          pea       @m68kde~1_43.L
00001790  3C4A      
00001792  4E93      2347          jsr       (A3)
00001794  DEFC 000C 2348          add.w     #12,A7
                    2349   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001798  2F39 0B00 2350          move.l    _USP.L,-(A7)
0000179C  0128      
0000179E  4879 0000 2351          pea       @m68kde~1_44.L
000017A2  3C64      
000017A4  4E93      2352          jsr       (A3)
000017A6  504F      2353          addq.w    #8,A7
                    2354   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000017A8  2F39 0B00 2355          move.l    _SSP.L,-(A7)
000017AC  0124      
000017AE  4879 0000 2356          pea       @m68kde~1_45.L
000017B2  3C82      
000017B4  4E93      2357          jsr       (A3)
000017B6  504F      2358          addq.w    #8,A7
                    2359   ; printf("\r\n SR = $%04X   ",SR) ;
000017B8  3214      2360          move.w    (A4),D1
000017BA  C2BC 0000 2361          and.l     #65535,D1
000017BE  FFFF      
000017C0  2F01      2362          move.l    D1,-(A7)
000017C2  4879 0000 2363          pea       @m68kde~1_46.L
000017C6  3CA4      
000017C8  4E93      2364          jsr       (A3)
000017CA  504F      2365          addq.w    #8,A7
                    2366   ; // display the status word in characters etc.
                    2367   ; printf("   [") ;
000017CC  4879 0000 2368          pea       @m68kde~1_47.L
000017D0  3CB6      
000017D2  4E93      2369          jsr       (A3)
000017D4  584F      2370          addq.w    #4,A7
                    2371   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000017D6  3014      2372          move.w    (A4),D0
000017D8  C07C 8000 2373          and.w     #32768,D0
000017DC  0C40 8000 2374          cmp.w     #32768,D0
000017E0  660A      2375          bne.s     DumpRegisters_20
000017E2  4878 0054 2376          pea       84
000017E6  4E92      2377          jsr       (A2)
000017E8  584F      2378          addq.w    #4,A7
000017EA  6008      2379          bra.s     DumpRegisters_21
                    2380   DumpRegisters_20:
000017EC  4878 002D 2381          pea       45
000017F0  4E92      2382          jsr       (A2)
000017F2  584F      2383          addq.w    #4,A7
                    2384   DumpRegisters_21:
                    2385   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000017F4  3014      2386          move.w    (A4),D0
000017F6  C07C 2000 2387          and.w     #8192,D0
000017FA  0C40 2000 2388          cmp.w     #8192,D0
000017FE  660A      2389          bne.s     DumpRegisters_22
00001800  4878 0053 2390          pea       83
00001804  4E92      2391          jsr       (A2)
00001806  584F      2392          addq.w    #4,A7
00001808  6008      2393          bra.s     DumpRegisters_23
                    2394   DumpRegisters_22:
0000180A  4878 0055 2395          pea       85
0000180E  4E92      2396          jsr       (A2)
00001810  584F      2397          addq.w    #4,A7
                    2398   DumpRegisters_23:
                    2399   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001812  3014      2400          move.w    (A4),D0
00001814  C07C 0400 2401          and.w     #1024,D0
00001818  0C40 0400 2402          cmp.w     #1024,D0
0000181C  660A      2403          bne.s     DumpRegisters_24
0000181E  4878 0031 2404          pea       49
00001822  4E92      2405          jsr       (A2)
00001824  584F      2406          addq.w    #4,A7
00001826  6008      2407          bra.s     DumpRegisters_25
                    2408   DumpRegisters_24:
00001828  4878 0030 2409          pea       48
0000182C  4E92      2410          jsr       (A2)
0000182E  584F      2411          addq.w    #4,A7
                    2412   DumpRegisters_25:
                    2413   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001830  3014      2414          move.w    (A4),D0
00001832  C07C 0200 2415          and.w     #512,D0
00001836  0C40 0200 2416          cmp.w     #512,D0
0000183A  660A      2417          bne.s     DumpRegisters_26
0000183C  4878 0031 2418          pea       49
00001840  4E92      2419          jsr       (A2)
00001842  584F      2420          addq.w    #4,A7
00001844  6008      2421          bra.s     DumpRegisters_27
                    2422   DumpRegisters_26:
00001846  4878 0030 2423          pea       48
0000184A  4E92      2424          jsr       (A2)
0000184C  584F      2425          addq.w    #4,A7
                    2426   DumpRegisters_27:
                    2427   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000184E  3014      2428          move.w    (A4),D0
00001850  C07C 0100 2429          and.w     #256,D0
00001854  0C40 0100 2430          cmp.w     #256,D0
00001858  660A      2431          bne.s     DumpRegisters_28
0000185A  4878 0031 2432          pea       49
0000185E  4E92      2433          jsr       (A2)
00001860  584F      2434          addq.w    #4,A7
00001862  6008      2435          bra.s     DumpRegisters_29
                    2436   DumpRegisters_28:
00001864  4878 0030 2437          pea       48
00001868  4E92      2438          jsr       (A2)
0000186A  584F      2439          addq.w    #4,A7
                    2440   DumpRegisters_29:
                    2441   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000186C  3014      2442          move.w    (A4),D0
0000186E  C07C 0010 2443          and.w     #16,D0
00001872  0C40 0010 2444          cmp.w     #16,D0
00001876  660A      2445          bne.s     DumpRegisters_30
00001878  4878 0058 2446          pea       88
0000187C  4E92      2447          jsr       (A2)
0000187E  584F      2448          addq.w    #4,A7
00001880  6008      2449          bra.s     DumpRegisters_31
                    2450   DumpRegisters_30:
00001882  4878 002D 2451          pea       45
00001886  4E92      2452          jsr       (A2)
00001888  584F      2453          addq.w    #4,A7
                    2454   DumpRegisters_31:
                    2455   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000188A  3014      2456          move.w    (A4),D0
0000188C  C07C 0008 2457          and.w     #8,D0
00001890  0C40 0008 2458          cmp.w     #8,D0
00001894  660A      2459          bne.s     DumpRegisters_32
00001896  4878 004E 2460          pea       78
0000189A  4E92      2461          jsr       (A2)
0000189C  584F      2462          addq.w    #4,A7
0000189E  6008      2463          bra.s     DumpRegisters_33
                    2464   DumpRegisters_32:
000018A0  4878 002D 2465          pea       45
000018A4  4E92      2466          jsr       (A2)
000018A6  584F      2467          addq.w    #4,A7
                    2468   DumpRegisters_33:
                    2469   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000018A8  3014      2470          move.w    (A4),D0
000018AA  C07C 0004 2471          and.w     #4,D0
000018AE  0C40 0004 2472          cmp.w     #4,D0
000018B2  660A      2473          bne.s     DumpRegisters_34
000018B4  4878 005A 2474          pea       90
000018B8  4E92      2475          jsr       (A2)
000018BA  584F      2476          addq.w    #4,A7
000018BC  6008      2477          bra.s     DumpRegisters_35
                    2478   DumpRegisters_34:
000018BE  4878 002D 2479          pea       45
000018C2  4E92      2480          jsr       (A2)
000018C4  584F      2481          addq.w    #4,A7
                    2482   DumpRegisters_35:
                    2483   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000018C6  3014      2484          move.w    (A4),D0
000018C8  C07C 0002 2485          and.w     #2,D0
000018CC  0C40 0002 2486          cmp.w     #2,D0
000018D0  660A      2487          bne.s     DumpRegisters_36
000018D2  4878 0056 2488          pea       86
000018D6  4E92      2489          jsr       (A2)
000018D8  584F      2490          addq.w    #4,A7
000018DA  6008      2491          bra.s     DumpRegisters_37
                    2492   DumpRegisters_36:
000018DC  4878 002D 2493          pea       45
000018E0  4E92      2494          jsr       (A2)
000018E2  584F      2495          addq.w    #4,A7
                    2496   DumpRegisters_37:
                    2497   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000018E4  3014      2498          move.w    (A4),D0
000018E6  C07C 0001 2499          and.w     #1,D0
000018EA  0C40 0001 2500          cmp.w     #1,D0
000018EE  660A      2501          bne.s     DumpRegisters_38
000018F0  4878 0043 2502          pea       67
000018F4  4E92      2503          jsr       (A2)
000018F6  584F      2504          addq.w    #4,A7
000018F8  6008      2505          bra.s     DumpRegisters_39
                    2506   DumpRegisters_38:
000018FA  4878 002D 2507          pea       45
000018FE  4E92      2508          jsr       (A2)
00001900  584F      2509          addq.w    #4,A7
                    2510   DumpRegisters_39:
                    2511   ; putchar(']') ;
00001902  4878 005D 2512          pea       93
00001906  4E92      2513          jsr       (A2)
00001908  584F      2514          addq.w    #4,A7
                    2515   ; printf("\r\n PC = $%08X  ", PC) ;
0000190A  2F39 0B00 2516          move.l    _PC.L,-(A7)
0000190E  0120      
00001910  4879 0000 2517          pea       @m68kde~1_48.L
00001914  3CBC      
00001916  4E93      2518          jsr       (A3)
00001918  504F      2519          addq.w    #8,A7
                    2520   ; if(*(unsigned short int *)(PC) == 0x4e4e)
0000191A  2039 0B00 2521          move.l    _PC.L,D0
0000191E  0120      
00001920  2040      2522          move.l    D0,A0
00001922  3010      2523          move.w    (A0),D0
00001924  0C40 4E4E 2524          cmp.w     #20046,D0
00001928  660A      2525          bne.s     DumpRegisters_40
                    2526   ; printf("[@ BREAKPOINT]") ;
0000192A  4879 0000 2527          pea       @m68kde~1_49.L
0000192E  3CCC      
00001930  4E93      2528          jsr       (A3)
00001932  584F      2529          addq.w    #4,A7
                    2530   DumpRegisters_40:
                    2531   ; printf("\r\n") ;
00001934  4879 0000 2532          pea       @m68kde~1_1.L
00001938  386A      
0000193A  4E93      2533          jsr       (A3)
0000193C  584F      2534          addq.w    #4,A7
                    2535   ; for(i=0; i < 8; i++)    {
0000193E  4244      2536          clr.w     D4
                    2537   DumpRegisters_42:
00001940  0C44 0008 2538          cmp.w     #8,D4
00001944  6C00 0040 2539          bge       DumpRegisters_44
                    2540   ; if(WatchPointSetOrCleared[i] == 1)
00001948  48C4      2541          ext.l     D4
0000194A  2004      2542          move.l    D4,D0
0000194C  E588      2543          lsl.l     #2,D0
0000194E  41F9 0B00 2544          lea       _WatchPointSetOrCleared.L,A0
00001952  01A2      
00001954  2030 0800 2545          move.l    0(A0,D0.L),D0
00001958  0C80 0000 2546          cmp.l     #1,D0
0000195C  0001      
0000195E  6622      2547          bne.s     DumpRegisters_45
                    2548   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001960  220D      2549          move.l    A5,D1
00001962  48C4      2550          ext.l     D4
00001964  2F00      2551          move.l    D0,-(A7)
00001966  2004      2552          move.l    D4,D0
00001968  C1FC 0064 2553          muls      #100,D0
0000196C  D280      2554          add.l     D0,D1
0000196E  201F      2555          move.l    (A7)+,D0
00001970  2F01      2556          move.l    D1,-(A7)
00001972  48C4      2557          ext.l     D4
00001974  2F04      2558          move.l    D4,-(A7)
00001976  4879 0000 2559          pea       @m68kde~1_50.L
0000197A  3CDC      
0000197C  4E93      2560          jsr       (A3)
0000197E  DEFC 000C 2561          add.w     #12,A7
                    2562   DumpRegisters_45:
00001982  5244      2563          addq.w    #1,D4
00001984  60BA      2564          bra       DumpRegisters_42
                    2565   DumpRegisters_44:
00001986  4CDF 3CFC 2566          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000198A  4E75      2567          rts
                    2568   ; }
                    2569   ; }
                    2570   ; // Trace Exception Handler
                    2571   ; void DumpRegistersandPause(void)
                    2572   ; {
                    2573   _DumpRegistersandPause:
0000198C  2F0A      2574          move.l    A2,-(A7)
0000198E  45F9 0000 2575          lea       _printf.L,A2
00001992  2F1A      
                    2576   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001994  4879 0000 2577          pea       @m68kde~1_51.L
00001998  3CE8      
0000199A  4E92      2578          jsr       (A2)
0000199C  584F      2579          addq.w    #4,A7
                    2580   ; printf("\r\nBreak Points :[Disabled]") ;
0000199E  4879 0000 2581          pea       @m68kde~1_52.L
000019A2  3D08      
000019A4  4E92      2582          jsr       (A2)
000019A6  584F      2583          addq.w    #4,A7
                    2584   ; DumpRegisters() ;
000019A8  4EB8 14D8 2585          jsr       _DumpRegisters
                    2586   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000019AC  4879 0000 2587          pea       @m68kde~1_53.L
000019B0  3D24      
000019B2  4E92      2588          jsr       (A2)
000019B4  584F      2589          addq.w    #4,A7
                    2590   ; printf("\r\nPress <ESC> to Resume Program") ;
000019B6  4879 0000 2591          pea       @m68kde~1_54.L
000019BA  3D50      
000019BC  4E92      2592          jsr       (A2)
000019BE  584F      2593          addq.w    #4,A7
                    2594   ; menu() ;
000019C0  4EB9 0000 2595          jsr       _menu
000019C4  2570      
000019C6  245F      2596          move.l    (A7)+,A2
000019C8  4E75      2597          rts
                    2598   ; }
                    2599   ; void ChangeRegisters(void)
                    2600   ; {
                    2601   _ChangeRegisters:
000019CA  4E56 FFFC 2602          link      A6,#-4
000019CE  48E7 303C 2603          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000019D2  45F9 0000 2604          lea       _printf.L,A2
000019D6  2F1A      
000019D8  47EE FFFC 2605          lea       -4(A6),A3
000019DC  49F8 0CA4 2606          lea       _Get8HexDigits.L,A4
000019E0  4BF8 0B68 2607          lea       __getch.L,A5
                    2608   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2609   ; int reg_val ;
                    2610   ; char c, reg[3] ;
                    2611   ; reg[0] = tolower(_getch()) ;
000019E4  2F00      2612          move.l    D0,-(A7)
000019E6  4E95      2613          jsr       (A5)
000019E8  2200      2614          move.l    D0,D1
000019EA  201F      2615          move.l    (A7)+,D0
000019EC  2F01      2616          move.l    D1,-(A7)
000019EE  4EB9 0000 2617          jsr       _tolower
000019F2  2E78      
000019F4  584F      2618          addq.w    #4,A7
000019F6  1680      2619          move.b    D0,(A3)
                    2620   ; reg[1] = c = tolower(_getch()) ;
000019F8  2F00      2621          move.l    D0,-(A7)
000019FA  4E95      2622          jsr       (A5)
000019FC  2200      2623          move.l    D0,D1
000019FE  201F      2624          move.l    (A7)+,D0
00001A00  2F01      2625          move.l    D1,-(A7)
00001A02  4EB9 0000 2626          jsr       _tolower
00001A06  2E78      
00001A08  584F      2627          addq.w    #4,A7
00001A0A  1400      2628          move.b    D0,D2
00001A0C  1740 0001 2629          move.b    D0,1(A3)
                    2630   ; if(reg[0] == (char)('d'))  {    // change data register
00001A10  1013      2631          move.b    (A3),D0
00001A12  0C00 0064 2632          cmp.b     #100,D0
00001A16  6600 00AE 2633          bne       ChangeRegisters_1
                    2634   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001A1A  102B 0001 2635          move.b    1(A3),D0
00001A1E  0C00 0037 2636          cmp.b     #55,D0
00001A22  6E0A      2637          bgt.s     ChangeRegisters_5
00001A24  102B 0001 2638          move.b    1(A3),D0
00001A28  0C00 0030 2639          cmp.b     #48,D0
00001A2C  6C0E      2640          bge.s     ChangeRegisters_3
                    2641   ChangeRegisters_5:
                    2642   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001A2E  4879 0000 2643          pea       @m68kde~1_55.L
00001A32  3D70      
00001A34  4E92      2644          jsr       (A2)
00001A36  584F      2645          addq.w    #4,A7
                    2646   ; return ;
00001A38  6000 0244 2647          bra       ChangeRegisters_6
                    2648   ChangeRegisters_3:
                    2649   ; }
                    2650   ; else {
                    2651   ; printf("\r\nD%c = ", c) ;
00001A3C  4882      2652          ext.w     D2
00001A3E  48C2      2653          ext.l     D2
00001A40  2F02      2654          move.l    D2,-(A7)
00001A42  4879 0000 2655          pea       @m68kde~1_56.L
00001A46  3D9C      
00001A48  4E92      2656          jsr       (A2)
00001A4A  504F      2657          addq.w    #8,A7
                    2658   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A4C  42A7      2659          clr.l     -(A7)
00001A4E  4E94      2660          jsr       (A4)
00001A50  584F      2661          addq.w    #4,A7
00001A52  2600      2662          move.l    D0,D3
                    2663   ; }
                    2664   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2665   ; if(c == (char)('0'))
00001A54  0C02 0030 2666          cmp.b     #48,D2
00001A58  660A      2667          bne.s     ChangeRegisters_7
                    2668   ; d0 = reg_val ;
00001A5A  23C3 0B00 2669          move.l    D3,_d0.L
00001A5E  00E4      
00001A60  6000 0060 2670          bra       ChangeRegisters_20
                    2671   ChangeRegisters_7:
                    2672   ; else if(c == (char)('1'))
00001A64  0C02 0031 2673          cmp.b     #49,D2
00001A68  660A      2674          bne.s     ChangeRegisters_9
                    2675   ; d1 = reg_val ;
00001A6A  23C3 0B00 2676          move.l    D3,_d1.L
00001A6E  00E8      
00001A70  6000 0050 2677          bra       ChangeRegisters_20
                    2678   ChangeRegisters_9:
                    2679   ; else if(c == (char)('2'))
00001A74  0C02 0032 2680          cmp.b     #50,D2
00001A78  660A      2681          bne.s     ChangeRegisters_11
                    2682   ; d2 = reg_val ;
00001A7A  23C3 0B00 2683          move.l    D3,_d2.L
00001A7E  00EC      
00001A80  6000 0040 2684          bra       ChangeRegisters_20
                    2685   ChangeRegisters_11:
                    2686   ; else if(c == (char)('3'))
00001A84  0C02 0033 2687          cmp.b     #51,D2
00001A88  6608      2688          bne.s     ChangeRegisters_13
                    2689   ; d3 = reg_val ;
00001A8A  23C3 0B00 2690          move.l    D3,_d3.L
00001A8E  00F0      
00001A90  6030      2691          bra.s     ChangeRegisters_20
                    2692   ChangeRegisters_13:
                    2693   ; else if(c == (char)('4'))
00001A92  0C02 0034 2694          cmp.b     #52,D2
00001A96  6608      2695          bne.s     ChangeRegisters_15
                    2696   ; d4 = reg_val ;
00001A98  23C3 0B00 2697          move.l    D3,_d4.L
00001A9C  00F4      
00001A9E  6022      2698          bra.s     ChangeRegisters_20
                    2699   ChangeRegisters_15:
                    2700   ; else if(c == (char)('5'))
00001AA0  0C02 0035 2701          cmp.b     #53,D2
00001AA4  6608      2702          bne.s     ChangeRegisters_17
                    2703   ; d5 = reg_val ;
00001AA6  23C3 0B00 2704          move.l    D3,_d5.L
00001AAA  00F8      
00001AAC  6014      2705          bra.s     ChangeRegisters_20
                    2706   ChangeRegisters_17:
                    2707   ; else if(c == (char)('6'))
00001AAE  0C02 0036 2708          cmp.b     #54,D2
00001AB2  6608      2709          bne.s     ChangeRegisters_19
                    2710   ; d6 = reg_val ;
00001AB4  23C3 0B00 2711          move.l    D3,_d6.L
00001AB8  00FC      
00001ABA  6006      2712          bra.s     ChangeRegisters_20
                    2713   ChangeRegisters_19:
                    2714   ; else
                    2715   ; d7 = reg_val ;
00001ABC  23C3 0B00 2716          move.l    D3,_d7.L
00001AC0  0100      
                    2717   ChangeRegisters_20:
00001AC2  6000 01B6 2718          bra       ChangeRegisters_51
                    2719   ChangeRegisters_1:
                    2720   ; }
                    2721   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001AC6  1013      2722          move.b    (A3),D0
00001AC8  0C00 0061 2723          cmp.b     #97,D0
00001ACC  6600 00A6 2724          bne       ChangeRegisters_21
                    2725   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001AD0  0C02 0037 2726          cmp.b     #55,D2
00001AD4  6E06      2727          bgt.s     ChangeRegisters_25
00001AD6  0C02 0030 2728          cmp.b     #48,D2
00001ADA  6C0E      2729          bge.s     ChangeRegisters_23
                    2730   ChangeRegisters_25:
                    2731   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001ADC  4879 0000 2732          pea       @m68kde~1_57.L
00001AE0  3DA6      
00001AE2  4E92      2733          jsr       (A2)
00001AE4  584F      2734          addq.w    #4,A7
                    2735   ; return ;
00001AE6  6000 0196 2736          bra       ChangeRegisters_6
                    2737   ChangeRegisters_23:
                    2738   ; }
                    2739   ; else {
                    2740   ; printf("\r\nA%c = ", c) ;
00001AEA  4882      2741          ext.w     D2
00001AEC  48C2      2742          ext.l     D2
00001AEE  2F02      2743          move.l    D2,-(A7)
00001AF0  4879 0000 2744          pea       @m68kde~1_58.L
00001AF4  3DD4      
00001AF6  4E92      2745          jsr       (A2)
00001AF8  504F      2746          addq.w    #8,A7
                    2747   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AFA  42A7      2748          clr.l     -(A7)
00001AFC  4E94      2749          jsr       (A4)
00001AFE  584F      2750          addq.w    #4,A7
00001B00  2600      2751          move.l    D0,D3
                    2752   ; }
                    2753   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2754   ; if(c == (char)('0'))
00001B02  0C02 0030 2755          cmp.b     #48,D2
00001B06  660A      2756          bne.s     ChangeRegisters_26
                    2757   ; a0 = reg_val ;
00001B08  23C3 0B00 2758          move.l    D3,_a0.L
00001B0C  0104      
00001B0E  6000 0060 2759          bra       ChangeRegisters_39
                    2760   ChangeRegisters_26:
                    2761   ; else if(c == (char)('1'))
00001B12  0C02 0031 2762          cmp.b     #49,D2
00001B16  660A      2763          bne.s     ChangeRegisters_28
                    2764   ; a1 = reg_val ;
00001B18  23C3 0B00 2765          move.l    D3,_a1.L
00001B1C  0108      
00001B1E  6000 0050 2766          bra       ChangeRegisters_39
                    2767   ChangeRegisters_28:
                    2768   ; else if(c == (char)('2'))
00001B22  0C02 0032 2769          cmp.b     #50,D2
00001B26  660A      2770          bne.s     ChangeRegisters_30
                    2771   ; a2 = reg_val ;
00001B28  23C3 0B00 2772          move.l    D3,_a2.L
00001B2C  010C      
00001B2E  6000 0040 2773          bra       ChangeRegisters_39
                    2774   ChangeRegisters_30:
                    2775   ; else if(c == (char)('3'))
00001B32  0C02 0033 2776          cmp.b     #51,D2
00001B36  6608      2777          bne.s     ChangeRegisters_32
                    2778   ; a3 = reg_val ;
00001B38  23C3 0B00 2779          move.l    D3,_a3.L
00001B3C  0110      
00001B3E  6030      2780          bra.s     ChangeRegisters_39
                    2781   ChangeRegisters_32:
                    2782   ; else if(c == (char)('4'))
00001B40  0C02 0034 2783          cmp.b     #52,D2
00001B44  6608      2784          bne.s     ChangeRegisters_34
                    2785   ; a4 = reg_val ;
00001B46  23C3 0B00 2786          move.l    D3,_a4.L
00001B4A  0114      
00001B4C  6022      2787          bra.s     ChangeRegisters_39
                    2788   ChangeRegisters_34:
                    2789   ; else if(c == (char)('5'))
00001B4E  0C02 0035 2790          cmp.b     #53,D2
00001B52  6608      2791          bne.s     ChangeRegisters_36
                    2792   ; a5 = reg_val ;
00001B54  23C3 0B00 2793          move.l    D3,_a5.L
00001B58  0118      
00001B5A  6014      2794          bra.s     ChangeRegisters_39
                    2795   ChangeRegisters_36:
                    2796   ; else if(c == (char)('6'))
00001B5C  0C02 0036 2797          cmp.b     #54,D2
00001B60  6608      2798          bne.s     ChangeRegisters_38
                    2799   ; a6 = reg_val ;
00001B62  23C3 0B00 2800          move.l    D3,_a6.L
00001B66  011C      
00001B68  6006      2801          bra.s     ChangeRegisters_39
                    2802   ChangeRegisters_38:
                    2803   ; else
                    2804   ; USP = reg_val ;
00001B6A  23C3 0B00 2805          move.l    D3,_USP.L
00001B6E  0128      
                    2806   ChangeRegisters_39:
00001B70  6000 0108 2807          bra       ChangeRegisters_51
                    2808   ChangeRegisters_21:
                    2809   ; }
                    2810   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001B74  1013      2811          move.b    (A3),D0
00001B76  0C00 0075 2812          cmp.b     #117,D0
00001B7A  6600 004E 2813          bne       ChangeRegisters_40
00001B7E  0C02 0073 2814          cmp.b     #115,D2
00001B82  6600 0046 2815          bne       ChangeRegisters_40
                    2816   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001B86  2F00      2817          move.l    D0,-(A7)
00001B88  4E95      2818          jsr       (A5)
00001B8A  2200      2819          move.l    D0,D1
00001B8C  201F      2820          move.l    (A7)+,D0
00001B8E  2F01      2821          move.l    D1,-(A7)
00001B90  4EB9 0000 2822          jsr       _tolower
00001B94  2E78      
00001B96  584F      2823          addq.w    #4,A7
00001B98  0C80 0000 2824          cmp.l     #112,D0
00001B9C  0070      
00001B9E  6618      2825          bne.s     ChangeRegisters_42
                    2826   ; printf("\r\nUser SP = ") ;
00001BA0  4879 0000 2827          pea       @m68kde~1_59.L
00001BA4  3DDE      
00001BA6  4E92      2828          jsr       (A2)
00001BA8  584F      2829          addq.w    #4,A7
                    2830   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BAA  42A7      2831          clr.l     -(A7)
00001BAC  4E94      2832          jsr       (A4)
00001BAE  584F      2833          addq.w    #4,A7
00001BB0  23C0 0B00 2834          move.l    D0,_USP.L
00001BB4  0128      
00001BB6  600E      2835          bra.s     ChangeRegisters_43
                    2836   ChangeRegisters_42:
                    2837   ; }
                    2838   ; else {
                    2839   ; printf("\r\nIllegal Register....") ;
00001BB8  4879 0000 2840          pea       @m68kde~1_60.L
00001BBC  3DEC      
00001BBE  4E92      2841          jsr       (A2)
00001BC0  584F      2842          addq.w    #4,A7
                    2843   ; return ;
00001BC2  6000 00BA 2844          bra       ChangeRegisters_6
                    2845   ChangeRegisters_43:
00001BC6  6000 00B2 2846          bra       ChangeRegisters_51
                    2847   ChangeRegisters_40:
                    2848   ; }
                    2849   ; }
                    2850   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001BCA  1013      2851          move.b    (A3),D0
00001BCC  0C00 0073 2852          cmp.b     #115,D0
00001BD0  6600 004E 2853          bne       ChangeRegisters_44
00001BD4  0C02 0073 2854          cmp.b     #115,D2
00001BD8  6600 0046 2855          bne       ChangeRegisters_44
                    2856   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001BDC  2F00      2857          move.l    D0,-(A7)
00001BDE  4E95      2858          jsr       (A5)
00001BE0  2200      2859          move.l    D0,D1
00001BE2  201F      2860          move.l    (A7)+,D0
00001BE4  2F01      2861          move.l    D1,-(A7)
00001BE6  4EB9 0000 2862          jsr       _tolower
00001BEA  2E78      
00001BEC  584F      2863          addq.w    #4,A7
00001BEE  0C80 0000 2864          cmp.l     #112,D0
00001BF2  0070      
00001BF4  6618      2865          bne.s     ChangeRegisters_46
                    2866   ; printf("\r\nSystem SP = ") ;
00001BF6  4879 0000 2867          pea       @m68kde~1_61.L
00001BFA  3E04      
00001BFC  4E92      2868          jsr       (A2)
00001BFE  584F      2869          addq.w    #4,A7
                    2870   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C00  42A7      2871          clr.l     -(A7)
00001C02  4E94      2872          jsr       (A4)
00001C04  584F      2873          addq.w    #4,A7
00001C06  23C0 0B00 2874          move.l    D0,_SSP.L
00001C0A  0124      
00001C0C  600E      2875          bra.s     ChangeRegisters_47
                    2876   ChangeRegisters_46:
                    2877   ; }
                    2878   ; else {
                    2879   ; printf("\r\nIllegal Register....") ;
00001C0E  4879 0000 2880          pea       @m68kde~1_60.L
00001C12  3DEC      
00001C14  4E92      2881          jsr       (A2)
00001C16  584F      2882          addq.w    #4,A7
                    2883   ; return ;
00001C18  6000 0064 2884          bra       ChangeRegisters_6
                    2885   ChangeRegisters_47:
00001C1C  6000 005C 2886          bra       ChangeRegisters_51
                    2887   ChangeRegisters_44:
                    2888   ; }
                    2889   ; }
                    2890   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001C20  1013      2891          move.b    (A3),D0
00001C22  0C00 0070 2892          cmp.b     #112,D0
00001C26  6620      2893          bne.s     ChangeRegisters_48
00001C28  0C02 0063 2894          cmp.b     #99,D2
00001C2C  661A      2895          bne.s     ChangeRegisters_48
                    2896   ; printf("\r\nPC = ") ;
00001C2E  4879 0000 2897          pea       @m68kde~1_62.L
00001C32  3E14      
00001C34  4E92      2898          jsr       (A2)
00001C36  584F      2899          addq.w    #4,A7
                    2900   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C38  42A7      2901          clr.l     -(A7)
00001C3A  4E94      2902          jsr       (A4)
00001C3C  584F      2903          addq.w    #4,A7
00001C3E  23C0 0B00 2904          move.l    D0,_PC.L
00001C42  0120      
00001C44  6000 0034 2905          bra       ChangeRegisters_51
                    2906   ChangeRegisters_48:
                    2907   ; }
                    2908   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001C48  1013      2909          move.b    (A3),D0
00001C4A  0C00 0073 2910          cmp.b     #115,D0
00001C4E  6620      2911          bne.s     ChangeRegisters_50
00001C50  0C02 0072 2912          cmp.b     #114,D2
00001C54  661A      2913          bne.s     ChangeRegisters_50
                    2914   ; printf("\r\nSR = ") ;
00001C56  4879 0000 2915          pea       @m68kde~1_63.L
00001C5A  3E1C      
00001C5C  4E92      2916          jsr       (A2)
00001C5E  584F      2917          addq.w    #4,A7
                    2918   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001C60  42A7      2919          clr.l     -(A7)
00001C62  4EB8 0C58 2920          jsr       _Get4HexDigits
00001C66  584F      2921          addq.w    #4,A7
00001C68  33C0 0B00 2922          move.w    D0,_SR.L
00001C6C  012C      
00001C6E  600A      2923          bra.s     ChangeRegisters_51
                    2924   ChangeRegisters_50:
                    2925   ; }
                    2926   ; else
                    2927   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001C70  4879 0000 2928          pea       @m68kde~1_64.L
00001C74  3E24      
00001C76  4E92      2929          jsr       (A2)
00001C78  584F      2930          addq.w    #4,A7
                    2931   ChangeRegisters_51:
                    2932   ; DumpRegisters() ;
00001C7A  4EB8 14D8 2933          jsr       _DumpRegisters
                    2934   ChangeRegisters_6:
00001C7E  4CDF 3C0C 2935          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C82  4E5E      2936          unlk      A6
00001C84  4E75      2937          rts
                    2938   ; }
                    2939   ; void BreakPointDisplay(void)
                    2940   ; {
                    2941   _BreakPointDisplay:
00001C86  48E7 3030 2942          movem.l   D2/D3/A2/A3,-(A7)
00001C8A  45F9 0000 2943          lea       _printf.L,A2
00001C8E  2F1A      
00001C90  47F9 0B00 2944          lea       _BreakPointAddress.L,A3
00001C94  012E      
                    2945   ; int i, BreakPointsSet = 0 ;
00001C96  4283      2946          clr.l     D3
                    2947   ; // any break points  set
                    2948   ; for(i = 0; i < 8; i++)  {
00001C98  4282      2949          clr.l     D2
                    2950   BreakPointDisplay_1:
00001C9A  0C82 0000 2951          cmp.l     #8,D2
00001C9E  0008      
00001CA0  6C1C      2952          bge.s     BreakPointDisplay_3
                    2953   ; if(BreakPointSetOrCleared[i] == 1)
00001CA2  2002      2954          move.l    D2,D0
00001CA4  E588      2955          lsl.l     #2,D0
00001CA6  41F9 0B00 2956          lea       _BreakPointSetOrCleared.L,A0
00001CAA  015E      
00001CAC  2030 0800 2957          move.l    0(A0,D0.L),D0
00001CB0  0C80 0000 2958          cmp.l     #1,D0
00001CB4  0001      
00001CB6  6602      2959          bne.s     BreakPointDisplay_4
                    2960   ; BreakPointsSet = 1;
00001CB8  7601      2961          moveq     #1,D3
                    2962   BreakPointDisplay_4:
00001CBA  5282      2963          addq.l    #1,D2
00001CBC  60DC      2964          bra       BreakPointDisplay_1
                    2965   BreakPointDisplay_3:
                    2966   ; }
                    2967   ; if(BreakPointsSet == 1) {
00001CBE  0C83 0000 2968          cmp.l     #1,D3
00001CC2  0001      
00001CC4  6616      2969          bne.s     BreakPointDisplay_6
                    2970   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001CC6  4879 0000 2971          pea       @m68kde~1_65.L
00001CCA  3E60      
00001CCC  4E92      2972          jsr       (A2)
00001CCE  584F      2973          addq.w    #4,A7
                    2974   ; printf("\r\n---     ---------    -----------") ;
00001CD0  4879 0000 2975          pea       @m68kde~1_66.L
00001CD4  3E86      
00001CD6  4E92      2976          jsr       (A2)
00001CD8  584F      2977          addq.w    #4,A7
00001CDA  600A      2978          bra.s     BreakPointDisplay_7
                    2979   BreakPointDisplay_6:
                    2980   ; }
                    2981   ; else
                    2982   ; printf("\r\nNo BreakPoints Set") ;
00001CDC  4879 0000 2983          pea       @m68kde~1_67.L
00001CE0  3EAA      
00001CE2  4E92      2984          jsr       (A2)
00001CE4  584F      2985          addq.w    #4,A7
                    2986   BreakPointDisplay_7:
                    2987   ; for(i = 0; i < 8; i++)  {
00001CE6  4282      2988          clr.l     D2
                    2989   BreakPointDisplay_8:
00001CE8  0C82 0000 2990          cmp.l     #8,D2
00001CEC  0008      
00001CEE  6C00 005A 2991          bge       BreakPointDisplay_10
                    2992   ; // put opcode back, then put break point back
                    2993   ; if(BreakPointSetOrCleared[i] == 1)  {
00001CF2  2002      2994          move.l    D2,D0
00001CF4  E588      2995          lsl.l     #2,D0
00001CF6  41F9 0B00 2996          lea       _BreakPointSetOrCleared.L,A0
00001CFA  015E      
00001CFC  2030 0800 2997          move.l    0(A0,D0.L),D0
00001D00  0C80 0000 2998          cmp.l     #1,D0
00001D04  0001      
00001D06  6600 003E 2999          bne       BreakPointDisplay_11
                    3000   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001D0A  2002      3001          move.l    D2,D0
00001D0C  E388      3002          lsl.l     #1,D0
00001D0E  41F9 0B00 3003          lea       _BreakPointInstruction.L,A0
00001D12  014E      
00001D14  2202      3004          move.l    D2,D1
00001D16  E589      3005          lsl.l     #2,D1
00001D18  2233 1800 3006          move.l    0(A3,D1.L),D1
00001D1C  2241      3007          move.l    D1,A1
00001D1E  32B0 0800 3008          move.w    0(A0,D0.L),(A1)
                    3009   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001D22  2002      3010          move.l    D2,D0
00001D24  E588      3011          lsl.l     #2,D0
00001D26  2033 0800 3012          move.l    0(A3,D0.L),D0
00001D2A  2040      3013          move.l    D0,A0
00001D2C  30BC 4E4E 3014          move.w    #20046,(A0)
                    3015   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001D30  2202      3016          move.l    D2,D1
00001D32  E589      3017          lsl.l     #2,D1
00001D34  2F33 1800 3018          move.l    0(A3,D1.L),-(A7)
00001D38  2F02      3019          move.l    D2,-(A7)
00001D3A  4879 0000 3020          pea       @m68kde~1_68.L
00001D3E  3EC0      
00001D40  4E92      3021          jsr       (A2)
00001D42  DEFC 000C 3022          add.w     #12,A7
                    3023   BreakPointDisplay_11:
00001D46  5282      3024          addq.l    #1,D2
00001D48  609E      3025          bra       BreakPointDisplay_8
                    3026   BreakPointDisplay_10:
                    3027   ; }
                    3028   ; }
                    3029   ; printf("\r\n") ;
00001D4A  4879 0000 3030          pea       @m68kde~1_1.L
00001D4E  386A      
00001D50  4E92      3031          jsr       (A2)
00001D52  584F      3032          addq.w    #4,A7
00001D54  4CDF 0C0C 3033          movem.l   (A7)+,D2/D3/A2/A3
00001D58  4E75      3034          rts
                    3035   ; }
                    3036   ; void WatchPointDisplay(void)
                    3037   ; {
                    3038   _WatchPointDisplay:
00001D5A  48E7 3020 3039          movem.l   D2/D3/A2,-(A7)
00001D5E  45F9 0000 3040          lea       _printf.L,A2
00001D62  2F1A      
                    3041   ; int i ;
                    3042   ; int WatchPointsSet = 0 ;
00001D64  4283      3043          clr.l     D3
                    3044   ; // any watchpoints set
                    3045   ; for(i = 0; i < 8; i++)  {
00001D66  4282      3046          clr.l     D2
                    3047   WatchPointDisplay_1:
00001D68  0C82 0000 3048          cmp.l     #8,D2
00001D6C  0008      
00001D6E  6C1C      3049          bge.s     WatchPointDisplay_3
                    3050   ; if(WatchPointSetOrCleared[i] == 1)
00001D70  2002      3051          move.l    D2,D0
00001D72  E588      3052          lsl.l     #2,D0
00001D74  41F9 0B00 3053          lea       _WatchPointSetOrCleared.L,A0
00001D78  01A2      
00001D7A  2030 0800 3054          move.l    0(A0,D0.L),D0
00001D7E  0C80 0000 3055          cmp.l     #1,D0
00001D82  0001      
00001D84  6602      3056          bne.s     WatchPointDisplay_4
                    3057   ; WatchPointsSet = 1;
00001D86  7601      3058          moveq     #1,D3
                    3059   WatchPointDisplay_4:
00001D88  5282      3060          addq.l    #1,D2
00001D8A  60DC      3061          bra       WatchPointDisplay_1
                    3062   WatchPointDisplay_3:
                    3063   ; }
                    3064   ; if(WatchPointsSet == 1) {
00001D8C  0C83 0000 3065          cmp.l     #1,D3
00001D90  0001      
00001D92  6616      3066          bne.s     WatchPointDisplay_6
                    3067   ; printf("\r\nNum     Address") ;
00001D94  4879 0000 3068          pea       @m68kde~1_69.L
00001D98  3ED0      
00001D9A  4E92      3069          jsr       (A2)
00001D9C  584F      3070          addq.w    #4,A7
                    3071   ; printf("\r\n---     ---------") ;
00001D9E  4879 0000 3072          pea       @m68kde~1_70.L
00001DA2  3EE2      
00001DA4  4E92      3073          jsr       (A2)
00001DA6  584F      3074          addq.w    #4,A7
00001DA8  600A      3075          bra.s     WatchPointDisplay_7
                    3076   WatchPointDisplay_6:
                    3077   ; }
                    3078   ; else
                    3079   ; printf("\r\nNo WatchPoints Set") ;
00001DAA  4879 0000 3080          pea       @m68kde~1_71.L
00001DAE  3EF6      
00001DB0  4E92      3081          jsr       (A2)
00001DB2  584F      3082          addq.w    #4,A7
                    3083   WatchPointDisplay_7:
                    3084   ; for(i = 0; i < 8; i++)  {
00001DB4  4282      3085          clr.l     D2
                    3086   WatchPointDisplay_8:
00001DB6  0C82 0000 3087          cmp.l     #8,D2
00001DBA  0008      
00001DBC  6C00 0038 3088          bge       WatchPointDisplay_10
                    3089   ; if(WatchPointSetOrCleared[i] == 1)
00001DC0  2002      3090          move.l    D2,D0
00001DC2  E588      3091          lsl.l     #2,D0
00001DC4  41F9 0B00 3092          lea       _WatchPointSetOrCleared.L,A0
00001DC8  01A2      
00001DCA  2030 0800 3093          move.l    0(A0,D0.L),D0
00001DCE  0C80 0000 3094          cmp.l     #1,D0
00001DD2  0001      
00001DD4  661C      3095          bne.s     WatchPointDisplay_11
                    3096   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001DD6  2202      3097          move.l    D2,D1
00001DD8  E589      3098          lsl.l     #2,D1
00001DDA  41F9 0B00 3099          lea       _WatchPointAddress.L,A0
00001DDE  0182      
00001DE0  2F30 1800 3100          move.l    0(A0,D1.L),-(A7)
00001DE4  2F02      3101          move.l    D2,-(A7)
00001DE6  4879 0000 3102          pea       @m68kde~1_68.L
00001DEA  3EC0      
00001DEC  4E92      3103          jsr       (A2)
00001DEE  DEFC 000C 3104          add.w     #12,A7
                    3105   WatchPointDisplay_11:
00001DF2  5282      3106          addq.l    #1,D2
00001DF4  60C0      3107          bra       WatchPointDisplay_8
                    3108   WatchPointDisplay_10:
                    3109   ; }
                    3110   ; printf("\r\n") ;
00001DF6  4879 0000 3111          pea       @m68kde~1_1.L
00001DFA  386A      
00001DFC  4E92      3112          jsr       (A2)
00001DFE  584F      3113          addq.w    #4,A7
00001E00  4CDF 040C 3114          movem.l   (A7)+,D2/D3/A2
00001E04  4E75      3115          rts
                    3116   ; }
                    3117   ; void BreakPointClear(void)
                    3118   ; {
                    3119   _BreakPointClear:
00001E06  4E56 FFFC 3120          link      A6,#-4
00001E0A  48E7 2020 3121          movem.l   D2/A2,-(A7)
00001E0E  45F9 0000 3122          lea       _printf.L,A2
00001E12  2F1A      
                    3123   ; unsigned int i ;
                    3124   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3125   ; BreakPointDisplay() ;
00001E14  4EB8 1C86 3126          jsr       _BreakPointDisplay
                    3127   ; printf("\r\nEnter Break Point Number: ") ;
00001E18  4879 0000 3128          pea       @m68kde~1_72.L
00001E1C  3F0C      
00001E1E  4E92      3129          jsr       (A2)
00001E20  584F      3130          addq.w    #4,A7
                    3131   ; i = xtod(_getch()) ;           // get break pointer number
00001E22  2F00      3132          move.l    D0,-(A7)
00001E24  4EB8 0B68 3133          jsr       __getch
00001E28  2200      3134          move.l    D0,D1
00001E2A  201F      3135          move.l    (A7)+,D0
00001E2C  2F01      3136          move.l    D1,-(A7)
00001E2E  4EB8 0BD2 3137          jsr       _xtod
00001E32  584F      3138          addq.w    #4,A7
00001E34  C0BC 0000 3139          and.l     #255,D0
00001E38  00FF      
00001E3A  2400      3140          move.l    D0,D2
                    3141   ; if((i < 0) || (i > 7))   {
00001E3C  0C82 0000 3142          cmp.l     #0,D2
00001E40  0000      
00001E42  6508      3143          blo.s     BreakPointClear_3
00001E44  0C82 0000 3144          cmp.l     #7,D2
00001E48  0007      
00001E4A  630E      3145          bls.s     BreakPointClear_1
                    3146   BreakPointClear_3:
                    3147   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E4C  4879 0000 3148          pea       @m68kde~1_73.L
00001E50  3F2A      
00001E52  4E92      3149          jsr       (A2)
00001E54  584F      3150          addq.w    #4,A7
                    3151   ; return ;
00001E56  6000 0080 3152          bra       BreakPointClear_4
                    3153   BreakPointClear_1:
                    3154   ; }
                    3155   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001E5A  2002      3156          move.l    D2,D0
00001E5C  E588      3157          lsl.l     #2,D0
00001E5E  41F9 0B00 3158          lea       _BreakPointSetOrCleared.L,A0
00001E62  015E      
00001E64  2030 0800 3159          move.l    0(A0,D0.L),D0
00001E68  0C80 0000 3160          cmp.l     #1,D0
00001E6C  0001      
00001E6E  6600 005A 3161          bne       BreakPointClear_5
                    3162   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001E72  2002      3163          move.l    D2,D0
00001E74  E588      3164          lsl.l     #2,D0
00001E76  41F9 0B00 3165          lea       _BreakPointAddress.L,A0
00001E7A  012E      
00001E7C  2D70 0800 3166          move.l    0(A0,D0.L),-4(A6)
00001E80  FFFC      
                    3167   ; BreakPointAddress[i] = 0 ;
00001E82  2002      3168          move.l    D2,D0
00001E84  E588      3169          lsl.l     #2,D0
00001E86  41F9 0B00 3170          lea       _BreakPointAddress.L,A0
00001E8A  012E      
00001E8C  42B0 0800 3171          clr.l     0(A0,D0.L)
                    3172   ; BreakPointSetOrCleared[i] = 0 ;
00001E90  2002      3173          move.l    D2,D0
00001E92  E588      3174          lsl.l     #2,D0
00001E94  41F9 0B00 3175          lea       _BreakPointSetOrCleared.L,A0
00001E98  015E      
00001E9A  42B0 0800 3176          clr.l     0(A0,D0.L)
                    3177   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001E9E  2002      3178          move.l    D2,D0
00001EA0  E388      3179          lsl.l     #1,D0
00001EA2  41F9 0B00 3180          lea       _BreakPointInstruction.L,A0
00001EA6  014E      
00001EA8  226E FFFC 3181          move.l    -4(A6),A1
00001EAC  32B0 0800 3182          move.w    0(A0,D0.L),(A1)
                    3183   ; BreakPointInstruction[i] = 0 ;
00001EB0  2002      3184          move.l    D2,D0
00001EB2  E388      3185          lsl.l     #1,D0
00001EB4  41F9 0B00 3186          lea       _BreakPointInstruction.L,A0
00001EB8  014E      
00001EBA  4270 0800 3187          clr.w     0(A0,D0.L)
                    3188   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001EBE  4879 0000 3189          pea       @m68kde~1_74.L
00001EC2  3F46      
00001EC4  4E92      3190          jsr       (A2)
00001EC6  584F      3191          addq.w    #4,A7
00001EC8  600A      3192          bra.s     BreakPointClear_6
                    3193   BreakPointClear_5:
                    3194   ; }
                    3195   ; else
                    3196   ; printf("\r\nBreak Point wasn't Set.....") ;
00001ECA  4879 0000 3197          pea       @m68kde~1_75.L
00001ECE  3F64      
00001ED0  4E92      3198          jsr       (A2)
00001ED2  584F      3199          addq.w    #4,A7
                    3200   BreakPointClear_6:
                    3201   ; BreakPointDisplay() ;
00001ED4  4EB8 1C86 3202          jsr       _BreakPointDisplay
                    3203   ; return ;
                    3204   BreakPointClear_4:
00001ED8  4CDF 0404 3205          movem.l   (A7)+,D2/A2
00001EDC  4E5E      3206          unlk      A6
00001EDE  4E75      3207          rts
                    3208   ; }
                    3209   ; void WatchPointClear(void)
                    3210   ; {
                    3211   _WatchPointClear:
00001EE0  48E7 2020 3212          movem.l   D2/A2,-(A7)
00001EE4  45F9 0000 3213          lea       _printf.L,A2
00001EE8  2F1A      
                    3214   ; unsigned int i ;
                    3215   ; WatchPointDisplay() ;
00001EEA  4EB8 1D5A 3216          jsr       _WatchPointDisplay
                    3217   ; printf("\r\nEnter Watch Point Number: ") ;
00001EEE  4879 0000 3218          pea       @m68kde~1_76.L
00001EF2  3F82      
00001EF4  4E92      3219          jsr       (A2)
00001EF6  584F      3220          addq.w    #4,A7
                    3221   ; i = xtod(_getch()) ;           // get watch pointer number
00001EF8  2F00      3222          move.l    D0,-(A7)
00001EFA  4EB8 0B68 3223          jsr       __getch
00001EFE  2200      3224          move.l    D0,D1
00001F00  201F      3225          move.l    (A7)+,D0
00001F02  2F01      3226          move.l    D1,-(A7)
00001F04  4EB8 0BD2 3227          jsr       _xtod
00001F08  584F      3228          addq.w    #4,A7
00001F0A  C0BC 0000 3229          and.l     #255,D0
00001F0E  00FF      
00001F10  2400      3230          move.l    D0,D2
                    3231   ; if((i < 0) || (i > 7))   {
00001F12  0C82 0000 3232          cmp.l     #0,D2
00001F16  0000      
00001F18  6508      3233          blo.s     WatchPointClear_3
00001F1A  0C82 0000 3234          cmp.l     #7,D2
00001F1E  0007      
00001F20  630E      3235          bls.s     WatchPointClear_1
                    3236   WatchPointClear_3:
                    3237   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F22  4879 0000 3238          pea       @m68kde~1_73.L
00001F26  3F2A      
00001F28  4E92      3239          jsr       (A2)
00001F2A  584F      3240          addq.w    #4,A7
                    3241   ; return ;
00001F2C  6000 004E 3242          bra       WatchPointClear_4
                    3243   WatchPointClear_1:
                    3244   ; }
                    3245   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001F30  2002      3246          move.l    D2,D0
00001F32  E588      3247          lsl.l     #2,D0
00001F34  41F9 0B00 3248          lea       _WatchPointSetOrCleared.L,A0
00001F38  01A2      
00001F3A  2030 0800 3249          move.l    0(A0,D0.L),D0
00001F3E  0C80 0000 3250          cmp.l     #1,D0
00001F42  0001      
00001F44  6628      3251          bne.s     WatchPointClear_5
                    3252   ; WatchPointAddress[i] = 0 ;
00001F46  2002      3253          move.l    D2,D0
00001F48  E588      3254          lsl.l     #2,D0
00001F4A  41F9 0B00 3255          lea       _WatchPointAddress.L,A0
00001F4E  0182      
00001F50  42B0 0800 3256          clr.l     0(A0,D0.L)
                    3257   ; WatchPointSetOrCleared[i] = 0 ;
00001F54  2002      3258          move.l    D2,D0
00001F56  E588      3259          lsl.l     #2,D0
00001F58  41F9 0B00 3260          lea       _WatchPointSetOrCleared.L,A0
00001F5C  01A2      
00001F5E  42B0 0800 3261          clr.l     0(A0,D0.L)
                    3262   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001F62  4879 0000 3263          pea       @m68kde~1_77.L
00001F66  3FA0      
00001F68  4E92      3264          jsr       (A2)
00001F6A  584F      3265          addq.w    #4,A7
00001F6C  600A      3266          bra.s     WatchPointClear_6
                    3267   WatchPointClear_5:
                    3268   ; }
                    3269   ; else
                    3270   ; printf("\r\nWatch Point Was not Set.....") ;
00001F6E  4879 0000 3271          pea       @m68kde~1_78.L
00001F72  3FBE      
00001F74  4E92      3272          jsr       (A2)
00001F76  584F      3273          addq.w    #4,A7
                    3274   WatchPointClear_6:
                    3275   ; WatchPointDisplay() ;
00001F78  4EB8 1D5A 3276          jsr       _WatchPointDisplay
                    3277   ; return ;
                    3278   WatchPointClear_4:
00001F7C  4CDF 0404 3279          movem.l   (A7)+,D2/A2
00001F80  4E75      3280          rts
                    3281   ; }
                    3282   ; void DisableBreakPoints(void)
                    3283   ; {
                    3284   _DisableBreakPoints:
00001F82  4E56 FFFC 3285          link      A6,#-4
00001F86  2F02      3286          move.l    D2,-(A7)
                    3287   ; int i ;
                    3288   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3289   ; for(i = 0; i < 8; i++)  {
00001F88  4282      3290          clr.l     D2
                    3291   DisableBreakPoints_1:
00001F8A  0C82 0000 3292          cmp.l     #8,D2
00001F8E  0008      
00001F90  6C00 003E 3293          bge       DisableBreakPoints_3
                    3294   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001F94  2002      3295          move.l    D2,D0
00001F96  E588      3296          lsl.l     #2,D0
00001F98  41F9 0B00 3297          lea       _BreakPointSetOrCleared.L,A0
00001F9C  015E      
00001F9E  2030 0800 3298          move.l    0(A0,D0.L),D0
00001FA2  0C80 0000 3299          cmp.l     #1,D0
00001FA6  0001      
00001FA8  6622      3300          bne.s     DisableBreakPoints_4
                    3301   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FAA  2002      3302          move.l    D2,D0
00001FAC  E588      3303          lsl.l     #2,D0
00001FAE  41F9 0B00 3304          lea       _BreakPointAddress.L,A0
00001FB2  012E      
00001FB4  2D70 0800 3305          move.l    0(A0,D0.L),-4(A6)
00001FB8  FFFC      
                    3306   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001FBA  2002      3307          move.l    D2,D0
00001FBC  E388      3308          lsl.l     #1,D0
00001FBE  41F9 0B00 3309          lea       _BreakPointInstruction.L,A0
00001FC2  014E      
00001FC4  226E FFFC 3310          move.l    -4(A6),A1
00001FC8  32B0 0800 3311          move.w    0(A0,D0.L),(A1)
                    3312   DisableBreakPoints_4:
00001FCC  5282      3313          addq.l    #1,D2
00001FCE  60BA      3314          bra       DisableBreakPoints_1
                    3315   DisableBreakPoints_3:
00001FD0  241F      3316          move.l    (A7)+,D2
00001FD2  4E5E      3317          unlk      A6
00001FD4  4E75      3318          rts
                    3319   ; }
                    3320   ; }
                    3321   ; }
                    3322   ; void EnableBreakPoints(void)
                    3323   ; {
                    3324   _EnableBreakPoints:
00001FD6  4E56 FFFC 3325          link      A6,#-4
00001FDA  2F02      3326          move.l    D2,-(A7)
                    3327   ; int i ;
                    3328   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3329   ; for(i = 0; i < 8; i++)  {
00001FDC  4282      3330          clr.l     D2
                    3331   EnableBreakPoints_1:
00001FDE  0C82 0000 3332          cmp.l     #8,D2
00001FE2  0008      
00001FE4  6C32      3333          bge.s     EnableBreakPoints_3
                    3334   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001FE6  2002      3335          move.l    D2,D0
00001FE8  E588      3336          lsl.l     #2,D0
00001FEA  41F9 0B00 3337          lea       _BreakPointSetOrCleared.L,A0
00001FEE  015E      
00001FF0  2030 0800 3338          move.l    0(A0,D0.L),D0
00001FF4  0C80 0000 3339          cmp.l     #1,D0
00001FF8  0001      
00001FFA  6618      3340          bne.s     EnableBreakPoints_4
                    3341   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FFC  2002      3342          move.l    D2,D0
00001FFE  E588      3343          lsl.l     #2,D0
00002000  41F9 0B00 3344          lea       _BreakPointAddress.L,A0
00002004  012E      
00002006  2D70 0800 3345          move.l    0(A0,D0.L),-4(A6)
0000200A  FFFC      
                    3346   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
0000200C  206E FFFC 3347          move.l    -4(A6),A0
00002010  30BC 4E4E 3348          move.w    #20046,(A0)
                    3349   EnableBreakPoints_4:
00002014  5282      3350          addq.l    #1,D2
00002016  60C6      3351          bra       EnableBreakPoints_1
                    3352   EnableBreakPoints_3:
00002018  241F      3353          move.l    (A7)+,D2
0000201A  4E5E      3354          unlk      A6
0000201C  4E75      3355          rts
                    3356   ; }
                    3357   ; }
                    3358   ; }
                    3359   ; void KillAllBreakPoints(void)
                    3360   ; {
                    3361   _KillAllBreakPoints:
0000201E  4E56 FFFC 3362          link      A6,#-4
00002022  2F02      3363          move.l    D2,-(A7)
                    3364   ; int i ;
                    3365   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3366   ; for(i = 0; i < 8; i++)  {
00002024  4282      3367          clr.l     D2
                    3368   KillAllBreakPoints_1:
00002026  0C82 0000 3369          cmp.l     #8,D2
0000202A  0008      
0000202C  6C00 0052 3370          bge       KillAllBreakPoints_3
                    3371   ; // clear BP
                    3372   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002030  2002      3373          move.l    D2,D0
00002032  E588      3374          lsl.l     #2,D0
00002034  41F9 0B00 3375          lea       _BreakPointAddress.L,A0
00002038  012E      
0000203A  2D70 0800 3376          move.l    0(A0,D0.L),-4(A6)
0000203E  FFFC      
                    3377   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002040  2002      3378          move.l    D2,D0
00002042  E388      3379          lsl.l     #1,D0
00002044  41F9 0B00 3380          lea       _BreakPointInstruction.L,A0
00002048  014E      
0000204A  226E FFFC 3381          move.l    -4(A6),A1
0000204E  32B0 0800 3382          move.w    0(A0,D0.L),(A1)
                    3383   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002052  2002      3384          move.l    D2,D0
00002054  E588      3385          lsl.l     #2,D0
00002056  41F9 0B00 3386          lea       _BreakPointAddress.L,A0
0000205A  012E      
0000205C  42B0 0800 3387          clr.l     0(A0,D0.L)
                    3388   ; BreakPointInstruction[i] = 0 ;
00002060  2002      3389          move.l    D2,D0
00002062  E388      3390          lsl.l     #1,D0
00002064  41F9 0B00 3391          lea       _BreakPointInstruction.L,A0
00002068  014E      
0000206A  4270 0800 3392          clr.w     0(A0,D0.L)
                    3393   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
0000206E  2002      3394          move.l    D2,D0
00002070  E588      3395          lsl.l     #2,D0
00002072  41F9 0B00 3396          lea       _BreakPointSetOrCleared.L,A0
00002076  015E      
00002078  42B0 0800 3397          clr.l     0(A0,D0.L)
0000207C  5282      3398          addq.l    #1,D2
0000207E  60A6      3399          bra       KillAllBreakPoints_1
                    3400   KillAllBreakPoints_3:
00002080  241F      3401          move.l    (A7)+,D2
00002082  4E5E      3402          unlk      A6
00002084  4E75      3403          rts
                    3404   ; }
                    3405   ; //BreakPointDisplay() ;       // display the break points
                    3406   ; }
                    3407   ; void KillAllWatchPoints(void)
                    3408   ; {
                    3409   _KillAllWatchPoints:
00002086  2F02      3410          move.l    D2,-(A7)
                    3411   ; int i ;
                    3412   ; for(i = 0; i < 8; i++)  {
00002088  4282      3413          clr.l     D2
                    3414   KillAllWatchPoints_1:
0000208A  0C82 0000 3415          cmp.l     #8,D2
0000208E  0008      
00002090  6C20      3416          bge.s     KillAllWatchPoints_3
                    3417   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002092  2002      3418          move.l    D2,D0
00002094  E588      3419          lsl.l     #2,D0
00002096  41F9 0B00 3420          lea       _WatchPointAddress.L,A0
0000209A  0182      
0000209C  42B0 0800 3421          clr.l     0(A0,D0.L)
                    3422   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000020A0  2002      3423          move.l    D2,D0
000020A2  E588      3424          lsl.l     #2,D0
000020A4  41F9 0B00 3425          lea       _WatchPointSetOrCleared.L,A0
000020A8  01A2      
000020AA  42B0 0800 3426          clr.l     0(A0,D0.L)
000020AE  5282      3427          addq.l    #1,D2
000020B0  60D8      3428          bra       KillAllWatchPoints_1
                    3429   KillAllWatchPoints_3:
000020B2  241F      3430          move.l    (A7)+,D2
000020B4  4E75      3431          rts
                    3432   ; }
                    3433   ; //WatchPointDisplay() ;       // display the break points
                    3434   ; }
                    3435   ; void SetBreakPoint(void)
                    3436   ; {
                    3437   _SetBreakPoint:
000020B6  4E56 FFFC 3438          link      A6,#-4
000020BA  48E7 3830 3439          movem.l   D2/D3/D4/A2/A3,-(A7)
000020BE  45F9 0000 3440          lea       _printf.L,A2
000020C2  2F1A      
000020C4  47F9 0B00 3441          lea       _BreakPointSetOrCleared.L,A3
000020C8  015E      
                    3442   ; int i ;
                    3443   ; int BPNumber;
                    3444   ; int BPAddress;
                    3445   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3446   ; // see if any free break points
                    3447   ; for(i = 0; i < 8; i ++) {
000020CA  4282      3448          clr.l     D2
                    3449   SetBreakPoint_1:
000020CC  0C82 0000 3450          cmp.l     #8,D2
000020D0  0008      
000020D2  6C10      3451          bge.s     SetBreakPoint_3
                    3452   ; if( BreakPointSetOrCleared[i] == 0)
000020D4  2002      3453          move.l    D2,D0
000020D6  E588      3454          lsl.l     #2,D0
000020D8  2033 0800 3455          move.l    0(A3,D0.L),D0
000020DC  6602      3456          bne.s     SetBreakPoint_4
                    3457   ; break ;         // if spare BP found allow user to set it
000020DE  6004      3458          bra.s     SetBreakPoint_3
                    3459   SetBreakPoint_4:
000020E0  5282      3460          addq.l    #1,D2
000020E2  60E8      3461          bra       SetBreakPoint_1
                    3462   SetBreakPoint_3:
                    3463   ; }
                    3464   ; if(i == 8) {
000020E4  0C82 0000 3465          cmp.l     #8,D2
000020E8  0008      
000020EA  660E      3466          bne.s     SetBreakPoint_6
                    3467   ; printf("\r\nNo FREE Break Points.....") ;
000020EC  4879 0000 3468          pea       @m68kde~1_79.L
000020F0  3FDE      
000020F2  4E92      3469          jsr       (A2)
000020F4  584F      3470          addq.w    #4,A7
                    3471   ; return ;
000020F6  6000 00D6 3472          bra       SetBreakPoint_15
                    3473   SetBreakPoint_6:
                    3474   ; }
                    3475   ; printf("\r\nBreak Point Address: ") ;
000020FA  4879 0000 3476          pea       @m68kde~1_80.L
000020FE  3FFA      
00002100  4E92      3477          jsr       (A2)
00002102  584F      3478          addq.w    #4,A7
                    3479   ; BPAddress = Get8HexDigits(0) ;
00002104  42A7      3480          clr.l     -(A7)
00002106  4EB8 0CA4 3481          jsr       _Get8HexDigits
0000210A  584F      3482          addq.w    #4,A7
0000210C  2600      3483          move.l    D0,D3
                    3484   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
0000210E  2803      3485          move.l    D3,D4
                    3486   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002110  2003      3487          move.l    D3,D0
00002112  C0BC 0000 3488          and.l     #1,D0
00002116  0001      
00002118  0C80 0000 3489          cmp.l     #1,D0
0000211C  0001      
0000211E  660E      3490          bne.s     SetBreakPoint_9
                    3491   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002120  4879 0000 3492          pea       @m68kde~1_81.L
00002124  4012      
00002126  4E92      3493          jsr       (A2)
00002128  584F      3494          addq.w    #4,A7
                    3495   ; return ;
0000212A  6000 00A2 3496          bra       SetBreakPoint_15
                    3497   SetBreakPoint_9:
                    3498   ; }
                    3499   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
0000212E  0C83 0000 3500          cmp.l     #32768,D3
00002132  8000      
00002134  640E      3501          bhs.s     SetBreakPoint_11
                    3502   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002136  4879 0000 3503          pea       @m68kde~1_82.L
0000213A  4048      
0000213C  4E92      3504          jsr       (A2)
0000213E  584F      3505          addq.w    #4,A7
                    3506   ; return ;
00002140  6000 008C 3507          bra       SetBreakPoint_15
                    3508   SetBreakPoint_11:
                    3509   ; }
                    3510   ; // search for first free bp or existing same BP
                    3511   ; for(i = 0; i < 8; i++)  {
00002144  4282      3512          clr.l     D2
                    3513   SetBreakPoint_13:
00002146  0C82 0000 3514          cmp.l     #8,D2
0000214A  0008      
0000214C  6C00 0080 3515          bge       SetBreakPoint_15
                    3516   ; if(BreakPointAddress[i] == BPAddress)   {
00002150  2002      3517          move.l    D2,D0
00002152  E588      3518          lsl.l     #2,D0
00002154  41F9 0B00 3519          lea       _BreakPointAddress.L,A0
00002158  012E      
0000215A  B6B0 0800 3520          cmp.l     0(A0,D0.L),D3
0000215E  6610      3521          bne.s     SetBreakPoint_16
                    3522   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002160  2F03      3523          move.l    D3,-(A7)
00002162  4879 0000 3524          pea       @m68kde~1_83.L
00002166  4090      
00002168  4E92      3525          jsr       (A2)
0000216A  504F      3526          addq.w    #8,A7
                    3527   ; return ;
0000216C  6000 0060 3528          bra       SetBreakPoint_15
                    3529   SetBreakPoint_16:
                    3530   ; }
                    3531   ; if(BreakPointSetOrCleared[i] == 0) {
00002170  2002      3532          move.l    D2,D0
00002172  E588      3533          lsl.l     #2,D0
00002174  2033 0800 3534          move.l    0(A3,D0.L),D0
00002178  6600 004E 3535          bne       SetBreakPoint_18
                    3536   ; // set BP here
                    3537   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000217C  2002      3538          move.l    D2,D0
0000217E  E588      3539          lsl.l     #2,D0
00002180  27BC 0000 3540          move.l    #1,0(A3,D0.L)
00002184  0001 0800 
                    3541   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002188  2044      3542          move.l    D4,A0
0000218A  2002      3543          move.l    D2,D0
0000218C  E388      3544          lsl.l     #1,D0
0000218E  43F9 0B00 3545          lea       _BreakPointInstruction.L,A1
00002192  014E      
00002194  3390 0800 3546          move.w    (A0),0(A1,D0.L)
                    3547   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00002198  2F04      3548          move.l    D4,-(A7)
0000219A  4879 0000 3549          pea       @m68kde~1_84.L
0000219E  40C8      
000021A0  4E92      3550          jsr       (A2)
000021A2  504F      3551          addq.w    #8,A7
                    3552   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000021A4  2044      3553          move.l    D4,A0
000021A6  30BC 4E4E 3554          move.w    #20046,(A0)
                    3555   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000021AA  2002      3556          move.l    D2,D0
000021AC  E588      3557          lsl.l     #2,D0
000021AE  41F9 0B00 3558          lea       _BreakPointAddress.L,A0
000021B2  012E      
000021B4  2183 0800 3559          move.l    D3,0(A0,D0.L)
                    3560   ; printf("\r\n") ;
000021B8  4879 0000 3561          pea       @m68kde~1_1.L
000021BC  386A      
000021BE  4E92      3562          jsr       (A2)
000021C0  584F      3563          addq.w    #4,A7
                    3564   ; BreakPointDisplay() ;       // display the break points
000021C2  4EB8 1C86 3565          jsr       _BreakPointDisplay
                    3566   ; return ;
000021C6  6006      3567          bra.s     SetBreakPoint_15
                    3568   SetBreakPoint_18:
000021C8  5282      3569          addq.l    #1,D2
000021CA  6000 FF7A 3570          bra       SetBreakPoint_13
                    3571   SetBreakPoint_15:
000021CE  4CDF 0C1C 3572          movem.l   (A7)+,D2/D3/D4/A2/A3
000021D2  4E5E      3573          unlk      A6
000021D4  4E75      3574          rts
                    3575   ; }
                    3576   ; }
                    3577   ; }
                    3578   ; void SetWatchPoint(void)
                    3579   ; {
                    3580   _SetWatchPoint:
000021D6  4E56 FFF8 3581          link      A6,#-8
000021DA  48E7 3030 3582          movem.l   D2/D3/A2/A3,-(A7)
000021DE  45F9 0000 3583          lea       _printf.L,A2
000021E2  2F1A      
000021E4  47F9 0B00 3584          lea       _WatchPointSetOrCleared.L,A3
000021E8  01A2      
                    3585   ; int i ;
                    3586   ; int WPNumber;
                    3587   ; int WPAddress;
                    3588   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3589   ; // see if any free break points
                    3590   ; for(i = 0; i < 8; i ++) {
000021EA  4282      3591          clr.l     D2
                    3592   SetWatchPoint_1:
000021EC  0C82 0000 3593          cmp.l     #8,D2
000021F0  0008      
000021F2  6C10      3594          bge.s     SetWatchPoint_3
                    3595   ; if( WatchPointSetOrCleared[i] == 0)
000021F4  2002      3596          move.l    D2,D0
000021F6  E588      3597          lsl.l     #2,D0
000021F8  2033 0800 3598          move.l    0(A3,D0.L),D0
000021FC  6602      3599          bne.s     SetWatchPoint_4
                    3600   ; break ;         // if spare WP found allow user to set it
000021FE  6004      3601          bra.s     SetWatchPoint_3
                    3602   SetWatchPoint_4:
00002200  5282      3603          addq.l    #1,D2
00002202  60E8      3604          bra       SetWatchPoint_1
                    3605   SetWatchPoint_3:
                    3606   ; }
                    3607   ; if(i == 8) {
00002204  0C82 0000 3608          cmp.l     #8,D2
00002208  0008      
0000220A  660E      3609          bne.s     SetWatchPoint_6
                    3610   ; printf("\r\nNo FREE Watch Points.....") ;
0000220C  4879 0000 3611          pea       @m68kde~1_85.L
00002210  40EE      
00002212  4E92      3612          jsr       (A2)
00002214  584F      3613          addq.w    #4,A7
                    3614   ; return ;
00002216  6000 008C 3615          bra       SetWatchPoint_11
                    3616   SetWatchPoint_6:
                    3617   ; }
                    3618   ; printf("\r\nWatch Point Address: ") ;
0000221A  4879 0000 3619          pea       @m68kde~1_86.L
0000221E  410A      
00002220  4E92      3620          jsr       (A2)
00002222  584F      3621          addq.w    #4,A7
                    3622   ; WPAddress = Get8HexDigits(0) ;
00002224  42A7      3623          clr.l     -(A7)
00002226  4EB8 0CA4 3624          jsr       _Get8HexDigits
0000222A  584F      3625          addq.w    #4,A7
0000222C  2600      3626          move.l    D0,D3
                    3627   ; // search for first free wp or existing same wp
                    3628   ; for(i = 0; i < 8; i++)  {
0000222E  4282      3629          clr.l     D2
                    3630   SetWatchPoint_9:
00002230  0C82 0000 3631          cmp.l     #8,D2
00002234  0008      
00002236  6C00 006C 3632          bge       SetWatchPoint_11
                    3633   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
0000223A  2002      3634          move.l    D2,D0
0000223C  E588      3635          lsl.l     #2,D0
0000223E  41F9 0B00 3636          lea       _WatchPointAddress.L,A0
00002242  0182      
00002244  B6B0 0800 3637          cmp.l     0(A0,D0.L),D3
00002248  6614      3638          bne.s     SetWatchPoint_12
0000224A  4A83      3639          tst.l     D3
0000224C  6710      3640          beq.s     SetWatchPoint_12
                    3641   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000224E  2F03      3642          move.l    D3,-(A7)
00002250  4879 0000 3643          pea       @m68kde~1_87.L
00002254  4122      
00002256  4E92      3644          jsr       (A2)
00002258  504F      3645          addq.w    #8,A7
                    3646   ; return ;
0000225A  6000 0048 3647          bra       SetWatchPoint_11
                    3648   SetWatchPoint_12:
                    3649   ; }
                    3650   ; if(WatchPointSetOrCleared[i] == 0) {
0000225E  2002      3651          move.l    D2,D0
00002260  E588      3652          lsl.l     #2,D0
00002262  2033 0800 3653          move.l    0(A3,D0.L),D0
00002266  6600 0038 3654          bne       SetWatchPoint_14
                    3655   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000226A  2002      3656          move.l    D2,D0
0000226C  E588      3657          lsl.l     #2,D0
0000226E  27BC 0000 3658          move.l    #1,0(A3,D0.L)
00002272  0001 0800 
                    3659   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002276  2F03      3660          move.l    D3,-(A7)
00002278  4879 0000 3661          pea       @m68kde~1_88.L
0000227C  4158      
0000227E  4E92      3662          jsr       (A2)
00002280  504F      3663          addq.w    #8,A7
                    3664   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002282  2002      3665          move.l    D2,D0
00002284  E588      3666          lsl.l     #2,D0
00002286  41F9 0B00 3667          lea       _WatchPointAddress.L,A0
0000228A  0182      
0000228C  2183 0800 3668          move.l    D3,0(A0,D0.L)
                    3669   ; printf("\r\n") ;
00002290  4879 0000 3670          pea       @m68kde~1_1.L
00002294  386A      
00002296  4E92      3671          jsr       (A2)
00002298  584F      3672          addq.w    #4,A7
                    3673   ; WatchPointDisplay() ;       // display the break points
0000229A  4EB8 1D5A 3674          jsr       _WatchPointDisplay
                    3675   ; return ;
0000229E  6004      3676          bra.s     SetWatchPoint_11
                    3677   SetWatchPoint_14:
000022A0  5282      3678          addq.l    #1,D2
000022A2  608C      3679          bra       SetWatchPoint_9
                    3680   SetWatchPoint_11:
000022A4  4CDF 0C0C 3681          movem.l   (A7)+,D2/D3/A2/A3
000022A8  4E5E      3682          unlk      A6
000022AA  4E75      3683          rts
                    3684   ; }
                    3685   ; }
                    3686   ; }
                    3687   ; void HandleBreakPoint(void)
                    3688   ; {
                    3689   _HandleBreakPoint:
000022AC  4E56 FFFC 3690          link      A6,#-4
000022B0  48E7 0038 3691          movem.l   A2/A3/A4,-(A7)
000022B4  45F9 0B00 3692          lea       _i.L,A2
000022B8  00C4      
000022BA  47F9 0000 3693          lea       _printf.L,A3
000022BE  2F1A      
000022C0  49F9 0B00 3694          lea       _PC.L,A4
000022C4  0120      
                    3695   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3696   ; // now we have to put the break point back to run the instruction
                    3697   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3698   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000022C6  5594      3699          subq.l    #2,(A4)
                    3700   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000022C8  4879 0000 3701          pea       @m68kde~1_89.L
000022CC  417E      
000022CE  4E93      3702          jsr       (A3)
000022D0  584F      3703          addq.w    #4,A7
                    3704   ; printf("\r\nSingle Step : [ON]") ;
000022D2  4879 0000 3705          pea       @m68kde~1_90.L
000022D6  4192      
000022D8  4E93      3706          jsr       (A3)
000022DA  584F      3707          addq.w    #4,A7
                    3708   ; printf("\r\nBreakPoints : [Enabled]") ;
000022DC  4879 0000 3709          pea       @m68kde~1_91.L
000022E0  41A8      
000022E2  4E93      3710          jsr       (A3)
000022E4  584F      3711          addq.w    #4,A7
                    3712   ; // now clear the break point (put original instruction back)
                    3713   ; ProgramBreakPointAddress = PC ;
000022E6  2D54 FFFC 3714          move.l    (A4),-4(A6)
                    3715   ; for(i = 0; i < 8; i ++) {
000022EA  4292      3716          clr.l     (A2)
                    3717   HandleBreakPoint_1:
000022EC  2012      3718          move.l    (A2),D0
000022EE  0C80 0000 3719          cmp.l     #8,D0
000022F2  0008      
000022F4  6400 0056 3720          bhs       HandleBreakPoint_3
                    3721   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000022F8  2012      3722          move.l    (A2),D0
000022FA  E588      3723          lsl.l     #2,D0
000022FC  41F9 0B00 3724          lea       _BreakPointAddress.L,A0
00002300  012E      
00002302  2230 0800 3725          move.l    0(A0,D0.L),D1
00002306  B294      3726          cmp.l     (A4),D1
00002308  6600 003E 3727          bne       HandleBreakPoint_4
                    3728   ; BreakPointAddress[i] = 0 ;
0000230C  2012      3729          move.l    (A2),D0
0000230E  E588      3730          lsl.l     #2,D0
00002310  41F9 0B00 3731          lea       _BreakPointAddress.L,A0
00002314  012E      
00002316  42B0 0800 3732          clr.l     0(A0,D0.L)
                    3733   ; BreakPointSetOrCleared[i] = 0 ;
0000231A  2012      3734          move.l    (A2),D0
0000231C  E588      3735          lsl.l     #2,D0
0000231E  41F9 0B00 3736          lea       _BreakPointSetOrCleared.L,A0
00002322  015E      
00002324  42B0 0800 3737          clr.l     0(A0,D0.L)
                    3738   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002328  2012      3739          move.l    (A2),D0
0000232A  E388      3740          lsl.l     #1,D0
0000232C  41F9 0B00 3741          lea       _BreakPointInstruction.L,A0
00002330  014E      
00002332  226E FFFC 3742          move.l    -4(A6),A1
00002336  32B0 0800 3743          move.w    0(A0,D0.L),(A1)
                    3744   ; BreakPointInstruction[i] = 0 ;
0000233A  2012      3745          move.l    (A2),D0
0000233C  E388      3746          lsl.l     #1,D0
0000233E  41F9 0B00 3747          lea       _BreakPointInstruction.L,A0
00002342  014E      
00002344  4270 0800 3748          clr.w     0(A0,D0.L)
                    3749   HandleBreakPoint_4:
00002348  5292      3750          addq.l    #1,(A2)
0000234A  60A0      3751          bra       HandleBreakPoint_1
                    3752   HandleBreakPoint_3:
                    3753   ; }
                    3754   ; }
                    3755   ; DumpRegisters() ;
0000234C  4EB8 14D8 3756          jsr       _DumpRegisters
                    3757   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002350  4879 0000 3758          pea       @m68kde~1_53.L
00002354  3D24      
00002356  4E93      3759          jsr       (A3)
00002358  584F      3760          addq.w    #4,A7
                    3761   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
0000235A  4879 0000 3762          pea       @m68kde~1_92.L
0000235E  41C2      
00002360  4E93      3763          jsr       (A3)
00002362  584F      3764          addq.w    #4,A7
                    3765   ; menu() ;
00002364  4EB9 0000 3766          jsr       _menu
00002368  2570      
0000236A  4CDF 1C00 3767          movem.l   (A7)+,A2/A3/A4
0000236E  4E5E      3768          unlk      A6
00002370  4E75      3769          rts
                    3770   ; }
                    3771   ; void UnknownCommand()
                    3772   ; {
                    3773   _UnknownCommand:
                    3774   ; printf("\r\nUnknown Command.....\r\n") ;
00002372  4879 0000 3775          pea       @m68kde~1_93.L
00002376  41EA      
00002378  4EB9 0000 3776          jsr       _printf
0000237C  2F1A      
0000237E  584F      3777          addq.w    #4,A7
                    3778   ; Help() ;
00002380  4EB9 0000 3779          jsr       _Help
00002384  2496      
00002386  4E75      3780          rts
                    3781   ; }
                    3782   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3783   ; void CallDebugMonitor(void)
                    3784   ; {
                    3785   _CallDebugMonitor:
                    3786   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002388  4879 0000 3787          pea       @m68kde~1_94.L
0000238C  4204      
0000238E  4EB9 0000 3788          jsr       _printf
00002392  2F1A      
00002394  584F      3789          addq.w    #4,A7
                    3790   ; menu();
00002396  4EB9 0000 3791          jsr       _menu
0000239A  2570      
0000239C  4E75      3792          rts
                    3793   ; }
                    3794   ; void Breakpoint(void)
                    3795   ; {
                    3796   _Breakpoint:
0000239E  2F02      3797          move.l    D2,-(A7)
                    3798   ; char c;
                    3799   ; c = toupper(_getch());
000023A0  2F00      3800          move.l    D0,-(A7)
000023A2  4EB8 0B68 3801          jsr       __getch
000023A6  2200      3802          move.l    D0,D1
000023A8  201F      3803          move.l    (A7)+,D0
000023AA  2F01      3804          move.l    D1,-(A7)
000023AC  4EB9 0000 3805          jsr       _toupper
000023B0  2EEE      
000023B2  584F      3806          addq.w    #4,A7
000023B4  1400      3807          move.b    D0,D2
                    3808   ; if( c == (char)('D'))                                      // BreakPoint Display
000023B6  0C02 0044 3809          cmp.b     #68,D2
000023BA  6608      3810          bne.s     Breakpoint_1
                    3811   ; BreakPointDisplay() ;
000023BC  4EB8 1C86 3812          jsr       _BreakPointDisplay
000023C0  6000 0054 3813          bra       Breakpoint_10
                    3814   Breakpoint_1:
                    3815   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000023C4  0C02 004B 3816          cmp.b     #75,D2
000023C8  6630      3817          bne.s     Breakpoint_3
                    3818   ; printf("\r\nKill All Break Points...(y/n)?") ;
000023CA  4879 0000 3819          pea       @m68kde~1_95.L
000023CE  4224      
000023D0  4EB9 0000 3820          jsr       _printf
000023D4  2F1A      
000023D6  584F      3821          addq.w    #4,A7
                    3822   ; c = toupper(_getch());
000023D8  2F00      3823          move.l    D0,-(A7)
000023DA  4EB8 0B68 3824          jsr       __getch
000023DE  2200      3825          move.l    D0,D1
000023E0  201F      3826          move.l    (A7)+,D0
000023E2  2F01      3827          move.l    D1,-(A7)
000023E4  4EB9 0000 3828          jsr       _toupper
000023E8  2EEE      
000023EA  584F      3829          addq.w    #4,A7
000023EC  1400      3830          move.b    D0,D2
                    3831   ; if(c == (char)('Y'))
000023EE  0C02 0059 3832          cmp.b     #89,D2
000023F2  6604      3833          bne.s     Breakpoint_5
                    3834   ; KillAllBreakPoints() ;
000023F4  4EB8 201E 3835          jsr       _KillAllBreakPoints
                    3836   Breakpoint_5:
000023F8  601C      3837          bra.s     Breakpoint_10
                    3838   Breakpoint_3:
                    3839   ; }
                    3840   ; else if(c == (char)('S')) {
000023FA  0C02 0053 3841          cmp.b     #83,D2
000023FE  6606      3842          bne.s     Breakpoint_7
                    3843   ; SetBreakPoint() ;
00002400  4EB8 20B6 3844          jsr       _SetBreakPoint
00002404  6010      3845          bra.s     Breakpoint_10
                    3846   Breakpoint_7:
                    3847   ; }
                    3848   ; else if(c == (char)('C')) {
00002406  0C02 0043 3849          cmp.b     #67,D2
0000240A  6606      3850          bne.s     Breakpoint_9
                    3851   ; BreakPointClear() ;
0000240C  4EB8 1E06 3852          jsr       _BreakPointClear
00002410  6004      3853          bra.s     Breakpoint_10
                    3854   Breakpoint_9:
                    3855   ; }
                    3856   ; else
                    3857   ; UnknownCommand() ;
00002412  4EB8 2372 3858          jsr       _UnknownCommand
                    3859   Breakpoint_10:
00002416  241F      3860          move.l    (A7)+,D2
00002418  4E75      3861          rts
                    3862   ; }
                    3863   ; void Watchpoint(void)
                    3864   ; {
                    3865   _Watchpoint:
0000241A  2F02      3866          move.l    D2,-(A7)
                    3867   ; char c;
                    3868   ; c = toupper(_getch());
0000241C  2F00      3869          move.l    D0,-(A7)
0000241E  4EB8 0B68 3870          jsr       __getch
00002422  2200      3871          move.l    D0,D1
00002424  201F      3872          move.l    (A7)+,D0
00002426  2F01      3873          move.l    D1,-(A7)
00002428  4EB9 0000 3874          jsr       _toupper
0000242C  2EEE      
0000242E  584F      3875          addq.w    #4,A7
00002430  1400      3876          move.b    D0,D2
                    3877   ; if( c == (char)('D'))                                      // WatchPoint Display
00002432  0C02 0044 3878          cmp.b     #68,D2
00002436  6608      3879          bne.s     Watchpoint_1
                    3880   ; WatchPointDisplay() ;
00002438  4EB8 1D5A 3881          jsr       _WatchPointDisplay
0000243C  6000 0054 3882          bra       Watchpoint_10
                    3883   Watchpoint_1:
                    3884   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002440  0C02 004B 3885          cmp.b     #75,D2
00002444  6630      3886          bne.s     Watchpoint_3
                    3887   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002446  4879 0000 3888          pea       @m68kde~1_96.L
0000244A  4246      
0000244C  4EB9 0000 3889          jsr       _printf
00002450  2F1A      
00002452  584F      3890          addq.w    #4,A7
                    3891   ; c = toupper(_getch());
00002454  2F00      3892          move.l    D0,-(A7)
00002456  4EB8 0B68 3893          jsr       __getch
0000245A  2200      3894          move.l    D0,D1
0000245C  201F      3895          move.l    (A7)+,D0
0000245E  2F01      3896          move.l    D1,-(A7)
00002460  4EB9 0000 3897          jsr       _toupper
00002464  2EEE      
00002466  584F      3898          addq.w    #4,A7
00002468  1400      3899          move.b    D0,D2
                    3900   ; if(c == (char)('Y'))
0000246A  0C02 0059 3901          cmp.b     #89,D2
0000246E  6604      3902          bne.s     Watchpoint_5
                    3903   ; KillAllWatchPoints() ;
00002470  4EB8 2086 3904          jsr       _KillAllWatchPoints
                    3905   Watchpoint_5:
00002474  601C      3906          bra.s     Watchpoint_10
                    3907   Watchpoint_3:
                    3908   ; }
                    3909   ; else if(c == (char)('S')) {
00002476  0C02 0053 3910          cmp.b     #83,D2
0000247A  6606      3911          bne.s     Watchpoint_7
                    3912   ; SetWatchPoint() ;
0000247C  4EB8 21D6 3913          jsr       _SetWatchPoint
00002480  6010      3914          bra.s     Watchpoint_10
                    3915   Watchpoint_7:
                    3916   ; }
                    3917   ; else if(c == (char)('C')) {
00002482  0C02 0043 3918          cmp.b     #67,D2
00002486  6606      3919          bne.s     Watchpoint_9
                    3920   ; WatchPointClear() ;
00002488  4EB8 1EE0 3921          jsr       _WatchPointClear
0000248C  6004      3922          bra.s     Watchpoint_10
                    3923   Watchpoint_9:
                    3924   ; }
                    3925   ; else
                    3926   ; UnknownCommand() ;
0000248E  4EB8 2372 3927          jsr       _UnknownCommand
                    3928   Watchpoint_10:
00002492  241F      3929          move.l    (A7)+,D2
00002494  4E75      3930          rts
                    3931   ; }
                    3932   ; void Help(void)
                    3933   ; {
                    3934   _Help:
00002496  48E7 2020 3935          movem.l   D2/A2,-(A7)
0000249A  45F9 0000 3936          lea       _printf.L,A2
0000249E  2F1A      
                    3937   ; char *banner = "\r\n----------------------------------------------------------------" ;
000024A0  41F9 0000 3938          lea       @m68kde~1_97.L,A0
000024A4  4268      
000024A6  2408      3939          move.l    A0,D2
                    3940   ; printf(banner) ;
000024A8  2F02      3941          move.l    D2,-(A7)
000024AA  4E92      3942          jsr       (A2)
000024AC  584F      3943          addq.w    #4,A7
                    3944   ; printf("\r\n  Debugger Command Summary") ;
000024AE  4879 0000 3945          pea       @m68kde~1_98.L
000024B2  42AC      
000024B4  4E92      3946          jsr       (A2)
000024B6  584F      3947          addq.w    #4,A7
                    3948   ; printf(banner) ;
000024B8  2F02      3949          move.l    D2,-(A7)
000024BA  4E92      3950          jsr       (A2)
000024BC  584F      3951          addq.w    #4,A7
                    3952   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000024BE  4879 0000 3953          pea       @m68kde~1_99.L
000024C2  42CA      
000024C4  4E92      3954          jsr       (A2)
000024C6  584F      3955          addq.w    #4,A7
                    3956   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000024C8  4879 0000 3957          pea       @m68kde~1_100.L
000024CC  430E      
000024CE  4E92      3958          jsr       (A2)
000024D0  584F      3959          addq.w    #4,A7
                    3960   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000024D2  4879 0000 3961          pea       @m68kde~1_101.L
000024D6  4346      
000024D8  4E92      3962          jsr       (A2)
000024DA  584F      3963          addq.w    #4,A7
                    3964   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000024DC  4879 0000 3965          pea       @m68kde~1_102.L
000024E0  4380      
000024E2  4E92      3966          jsr       (A2)
000024E4  584F      3967          addq.w    #4,A7
                    3968   ; printf("\r\n  E            - Enter String into Memory") ;
000024E6  4879 0000 3969          pea       @m68kde~1_103.L
000024EA  43B2      
000024EC  4E92      3970          jsr       (A2)
000024EE  584F      3971          addq.w    #4,A7
                    3972   ; printf("\r\n  F            - Fill Memory with Data") ;
000024F0  4879 0000 3973          pea       @m68kde~1_104.L
000024F4  43DE      
000024F6  4E92      3974          jsr       (A2)
000024F8  584F      3975          addq.w    #4,A7
                    3976   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000024FA  2F39 0B00 3977          move.l    _PC.L,-(A7)
000024FE  0120      
00002500  4879 0000 3978          pea       @m68kde~1_105.L
00002504  4408      
00002506  4E92      3979          jsr       (A2)
00002508  504F      3980          addq.w    #8,A7
                    3981   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000250A  4879 0000 3982          pea       @m68kde~1_106.L
0000250E  4442      
00002510  4E92      3983          jsr       (A2)
00002512  584F      3984          addq.w    #4,A7
                    3985   ; printf("\r\n  M            - Memory Examine and Change");
00002514  4879 0000 3986          pea       @m68kde~1_107.L
00002518  447A      
0000251A  4E92      3987          jsr       (A2)
0000251C  584F      3988          addq.w    #4,A7
                    3989   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000251E  4879 0000 3990          pea       @m68kde~1_108.L
00002522  44A8      
00002524  4E92      3991          jsr       (A2)
00002526  584F      3992          addq.w    #4,A7
                    3993   ; printf("\r\n  R            - Display 68000 Registers") ;
00002528  4879 0000 3994          pea       @m68kde~1_109.L
0000252C  44E2      
0000252E  4E92      3995          jsr       (A2)
00002530  584F      3996          addq.w    #4,A7
                    3997   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002532  4879 0000 3998          pea       @m68kde~1_110.L
00002536  450E      
00002538  4E92      3999          jsr       (A2)
0000253A  584F      4000          addq.w    #4,A7
                    4001   ; printf("\r\n  TM           - Test Memory") ;
0000253C  4879 0000 4002          pea       @m68kde~1_111.L
00002540  4540      
00002542  4E92      4003          jsr       (A2)
00002544  584F      4004          addq.w    #4,A7
                    4005   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002546  4879 0000 4006          pea       @m68kde~1_112.L
0000254A  4560      
0000254C  4E92      4007          jsr       (A2)
0000254E  584F      4008          addq.w    #4,A7
                    4009   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002550  4879 0000 4010          pea       @m68kde~1_113.L
00002554  4588      
00002556  4E92      4011          jsr       (A2)
00002558  584F      4012          addq.w    #4,A7
                    4013   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000255A  4879 0000 4014          pea       @m68kde~1_114.L
0000255E  45BE      
00002560  4E92      4015          jsr       (A2)
00002562  584F      4016          addq.w    #4,A7
                    4017   ; printf(banner) ;
00002564  2F02      4018          move.l    D2,-(A7)
00002566  4E92      4019          jsr       (A2)
00002568  584F      4020          addq.w    #4,A7
0000256A  4CDF 0404 4021          movem.l   (A7)+,D2/A2
0000256E  4E75      4022          rts
                    4023   ; }
                    4024   ; void menu(void)
                    4025   ; {
                    4026   _menu:
00002570  48E7 303C 4027          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002574  45F9 0000 4028          lea       _printf.L,A2
00002578  2F1A      
0000257A  47F9 0B00 4029          lea       _Trace.L,A3
0000257E  00D8      
00002580  49F9 0B00 4030          lea       _x.L,A4
00002584  00C8      
00002586  4BF9 0B00 4031          lea       _SR.L,A5
0000258A  012C      
                    4032   ; char c,c1 ;
                    4033   ; while(1)    {
                    4034   menu_1:
                    4035   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000258C  4EB8 0BA6 4036          jsr       _FlushKeyboard
                    4037   ; printf("\r\n#") ;
00002590  4879 0000 4038          pea       @m68kde~1_115.L
00002594  45F6      
00002596  4E92      4039          jsr       (A2)
00002598  584F      4040          addq.w    #4,A7
                    4041   ; c = toupper(_getch());
0000259A  2F00      4042          move.l    D0,-(A7)
0000259C  4EB8 0B68 4043          jsr       __getch
000025A0  2200      4044          move.l    D0,D1
000025A2  201F      4045          move.l    (A7)+,D0
000025A4  2F01      4046          move.l    D1,-(A7)
000025A6  4EB9 0000 4047          jsr       _toupper
000025AA  2EEE      
000025AC  584F      4048          addq.w    #4,A7
000025AE  1400      4049          move.b    D0,D2
                    4050   ; if( c == (char)('L'))                  // load s record file
000025B0  0C02 004C 4051          cmp.b     #76,D2
000025B4  6608      4052          bne.s     menu_4
                    4053   ; Load_SRecordFile() ;
000025B6  4EB8 0E36 4054          jsr       _Load_SRecordFile
000025BA  6000 021E 4055          bra       menu_46
                    4056   menu_4:
                    4057   ; else if( c == (char)('D'))             // dump memory
000025BE  0C02 0044 4058          cmp.b     #68,D2
000025C2  6608      4059          bne.s     menu_6
                    4060   ; DumpMemory() ;
000025C4  4EB8 0CCC 4061          jsr       _DumpMemory
000025C8  6000 0210 4062          bra       menu_46
                    4063   menu_6:
                    4064   ; else if( c == (char)('E'))             // Enter String into memory
000025CC  0C02 0045 4065          cmp.b     #69,D2
000025D0  660A      4066          bne.s     menu_8
                    4067   ; EnterString() ;
000025D2  4EB9 0000 4068          jsr       _EnterString
000025D6  2922      
000025D8  6000 0200 4069          bra       menu_46
                    4070   menu_8:
                    4071   ; else if( c == (char)('F'))             // fill memory
000025DC  0C02 0046 4072          cmp.b     #70,D2
000025E0  6608      4073          bne.s     menu_10
                    4074   ; FillMemory() ;
000025E2  4EB8 0DBC 4075          jsr       _FillMemory
000025E6  6000 01F2 4076          bra       menu_46
                    4077   menu_10:
                    4078   ; else if( c == (char)('G'))  {           // go user program
000025EA  0C02 0047 4079          cmp.b     #71,D2
000025EE  6626      4080          bne.s     menu_12
                    4081   ; printf("\r\nProgram Running.....") ;
000025F0  4879 0000 4082          pea       @m68kde~1_116.L
000025F4  45FA      
000025F6  4E92      4083          jsr       (A2)
000025F8  584F      4084          addq.w    #4,A7
                    4085   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000025FA  4879 0000 4086          pea       @m68kde~1_117.L
000025FE  4612      
00002600  4E92      4087          jsr       (A2)
00002602  584F      4088          addq.w    #4,A7
                    4089   ; GoFlag = 1 ;
00002604  23FC 0000 4090          move.l    #1,_GoFlag.L
00002608  0001 0B00 
0000260C  00DC      
                    4091   ; go() ;
0000260E  4EB8 08B8 4092          jsr       _go
00002612  6000 01C6 4093          bra       menu_46
                    4094   menu_12:
                    4095   ; }
                    4096   ; else if( c == (char)('M'))           // memory examine and modify
00002616  0C02 004D 4097          cmp.b     #77,D2
0000261A  6608      4098          bne.s     menu_14
                    4099   ; MemoryChange() ;
0000261C  4EB8 0FC4 4100          jsr       _MemoryChange
00002620  6000 01B8 4101          bra       menu_46
                    4102   menu_14:
                    4103   ; else if( c == (char)('P'))            // Program Flash Chip
00002624  0C02 0050 4104          cmp.b     #80,D2
00002628  6608      4105          bne.s     menu_16
                    4106   ; ProgramFlashChip() ;
0000262A  4EB8 1216 4107          jsr       _ProgramFlashChip
0000262E  6000 01AA 4108          bra       menu_46
                    4109   menu_16:
                    4110   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002632  0C02 0043 4111          cmp.b     #67,D2
00002636  6608      4112          bne.s     menu_18
                    4113   ; LoadFromFlashChip();
00002638  4EB8 141E 4114          jsr       _LoadFromFlashChip
0000263C  6000 019C 4115          bra       menu_46
                    4116   menu_18:
                    4117   ; else if( c == (char)('R'))             // dump registers
00002640  0C02 0052 4118          cmp.b     #82,D2
00002644  6608      4119          bne.s     menu_20
                    4120   ; DumpRegisters() ;
00002646  4EB8 14D8 4121          jsr       _DumpRegisters
0000264A  6000 018E 4122          bra       menu_46
                    4123   menu_20:
                    4124   ; else if( c == (char)('.'))           // change registers
0000264E  0C02 002E 4125          cmp.b     #46,D2
00002652  6608      4126          bne.s     menu_22
                    4127   ; ChangeRegisters() ;
00002654  4EB8 19CA 4128          jsr       _ChangeRegisters
00002658  6000 0180 4129          bra       menu_46
                    4130   menu_22:
                    4131   ; else if( c == (char)('B'))              // breakpoint command
0000265C  0C02 0042 4132          cmp.b     #66,D2
00002660  6608      4133          bne.s     menu_24
                    4134   ; Breakpoint() ;
00002662  4EB8 239E 4135          jsr       _Breakpoint
00002666  6000 0172 4136          bra       menu_46
                    4137   menu_24:
                    4138   ; else if( c == (char)('T'))  {          // Test command
0000266A  0C02 0054 4139          cmp.b     #84,D2
0000266E  6600 0046 4140          bne       menu_26
                    4141   ; c1 = toupper(_getch()) ;
00002672  2F00      4142          move.l    D0,-(A7)
00002674  4EB8 0B68 4143          jsr       __getch
00002678  2200      4144          move.l    D0,D1
0000267A  201F      4145          move.l    (A7)+,D0
0000267C  2F01      4146          move.l    D1,-(A7)
0000267E  4EB9 0000 4147          jsr       _toupper
00002682  2EEE      
00002684  584F      4148          addq.w    #4,A7
00002686  1600      4149          move.b    D0,D3
                    4150   ; if(c1 == (char)('M'))                    // memory test
00002688  0C03 004D 4151          cmp.b     #77,D3
0000268C  6608      4152          bne.s     menu_28
                    4153   ; MemoryTest() ;
0000268E  4EB9 0000 4154          jsr       _MemoryTest
00002692  2972      
00002694  601C      4155          bra.s     menu_33
                    4156   menu_28:
                    4157   ; else if( c1 == (char)('S'))              // Switch Test command
00002696  0C03 0053 4158          cmp.b     #83,D3
0000269A  6606      4159          bne.s     menu_30
                    4160   ; SwitchTest() ;
0000269C  4EB8 0AA4 4161          jsr       _SwitchTest
000026A0  6010      4162          bra.s     menu_33
                    4163   menu_30:
                    4164   ; else if( c1 == (char)('D'))              // display Test command
000026A2  0C03 0044 4165          cmp.b     #68,D3
000026A6  6606      4166          bne.s     menu_32
                    4167   ; TestLEDS() ;
000026A8  4EB8 0A50 4168          jsr       _TestLEDS
000026AC  6004      4169          bra.s     menu_33
                    4170   menu_32:
                    4171   ; else
                    4172   ; UnknownCommand() ;
000026AE  4EB8 2372 4173          jsr       _UnknownCommand
                    4174   menu_33:
000026B2  6000 0126 4175          bra       menu_46
                    4176   menu_26:
                    4177   ; }
                    4178   ; else if( c == (char)(' ')) {             // Next instruction command
000026B6  0C02 0020 4179          cmp.b     #32,D2
000026BA  6636      4180          bne.s     menu_34
                    4181   ; DisableBreakPoints() ;
000026BC  4EB8 1F82 4182          jsr       _DisableBreakPoints
                    4183   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000026C0  2013      4184          move.l    (A3),D0
000026C2  0C80 0000 4185          cmp.l     #1,D0
000026C6  0001      
000026C8  661A      4186          bne.s     menu_36
000026CA  2039 0B00 4187          move.l    _GoFlag.L,D0
000026CE  00DC      
000026D0  0C80 0000 4188          cmp.l     #1,D0
000026D4  0001      
000026D6  660C      4189          bne.s     menu_36
                    4190   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000026D8  13FC 0001 4191          move.b    #1,4194314
000026DC  0040 000A 
                    4192   ; return ;
000026E0  6000 00FC 4193          bra       menu_38
                    4194   menu_36:
                    4195   ; }
                    4196   ; else
                    4197   ; printf("\r\nError: Press 'G' first to start program") ;
000026E4  4879 0000 4198          pea       @m68kde~1_118.L
000026E8  4640      
000026EA  4E92      4199          jsr       (A2)
000026EC  584F      4200          addq.w    #4,A7
000026EE  6000 00EA 4201          bra       menu_46
                    4202   menu_34:
                    4203   ; }
                    4204   ; else if( c == (char)('S')) {             // single step
000026F2  0C02 0053 4205          cmp.b     #83,D2
000026F6  6600 008C 4206          bne       menu_39
                    4207   ; if(Trace == 0) {
000026FA  2013      4208          move.l    (A3),D0
000026FC  6600 0050 4209          bne       menu_41
                    4210   ; DisableBreakPoints() ;
00002700  4EB8 1F82 4211          jsr       _DisableBreakPoints
                    4212   ; printf("\r\nSingle Step  :[ON]") ;
00002704  4879 0000 4213          pea       @m68kde~1_119.L
00002708  466A      
0000270A  4E92      4214          jsr       (A2)
0000270C  584F      4215          addq.w    #4,A7
                    4216   ; printf("\r\nBreak Points :[Disabled]") ;
0000270E  4879 0000 4217          pea       @m68kde~1_52.L
00002712  3D08      
00002714  4E92      4218          jsr       (A2)
00002716  584F      4219          addq.w    #4,A7
                    4220   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002718  0055 8000 4221          or.w      #32768,(A5)
                    4222   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000271C  2F39 0B00 4223          move.l    _PC.L,-(A7)
00002720  0120      
00002722  4879 0000 4224          pea       @m68kde~1_120.L
00002726  4680      
00002728  4E92      4225          jsr       (A2)
0000272A  504F      4226          addq.w    #8,A7
                    4227   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000272C  4879 0000 4228          pea       @m68kde~1_121.L
00002730  46B4      
00002732  4E92      4229          jsr       (A2)
00002734  584F      4230          addq.w    #4,A7
                    4231   ; DumpRegisters() ;
00002736  4EB8 14D8 4232          jsr       _DumpRegisters
                    4233   ; Trace = 1;
0000273A  26BC 0000 4234          move.l    #1,(A3)
0000273E  0001      
                    4235   ; TraceException = 1;
00002740  13FC 0001 4236          move.b    #1,4194314
00002744  0040 000A 
                    4237   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002748  28B8 0074 4238          move.l    116,(A4)
0000274C  6032      4239          bra.s     menu_42
                    4240   menu_41:
                    4241   ; }
                    4242   ; else {
                    4243   ; Trace = 0 ;
0000274E  4293      4244          clr.l     (A3)
                    4245   ; TraceException = 0 ;
00002750  4239 0040 4246          clr.b     4194314
00002754  000A      
                    4247   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002756  28B8 0074 4248          move.l    116,(A4)
                    4249   ; EnableBreakPoints() ;
0000275A  4EB8 1FD6 4250          jsr       _EnableBreakPoints
                    4251   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000275E  0255 7FFF 4252          and.w     #32767,(A5)
                    4253   ; printf("\r\nSingle Step : [OFF]") ;
00002762  4879 0000 4254          pea       @m68kde~1_122.L
00002766  46D8      
00002768  4E92      4255          jsr       (A2)
0000276A  584F      4256          addq.w    #4,A7
                    4257   ; printf("\r\nBreak Points :[Enabled]") ;
0000276C  4879 0000 4258          pea       @m68kde~1_123.L
00002770  46EE      
00002772  4E92      4259          jsr       (A2)
00002774  584F      4260          addq.w    #4,A7
                    4261   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002776  4879 0000 4262          pea       @m68kde~1_124.L
0000277A  4708      
0000277C  4E92      4263          jsr       (A2)
0000277E  584F      4264          addq.w    #4,A7
                    4265   menu_42:
00002780  6000 0058 4266          bra       menu_46
                    4267   menu_39:
                    4268   ; }
                    4269   ; }
                    4270   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002784  0C02 001B 4271          cmp.b     #27,D2
00002788  6600 0040 4272          bne       menu_43
                    4273   ; Trace = 0;
0000278C  4293      4274          clr.l     (A3)
                    4275   ; TraceException = 0;
0000278E  4239 0040 4276          clr.b     4194314
00002792  000A      
                    4277   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002794  28B8 0074 4278          move.l    116,(A4)
                    4279   ; EnableBreakPoints() ;
00002798  4EB8 1FD6 4280          jsr       _EnableBreakPoints
                    4281   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000279C  0255 7FFF 4282          and.w     #32767,(A5)
                    4283   ; printf("\r\nSingle Step  :[OFF]") ;
000027A0  4879 0000 4284          pea       @m68kde~1_125.L
000027A4  4732      
000027A6  4E92      4285          jsr       (A2)
000027A8  584F      4286          addq.w    #4,A7
                    4287   ; printf("\r\nBreak Points :[Enabled]");
000027AA  4879 0000 4288          pea       @m68kde~1_123.L
000027AE  46EE      
000027B0  4E92      4289          jsr       (A2)
000027B2  584F      4290          addq.w    #4,A7
                    4291   ; printf("\r\nProgram Running.....") ;
000027B4  4879 0000 4292          pea       @m68kde~1_116.L
000027B8  45FA      
000027BA  4E92      4293          jsr       (A2)
000027BC  584F      4294          addq.w    #4,A7
                    4295   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000027BE  4879 0000 4296          pea       @m68kde~1_117.L
000027C2  4612      
000027C4  4E92      4297          jsr       (A2)
000027C6  584F      4298          addq.w    #4,A7
                    4299   ; return ;
000027C8  6014      4300          bra.s     menu_38
                    4301   menu_43:
                    4302   ; }
                    4303   ; else if( c == (char)('W'))              // Watchpoint command
000027CA  0C02 0057 4304          cmp.b     #87,D2
000027CE  6606      4305          bne.s     menu_45
                    4306   ; Watchpoint() ;
000027D0  4EB8 241A 4307          jsr       _Watchpoint
000027D4  6004      4308          bra.s     menu_46
                    4309   menu_45:
                    4310   ; else
                    4311   ; UnknownCommand() ;
000027D6  4EB8 2372 4312          jsr       _UnknownCommand
                    4313   menu_46:
000027DA  6000 FDB0 4314          bra       menu_1
                    4315   menu_38:
000027DE  4CDF 3C0C 4316          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000027E2  4E75      4317          rts
                    4318   ; }
                    4319   ; }
                    4320   ; void PrintErrorMessageandAbort(char *string) {
                    4321   _PrintErrorMessageandAbort:
000027E4  4E56 0000 4322          link      A6,#0
                    4323   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000027E8  4879 0000 4324          pea       @m68kde~1_126.L
000027EC  4748      
000027EE  4EB9 0000 4325          jsr       _printf
000027F2  2F1A      
000027F4  584F      4326          addq.w    #4,A7
                    4327   ; printf("%s\r\n", string) ;
000027F6  2F2E 0008 4328          move.l    8(A6),-(A7)
000027FA  4879 0000 4329          pea       @m68kde~1_127.L
000027FE  4764      
00002800  4EB9 0000 4330          jsr       _printf
00002804  2F1A      
00002806  504F      4331          addq.w    #8,A7
                    4332   ; menu() ;
00002808  4EB8 2570 4333          jsr       _menu
0000280C  4E5E      4334          unlk      A6
0000280E  4E75      4335          rts
                    4336   ; }
                    4337   ; void IRQMessage(int level) {
                    4338   _IRQMessage:
00002810  4E56 0000 4339          link      A6,#0
                    4340   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002814  4879 0000 4341          pea       @m68kde~1_128.L
00002818  476A      
0000281A  4EB9 0000 4342          jsr       _printf
0000281E  2F1A      
00002820  584F      4343          addq.w    #4,A7
                    4344   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002822  2F2E 0008 4345          move.l    8(A6),-(A7)
00002826  4879 0000 4346          pea       @m68kde~1_129.L
0000282A  4782      
0000282C  4EB9 0000 4347          jsr       _printf
00002830  2F1A      
00002832  504F      4348          addq.w    #8,A7
                    4349   ; menu() ;
00002834  4EB8 2570 4350          jsr       _menu
00002838  4E5E      4351          unlk      A6
0000283A  4E75      4352          rts
                    4353   ; }
                    4354   ; void UnhandledIRQ1(void) {
                    4355   _UnhandledIRQ1:
                    4356   ; IRQMessage(1);
0000283C  4878 0001 4357          pea       1
00002840  4EB8 2810 4358          jsr       _IRQMessage
00002844  584F      4359          addq.w    #4,A7
00002846  4E75      4360          rts
                    4361   ; }
                    4362   ; void UnhandledIRQ2(void) {
                    4363   _UnhandledIRQ2:
                    4364   ; IRQMessage(2);
00002848  4878 0002 4365          pea       2
0000284C  4EB8 2810 4366          jsr       _IRQMessage
00002850  584F      4367          addq.w    #4,A7
00002852  4E75      4368          rts
                    4369   ; }
                    4370   ; void UnhandledIRQ3(void){
                    4371   _UnhandledIRQ3:
                    4372   ; IRQMessage(3);
00002854  4878 0003 4373          pea       3
00002858  4EB8 2810 4374          jsr       _IRQMessage
0000285C  584F      4375          addq.w    #4,A7
0000285E  4E75      4376          rts
                    4377   ; }
                    4378   ; void UnhandledIRQ4(void) {
                    4379   _UnhandledIRQ4:
                    4380   ; IRQMessage(4);
00002860  4878 0004 4381          pea       4
00002864  4EB8 2810 4382          jsr       _IRQMessage
00002868  584F      4383          addq.w    #4,A7
0000286A  4E75      4384          rts
                    4385   ; }
                    4386   ; void UnhandledIRQ5(void) {
                    4387   _UnhandledIRQ5:
                    4388   ; IRQMessage(5);
0000286C  4878 0005 4389          pea       5
00002870  4EB8 2810 4390          jsr       _IRQMessage
00002874  584F      4391          addq.w    #4,A7
00002876  4E75      4392          rts
                    4393   ; }
                    4394   ; void UnhandledIRQ6(void) {
                    4395   _UnhandledIRQ6:
                    4396   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002878  4879 0000 4397          pea       @m68kde~1_130.L
0000287C  47A6      
0000287E  4EB8 27E4 4398          jsr       _PrintErrorMessageandAbort
00002882  584F      4399          addq.w    #4,A7
                    4400   ; menu() ;
00002884  4EB8 2570 4401          jsr       _menu
00002888  4E75      4402          rts
                    4403   ; }
                    4404   ; void UnhandledIRQ7(void) {
                    4405   _UnhandledIRQ7:
                    4406   ; IRQMessage(7);
0000288A  4878 0007 4407          pea       7
0000288E  4EB8 2810 4408          jsr       _IRQMessage
00002892  584F      4409          addq.w    #4,A7
00002894  4E75      4410          rts
                    4411   ; }
                    4412   ; void UnhandledTrap(void) {
                    4413   _UnhandledTrap:
                    4414   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002896  4879 0000 4415          pea       @m68kde~1_131.L
0000289A  47E6      
0000289C  4EB8 27E4 4416          jsr       _PrintErrorMessageandAbort
000028A0  584F      4417          addq.w    #4,A7
000028A2  4E75      4418          rts
                    4419   ; }
                    4420   ; void BusError() {
                    4421   _BusError:
                    4422   ; PrintErrorMessageandAbort("BUS Error!") ;
000028A4  4879 0000 4423          pea       @m68kde~1_132.L
000028A8  47FC      
000028AA  4EB8 27E4 4424          jsr       _PrintErrorMessageandAbort
000028AE  584F      4425          addq.w    #4,A7
000028B0  4E75      4426          rts
                    4427   ; }
                    4428   ; void AddressError() {
                    4429   _AddressError:
                    4430   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000028B2  4879 0000 4431          pea       @m68kde~1_133.L
000028B6  4808      
000028B8  4EB8 27E4 4432          jsr       _PrintErrorMessageandAbort
000028BC  584F      4433          addq.w    #4,A7
000028BE  4E75      4434          rts
                    4435   ; }
                    4436   ; void IllegalInstruction() {
                    4437   _IllegalInstruction:
                    4438   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000028C0  4879 0000 4439          pea       @m68kde~1_134.L
000028C4  4818      
000028C6  4EB8 27E4 4440          jsr       _PrintErrorMessageandAbort
000028CA  584F      4441          addq.w    #4,A7
000028CC  4E75      4442          rts
                    4443   ; }
                    4444   ; void Dividebyzero() {
                    4445   _Dividebyzero:
                    4446   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000028CE  4879 0000 4447          pea       @m68kde~1_135.L
000028D2  482C      
000028D4  4EB8 27E4 4448          jsr       _PrintErrorMessageandAbort
000028D8  584F      4449          addq.w    #4,A7
000028DA  4E75      4450          rts
                    4451   ; }
                    4452   ; void Check() {
                    4453   _Check:
                    4454   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000028DC  4879 0000 4455          pea       @m68kde~1_136.L
000028E0  483C      
000028E2  4EB8 27E4 4456          jsr       _PrintErrorMessageandAbort
000028E6  584F      4457          addq.w    #4,A7
000028E8  4E75      4458          rts
                    4459   ; }
                    4460   ; void Trapv() {
                    4461   _Trapv:
                    4462   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000028EA  4879 0000 4463          pea       @m68kde~1_137.L
000028EE  484E      
000028F0  4EB8 27E4 4464          jsr       _PrintErrorMessageandAbort
000028F4  584F      4465          addq.w    #4,A7
000028F6  4E75      4466          rts
                    4467   ; }
                    4468   ; void PrivError() {
                    4469   _PrivError:
                    4470   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000028F8  4879 0000 4471          pea       @m68kde~1_138.L
000028FC  4860      
000028FE  4EB8 27E4 4472          jsr       _PrintErrorMessageandAbort
00002902  584F      4473          addq.w    #4,A7
00002904  4E75      4474          rts
                    4475   ; }
                    4476   ; void UnitIRQ() {
                    4477   _UnitIRQ:
                    4478   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002906  4879 0000 4479          pea       @m68kde~1_139.L
0000290A  4874      
0000290C  4EB8 27E4 4480          jsr       _PrintErrorMessageandAbort
00002910  584F      4481          addq.w    #4,A7
00002912  4E75      4482          rts
                    4483   ; }
                    4484   ; void Spurious() {
                    4485   _Spurious:
                    4486   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002914  4879 0000 4487          pea       @m68kde~1_140.L
00002918  4886      
0000291A  4EB8 27E4 4488          jsr       _PrintErrorMessageandAbort
0000291E  584F      4489          addq.w    #4,A7
00002920  4E75      4490          rts
                    4491   ; }
                    4492   ; void EnterString(void)
                    4493   ; {
                    4494   _EnterString:
00002922  4E56 FFFC 4495          link      A6,#-4
00002926  2F02      4496          move.l    D2,-(A7)
                    4497   ; unsigned char *Start;
                    4498   ; unsigned char c;
                    4499   ; printf("\r\nStart Address in Memory: ") ;
00002928  4879 0000 4500          pea       @m68kde~1_141.L
0000292C  4894      
0000292E  4EB9 0000 4501          jsr       _printf
00002932  2F1A      
00002934  584F      4502          addq.w    #4,A7
                    4503   ; Start = Get8HexDigits(0) ;
00002936  42A7      4504          clr.l     -(A7)
00002938  4EB8 0CA4 4505          jsr       _Get8HexDigits
0000293C  584F      4506          addq.w    #4,A7
0000293E  2400      4507          move.l    D0,D2
                    4508   ; printf("\r\nEnter String (ESC to end) :") ;
00002940  4879 0000 4509          pea       @m68kde~1_142.L
00002944  48B0      
00002946  4EB9 0000 4510          jsr       _printf
0000294A  2F1A      
0000294C  584F      4511          addq.w    #4,A7
                    4512   ; while((c = getchar()) != 0x1b)
                    4513   EnterString_1:
0000294E  4EB9 0000 4514          jsr       _getch
00002952  2E3C      
00002954  1D40 FFFF 4515          move.b    D0,-1(A6)
00002958  0C00 001B 4516          cmp.b     #27,D0
0000295C  670A      4517          beq.s     EnterString_3
                    4518   ; *Start++ = c ;
0000295E  2042      4519          move.l    D2,A0
00002960  5282      4520          addq.l    #1,D2
00002962  10AE FFFF 4521          move.b    -1(A6),(A0)
00002966  60E6      4522          bra       EnterString_1
                    4523   EnterString_3:
                    4524   ; *Start = 0x00;  // terminate with a null
00002968  2042      4525          move.l    D2,A0
0000296A  4210      4526          clr.b     (A0)
0000296C  241F      4527          move.l    (A7)+,D2
0000296E  4E5E      4528          unlk      A6
00002970  4E75      4529          rts
                    4530   ; }
                    4531   ; void MemoryTest(void)
                    4532   ; {
                    4533   _MemoryTest:
00002972  48E7 3830 4534          movem.l   D2/D3/D4/A2/A3,-(A7)
00002976  45F9 0000 4535          lea       _printf.L,A2
0000297A  2F1A      
0000297C  47F8 09D4 4536          lea       _Oline0.L,A3
                    4537   ; unsigned int *RamPtr;
                    4538   ; unsigned int *Start, *End ;
                    4539   ; // Output to LCD
                    4540   ; Oline0("Performing Memory Test!");
00002980  4879 0000 4541          pea       @m68kde~1_143.L
00002984  48CE      
00002986  4E93      4542          jsr       (A3)
00002988  584F      4543          addq.w    #4,A7
                    4544   ; Oline1("");
0000298A  4879 0000 4545          pea       @m68kde~1_35.L
0000298E  3B90      
00002990  4EB8 0A02 4546          jsr       _Oline1
00002994  584F      4547          addq.w    #4,A7
                    4548   ; printf("\r\nStart Address: ") ;
00002996  4879 0000 4549          pea       @m68kde~1_144.L
0000299A  48E6      
0000299C  4E92      4550          jsr       (A2)
0000299E  584F      4551          addq.w    #4,A7
                    4552   ; Start = Get8HexDigits(0) ; //Prompt the user for the start address.
000029A0  42A7      4553          clr.l     -(A7)
000029A2  4EB8 0CA4 4554          jsr       _Get8HexDigits
000029A6  584F      4555          addq.w    #4,A7
000029A8  2800      4556          move.l    D0,D4
                    4557   ; printf("\r\nEnd Address: ") ;
000029AA  4879 0000 4558          pea       @m68kde~1_145.L
000029AE  48F8      
000029B0  4E92      4559          jsr       (A2)
000029B2  584F      4560          addq.w    #4,A7
                    4561   ; End = Get8HexDigits(0) ; //Prompt the user for end address
000029B4  42A7      4562          clr.l     -(A7)
000029B6  4EB8 0CA4 4563          jsr       _Get8HexDigits
000029BA  584F      4564          addq.w    #4,A7
000029BC  2600      4565          move.l    D0,D3
                    4566   ; // Write to Memory
                    4567   ; for(RamPtr=Start; RamPtr <= End; RamPtr++){
000029BE  2404      4568          move.l    D4,D2
                    4569   MemoryTest_1:
000029C0  B483      4570          cmp.l     D3,D2
000029C2  620C      4571          bhi.s     MemoryTest_3
                    4572   ; *RamPtr = 0xDEADBEEF; //Dummy data
000029C4  2042      4573          move.l    D2,A0
000029C6  20BC DEAD 4574          move.l    #-559038737,(A0)
000029CA  BEEF      
000029CC  5882      4575          addq.l    #4,D2
000029CE  60F0      4576          bra       MemoryTest_1
                    4577   MemoryTest_3:
                    4578   ; }
                    4579   ; for(RamPtr=Start; RamPtr <= End; RamPtr++){
000029D0  2404      4580          move.l    D4,D2
                    4581   MemoryTest_4:
000029D2  B483      4582          cmp.l     D3,D2
000029D4  6200 0054 4583          bhi       MemoryTest_6
                    4584   ; if(*RamPtr != 0xDEADBEEF){
000029D8  2042      4585          move.l    D2,A0
000029DA  2010      4586          move.l    (A0),D0
000029DC  0C80 DEAD 4587          cmp.l     #-559038737,D0
000029E0  BEEF      
000029E2  6700 0042 4588          beq       MemoryTest_7
                    4589   ; printf("\r\nMemory Test Failed!");
000029E6  4879 0000 4590          pea       @m68kde~1_146.L
000029EA  4908      
000029EC  4E92      4591          jsr       (A2)
000029EE  584F      4592          addq.w    #4,A7
                    4593   ; printf("\r\nAddress = %u", RamPtr) ;
000029F0  2F02      4594          move.l    D2,-(A7)
000029F2  4879 0000 4595          pea       @m68kde~1_147.L
000029F6  491E      
000029F8  4E92      4596          jsr       (A2)
000029FA  504F      4597          addq.w    #8,A7
                    4598   ; printf("\r\nExpected data = %u", 0xDEADBEEF) ;
000029FC  4879 DEAD 4599          pea       -559038737
00002A00  BEEF      
00002A02  4879 0000 4600          pea       @m68kde~1_148.L
00002A06  492E      
00002A08  4E92      4601          jsr       (A2)
00002A0A  504F      4602          addq.w    #8,A7
                    4603   ; printf("\r\nCurrent data = %u", *RamPtr) ;
00002A0C  2042      4604          move.l    D2,A0
00002A0E  2F10      4605          move.l    (A0),-(A7)
00002A10  4879 0000 4606          pea       @m68kde~1_149.L
00002A14  4944      
00002A16  4E92      4607          jsr       (A2)
00002A18  504F      4608          addq.w    #8,A7
                    4609   ; Oline0("Memory Test Failed!");
00002A1A  4879 0000 4610          pea       @m68kde~1_150.L
00002A1E  4958      
00002A20  4E93      4611          jsr       (A3)
00002A22  584F      4612          addq.w    #4,A7
                    4613   ; return;
00002A24  6018      4614          bra.s     MemoryTest_9
                    4615   MemoryTest_7:
00002A26  5882      4616          addq.l    #4,D2
00002A28  60A8      4617          bra       MemoryTest_4
                    4618   MemoryTest_6:
                    4619   ; }
                    4620   ; }
                    4621   ; printf("\r\nMemory Test Successful!") ;
00002A2A  4879 0000 4622          pea       @m68kde~1_151.L
00002A2E  496C      
00002A30  4E92      4623          jsr       (A2)
00002A32  584F      4624          addq.w    #4,A7
                    4625   ; Oline0("Memory Test Passed!");
00002A34  4879 0000 4626          pea       @m68kde~1_152.L
00002A38  4986      
00002A3A  4E93      4627          jsr       (A3)
00002A3C  584F      4628          addq.w    #4,A7
                    4629   ; return;
                    4630   MemoryTest_9:
00002A3E  4CDF 0C1C 4631          movem.l   (A7)+,D2/D3/D4/A2/A3
00002A42  4E75      4632          rts
                    4633   ; }
                    4634   ; void main(void)
                    4635   ; {
                    4636   _main:
00002A44  4E56 FFF0 4637          link      A6,#-16
00002A48  48E7 2030 4638          movem.l   D2/A2/A3,-(A7)
00002A4C  45F8 0A30 4639          lea       _InstallExceptionHandler.L,A2
00002A50  47F9 0000 4640          lea       _printf.L,A3
00002A54  2F1A      
                    4641   ; char c ;
                    4642   ; int i, j ;
                    4643   ; char *BugMessage = "Name= Atahan Akar";
00002A56  41F9 0000 4644          lea       @m68kde~1_153.L,A0
00002A5A  499A      
00002A5C  2D48 FFF8 4645          move.l    A0,-8(A6)
                    4646   ; char *CopyrightMessage = "Student Number = 20301727";
00002A60  41F9 0000 4647          lea       @m68kde~1_154.L,A0
00002A64  49AC      
00002A66  2D48 FFFC 4648          move.l    A0,-4(A6)
                    4649   ; KillAllBreakPoints() ;
00002A6A  4EB8 201E 4650          jsr       _KillAllBreakPoints
                    4651   ; i = x = y = z = PortA_Count = 0;
00002A6E  42B9 0B00 4652          clr.l     _PortA_Count.L
00002A72  00D4      
00002A74  42B9 0B00 4653          clr.l     _z.L
00002A78  00D0      
00002A7A  42B9 0B00 4654          clr.l     _y.L
00002A7E  00CC      
00002A80  42B9 0B00 4655          clr.l     _x.L
00002A84  00C8      
00002A86  4282      4656          clr.l     D2
                    4657   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002A88  42B9 0B00 4658          clr.l     _GoFlag.L
00002A8C  00DC      
00002A8E  42B9 0B00 4659          clr.l     _Trace.L
00002A92  00D8      
                    4660   ; Echo = 1 ;
00002A94  23FC 0000 4661          move.l    #1,_Echo.L
00002A98  0001 0B00 
00002A9C  00E0      
                    4662   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002A9E  42B9 0B00 4663          clr.l     _d7.L
00002AA2  0100      
00002AA4  42B9 0B00 4664          clr.l     _d6.L
00002AA8  00FC      
00002AAA  42B9 0B00 4665          clr.l     _d5.L
00002AAE  00F8      
00002AB0  42B9 0B00 4666          clr.l     _d4.L
00002AB4  00F4      
00002AB6  42B9 0B00 4667          clr.l     _d3.L
00002ABA  00F0      
00002ABC  42B9 0B00 4668          clr.l     _d2.L
00002AC0  00EC      
00002AC2  42B9 0B00 4669          clr.l     _d1.L
00002AC6  00E8      
00002AC8  42B9 0B00 4670          clr.l     _d0.L
00002ACC  00E4      
                    4671   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002ACE  42B9 0B00 4672          clr.l     _a6.L
00002AD2  011C      
00002AD4  42B9 0B00 4673          clr.l     _a5.L
00002AD8  0118      
00002ADA  42B9 0B00 4674          clr.l     _a4.L
00002ADE  0114      
00002AE0  42B9 0B00 4675          clr.l     _a3.L
00002AE4  0110      
00002AE6  42B9 0B00 4676          clr.l     _a2.L
00002AEA  010C      
00002AEC  42B9 0B00 4677          clr.l     _a1.L
00002AF0  0108      
00002AF2  42B9 0B00 4678          clr.l     _a0.L
00002AF6  0104      
                    4679   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002AF8  23FC 0800 4680          move.l    #134217728,_PC.L
00002AFC  0000 0B00 
00002B00  0120      
00002B02  23FC 0C00 4681          move.l    #201326592,_SSP.L
00002B06  0000 0B00 
00002B0A  0124      
00002B0C  23FC 0C00 4682          move.l    #201326592,_USP.L
00002B10  0000 0B00 
00002B14  0128      
                    4683   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002B16  33FC 2000 4684          move.w    #8192,_SR.L
00002B1A  0B00 012C 
                    4685   ; // Initialise Breakpoint variables
                    4686   ; for(i = 0; i < 8; i++)  {
00002B1E  4282      4687          clr.l     D2
                    4688   main_1:
00002B20  0C82 0000 4689          cmp.l     #8,D2
00002B24  0008      
00002B26  6C00 004C 4690          bge       main_3
                    4691   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002B2A  2002      4692          move.l    D2,D0
00002B2C  E588      4693          lsl.l     #2,D0
00002B2E  41F9 0B00 4694          lea       _BreakPointAddress.L,A0
00002B32  012E      
00002B34  42B0 0800 4695          clr.l     0(A0,D0.L)
                    4696   ; WatchPointAddress[i] = 0 ;
00002B38  2002      4697          move.l    D2,D0
00002B3A  E588      4698          lsl.l     #2,D0
00002B3C  41F9 0B00 4699          lea       _WatchPointAddress.L,A0
00002B40  0182      
00002B42  42B0 0800 4700          clr.l     0(A0,D0.L)
                    4701   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002B46  2002      4702          move.l    D2,D0
00002B48  E388      4703          lsl.l     #1,D0
00002B4A  41F9 0B00 4704          lea       _BreakPointInstruction.L,A0
00002B4E  014E      
00002B50  4270 0800 4705          clr.w     0(A0,D0.L)
                    4706   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002B54  2002      4707          move.l    D2,D0
00002B56  E588      4708          lsl.l     #2,D0
00002B58  41F9 0B00 4709          lea       _BreakPointSetOrCleared.L,A0
00002B5C  015E      
00002B5E  42B0 0800 4710          clr.l     0(A0,D0.L)
                    4711   ; WatchPointSetOrCleared[i] = 0;
00002B62  2002      4712          move.l    D2,D0
00002B64  E588      4713          lsl.l     #2,D0
00002B66  41F9 0B00 4714          lea       _WatchPointSetOrCleared.L,A0
00002B6A  01A2      
00002B6C  42B0 0800 4715          clr.l     0(A0,D0.L)
00002B70  5282      4716          addq.l    #1,D2
00002B72  60AC      4717          bra       main_1
                    4718   main_3:
                    4719   ; }
                    4720   ; Init_RS232() ;     // initialise the RS232 port
00002B74  4EB8 0B12 4721          jsr       _Init_RS232
                    4722   ; Init_LCD() ;
00002B78  4EB8 095E 4723          jsr       _Init_LCD
                    4724   ; for( i = 32; i < 48; i++)
00002B7C  7420      4725          moveq     #32,D2
                    4726   main_4:
00002B7E  0C82 0000 4727          cmp.l     #48,D2
00002B82  0030      
00002B84  6C0E      4728          bge.s     main_6
                    4729   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002B86  2F02      4730          move.l    D2,-(A7)
00002B88  4878 2896 4731          pea       _UnhandledTrap.L
00002B8C  4E92      4732          jsr       (A2)
00002B8E  504F      4733          addq.w    #8,A7
00002B90  5282      4734          addq.l    #1,D2
00002B92  60EA      4735          bra       main_4
                    4736   main_6:
                    4737   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002B94  4878 002F 4738          pea       47
00002B98  4878 2570 4739          pea       _menu.L
00002B9C  4E92      4740          jsr       (A2)
00002B9E  504F      4741          addq.w    #8,A7
                    4742   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002BA0  4878 0019 4743          pea       25
00002BA4  4878 283C 4744          pea       _UnhandledIRQ1.L
00002BA8  4E92      4745          jsr       (A2)
00002BAA  504F      4746          addq.w    #8,A7
                    4747   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002BAC  4878 001A 4748          pea       26
00002BB0  4878 2848 4749          pea       _UnhandledIRQ2.L
00002BB4  4E92      4750          jsr       (A2)
00002BB6  504F      4751          addq.w    #8,A7
                    4752   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002BB8  4878 001B 4753          pea       27
00002BBC  4878 2854 4754          pea       _UnhandledIRQ3.L
00002BC0  4E92      4755          jsr       (A2)
00002BC2  504F      4756          addq.w    #8,A7
                    4757   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002BC4  4878 001C 4758          pea       28
00002BC8  4878 2860 4759          pea       _UnhandledIRQ4.L
00002BCC  4E92      4760          jsr       (A2)
00002BCE  504F      4761          addq.w    #8,A7
                    4762   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002BD0  4878 001D 4763          pea       29
00002BD4  4878 286C 4764          pea       _UnhandledIRQ5.L
00002BD8  4E92      4765          jsr       (A2)
00002BDA  504F      4766          addq.w    #8,A7
                    4767   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002BDC  4878 001E 4768          pea       30
00002BE0  4878 2878 4769          pea       _UnhandledIRQ6.L
00002BE4  4E92      4770          jsr       (A2)
00002BE6  504F      4771          addq.w    #8,A7
                    4772   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002BE8  4878 001F 4773          pea       31
00002BEC  4878 288A 4774          pea       _UnhandledIRQ7.L
00002BF0  4E92      4775          jsr       (A2)
00002BF2  504F      4776          addq.w    #8,A7
                    4777   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002BF4  4878 002E 4778          pea       46
00002BF8  4878 22AC 4779          pea       _HandleBreakPoint.L
00002BFC  4E92      4780          jsr       (A2)
00002BFE  504F      4781          addq.w    #8,A7
                    4782   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002C00  4878 001D 4783          pea       29
00002C04  4878 198C 4784          pea       _DumpRegistersandPause.L
00002C08  4E92      4785          jsr       (A2)
00002C0A  504F      4786          addq.w    #8,A7
                    4787   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002C0C  4878 0002 4788          pea       2
00002C10  4878 28A4 4789          pea       _BusError.L
00002C14  4E92      4790          jsr       (A2)
00002C16  504F      4791          addq.w    #8,A7
                    4792   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002C18  4878 0003 4793          pea       3
00002C1C  4878 28B2 4794          pea       _AddressError.L
00002C20  4E92      4795          jsr       (A2)
00002C22  504F      4796          addq.w    #8,A7
                    4797   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002C24  4878 0004 4798          pea       4
00002C28  4878 28C0 4799          pea       _IllegalInstruction.L
00002C2C  4E92      4800          jsr       (A2)
00002C2E  504F      4801          addq.w    #8,A7
                    4802   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002C30  4878 0005 4803          pea       5
00002C34  4878 28CE 4804          pea       _Dividebyzero.L
00002C38  4E92      4805          jsr       (A2)
00002C3A  504F      4806          addq.w    #8,A7
                    4807   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002C3C  4878 0006 4808          pea       6
00002C40  4878 28DC 4809          pea       _Check.L
00002C44  4E92      4810          jsr       (A2)
00002C46  504F      4811          addq.w    #8,A7
                    4812   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002C48  4878 0007 4813          pea       7
00002C4C  4878 28EA 4814          pea       _Trapv.L
00002C50  4E92      4815          jsr       (A2)
00002C52  504F      4816          addq.w    #8,A7
                    4817   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002C54  4878 0008 4818          pea       8
00002C58  4878 28F8 4819          pea       _PrivError.L
00002C5C  4E92      4820          jsr       (A2)
00002C5E  504F      4821          addq.w    #8,A7
                    4822   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002C60  4878 000F 4823          pea       15
00002C64  4878 2906 4824          pea       _UnitIRQ.L
00002C68  4E92      4825          jsr       (A2)
00002C6A  504F      4826          addq.w    #8,A7
                    4827   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002C6C  4878 0018 4828          pea       24
00002C70  4878 28DC 4829          pea       _Check.L
00002C74  4E92      4830          jsr       (A2)
00002C76  504F      4831          addq.w    #8,A7
                    4832   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002C78  4EB8 0BA6 4833          jsr       _FlushKeyboard
                    4834   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002C7C  4239 0040 4835          clr.b     4194314
00002C80  000A      
                    4836   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4837   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4838   main_7:
00002C82  1039 0040 4839          move.b    4194306,D0
00002C86  0002      
00002C88  C03C 0002 4840          and.b     #2,D0
00002C8C  0C00 0002 4841          cmp.b     #2,D0
00002C90  662A      4842          bne.s     main_9
                    4843   ; LoadFromFlashChip();
00002C92  4EB8 141E 4844          jsr       _LoadFromFlashChip
                    4845   ; printf("\r\nRunning.....") ;
00002C96  4879 0000 4846          pea       @m68kde~1_155.L
00002C9A  49C6      
00002C9C  4E93      4847          jsr       (A3)
00002C9E  584F      4848          addq.w    #4,A7
                    4849   ; Oline1("Running.....") ;
00002CA0  4879 0000 4850          pea       @m68kde~1_156.L
00002CA4  49D6      
00002CA6  4EB8 0A02 4851          jsr       _Oline1
00002CAA  584F      4852          addq.w    #4,A7
                    4853   ; GoFlag = 1;
00002CAC  23FC 0000 4854          move.l    #1,_GoFlag.L
00002CB0  0001 0B00 
00002CB4  00DC      
                    4855   ; go() ;
00002CB6  4EB8 08B8 4856          jsr       _go
00002CBA  60C6      4857          bra       main_7
                    4858   main_9:
                    4859   ; }
                    4860   ; // otherwise start the debug monitor
                    4861   ; Oline0(BugMessage) ;
00002CBC  2F2E FFF8 4862          move.l    -8(A6),-(A7)
00002CC0  4EB8 09D4 4863          jsr       _Oline0
00002CC4  584F      4864          addq.w    #4,A7
                    4865   ; Oline1("By: PJ Davies") ;
00002CC6  4879 0000 4866          pea       @m68kde~1_157.L
00002CCA  49E4      
00002CCC  4EB8 0A02 4867          jsr       _Oline1
00002CD0  584F      4868          addq.w    #4,A7
                    4869   ; printf("\r\n%s", "Name= Atahan Akar") ;
00002CD2  4879 0000 4870          pea       @m68kde~1_153.L
00002CD6  499A      
00002CD8  4879 0000 4871          pea       @m68kde~1_158.L
00002CDC  49F2      
00002CDE  4E93      4872          jsr       (A3)
00002CE0  504F      4873          addq.w    #8,A7
                    4874   ; printf("\r\n%s", "Student Number = 20301727") ;
00002CE2  4879 0000 4875          pea       @m68kde~1_154.L
00002CE6  49AC      
00002CE8  4879 0000 4876          pea       @m68kde~1_158.L
00002CEC  49F2      
00002CEE  4E93      4877          jsr       (A3)
00002CF0  504F      4878          addq.w    #8,A7
                    4879   ; printf("\r\n%s", "Name= Songzhu Zhang") ;
00002CF2  4879 0000 4880          pea       @m68kde~1_159.L
00002CF6  49F8      
00002CF8  4879 0000 4881          pea       @m68kde~1_158.L
00002CFC  49F2      
00002CFE  4E93      4882          jsr       (A3)
00002D00  504F      4883          addq.w    #8,A7
                    4884   ; printf("\r\n%s", "Student Number = 10616167") ;
00002D02  4879 0000 4885          pea       @m68kde~1_160.L
00002D06  4A0C      
00002D08  4879 0000 4886          pea       @m68kde~1_158.L
00002D0C  49F2      
00002D0E  4E93      4887          jsr       (A3)
00002D10  504F      4888          addq.w    #8,A7
                    4889   ; menu();
00002D12  4EB8 2570 4890          jsr       _menu
00002D16  4CDF 0C04 4891          movem.l   (A7)+,D2/A2/A3
00002D1A  4E5E      4892          unlk      A6
00002D1C  4E75      4893          rts
                    4894   ; }
                    4895   _strcpy:
00002D1E  206F 0004 4896          move.l    (4,A7),A0
00002D22  226F 0008 4897          move.l    (8,A7),A1
00002D26  2008      4898          move.l    A0,D0
                    4899   strcpy_1:
00002D28  10D9      4900          move.b    (A1)+,(A0)+
00002D2A  66FC      4901          bne       strcpy_1
00002D2C  4E75      4902          rts
                    4903   ULDIV:
00002D2E  4E56 0000 4904          link    A6,#0
00002D32  48E7 C000 4905          movem.l D0/D1,-(A7)
00002D36  222E 0008 4906          move.l  8(A6),D1
00002D3A  202E 000C 4907          move.l  12(A6),D0
00002D3E  6036      4908          bra.s   ldiv_3
                    4909   LDIV:
00002D40  4E56 0000 4910          link    A6,#0
00002D44  48E7 C000 4911          movem.l D0/D1,-(A7)
00002D48  222E 0008 4912          move.l  8(A6),D1
00002D4C  202E 000C 4913          move.l  12(A6),D0
00002D50  4A80      4914          tst.l   D0
00002D52  6A0E      4915          bpl.s   ldiv_1
00002D54  4480      4916          neg.l   D0
00002D56  4A81      4917          tst.l   D1
00002D58  6A14      4918          bpl.s   ldiv_2
00002D5A  4481      4919          neg.l   D1
00002D5C  612A      4920          bsr.s   dodiv
00002D5E  4481      4921          neg.l   D1
00002D60  6016      4922          bra.s   ldiv_4
                    4923   ldiv_1:
00002D62  4A81      4924          tst.l   D1
00002D64  6A10      4925          bpl.s   ldiv_3
00002D66  4481      4926          neg.l   D1
00002D68  611E      4927          bsr.s   dodiv
00002D6A  4480      4928          neg.l   D0
00002D6C  600A      4929          bra.s   ldiv_4
                    4930   ldiv_2:
00002D6E  6118      4931          bsr.s   dodiv
00002D70  4480      4932          neg.l   D0
00002D72  4481      4933          neg.l   D1
00002D74  6002      4934          bra.s   ldiv_4
                    4935   ldiv_3:
00002D76  6110      4936          bsr.s   dodiv
                    4937   ldiv_4:
00002D78  2D40 0008 4938          move.l  D0,8(A6)
00002D7C  2D41 000C 4939          move.l  D1,12(A6)
00002D80  4CDF 0003 4940          movem.l (A7)+,D0/D1
00002D84  4E5E      4941          unlk    A6
00002D86  4E75      4942          rts
                    4943   dodiv:
00002D88  0C81 0000 4944          cmpi.l  #$FFFF,D1
00002D8C  FFFF      
00002D8E  6236      4945          bhi.s   dodiv_2
00002D90  0C80 0000 4946          cmpi.l  #$FFFF,D0
00002D94  FFFF      
00002D96  6210      4947          bhi.s   dodiv_1
00002D98  80C1      4948          divu    D1,D0
00002D9A  2200      4949          move.l  D0,D1
00002D9C  4241      4950          clr.w   D1
00002D9E  4841      4951          swap    D1
00002DA0  0280 0000 4952          andi.l  #$FFFF,D0
00002DA4  FFFF      
00002DA6  4E75      4953          rts
                    4954   dodiv_1:
00002DA8  48A7 A000 4955          movem.w D0/D2,-(A7)
00002DAC  4240      4956          clr.w   D0
00002DAE  4840      4957          swap    D0
00002DB0  80C1      4958          divu    D1,D0
00002DB2  3400      4959          move.w  D0,D2
00002DB4  301F      4960          move.w  (A7)+,D0
00002DB6  80C1      4961          divu    D1,D0
00002DB8  4840      4962          swap    D0
00002DBA  4281      4963          clr.l   D1
00002DBC  3200      4964          move.w  D0,D1
00002DBE  3002      4965          move.w  D2,D0
00002DC0  4840      4966          swap    D0
00002DC2  341F      4967          move.w  (A7)+,D2
00002DC4  4E75      4968          rts
                    4969   dodiv_2:
00002DC6  48E7 3800 4970          movem.l D2/D3/D4,-(A7)
00002DCA  2401      4971          move.l  D1,D2
00002DCC  4242      4972          clr.w   D2
00002DCE  4842      4973          swap    D2
00002DD0  5282      4974          addq.l  #1,D2
00002DD2  2600      4975          move.l  D0,D3
00002DD4  2801      4976          move.l  D1,D4
00002DD6  2202      4977          move.l  D2,D1
00002DD8  61CE      4978          bsr.s   dodiv_1
00002DDA  2204      4979          move.l  D4,D1
00002DDC  82C2      4980          divu    D2,D1
00002DDE  80C1      4981          divu    D1,D0
00002DE0  0280 0000 4982          andi.l  #$FFFF,D0
00002DE4  FFFF      
                    4983   dodiv_3:
00002DE6  2204      4984          move.l  D4,D1
00002DE8  2404      4985          move.l  D4,D2
00002DEA  4842      4986          swap    D2
00002DEC  C2C0      4987          mulu    D0,D1
00002DEE  C4C0      4988          mulu    D0,D2
00002DF0  4842      4989          swap    D2
00002DF2  D282      4990          add.l   D2,D1
00002DF4  9283      4991          sub.l   D3,D1
00002DF6  620A      4992          bhi.s   dodiv_4
00002DF8  4481      4993          neg.l   D1
00002DFA  B881      4994          cmp.l   D1,D4
00002DFC  6208      4995          bhi.s   dodiv_5
00002DFE  5280      4996          addq.l  #1,D0
00002E00  60E4      4997          bra.s   dodiv_3
                    4998   dodiv_4:
00002E02  5380      4999          subq.l  #1,D0
00002E04  60E0      5000          bra.s   dodiv_3
                    5001   dodiv_5:
00002E06  4CDF 001C 5002          movem.l (A7)+,D2/D3/D4
00002E0A  4E75      5003          rts
                    5004   _putch:
00002E0C  4E56 0000 5005          link      A6,#0
00002E10  48E7 2000 5006          movem.l   D2,-(A7)
00002E14  242E 0008 5007          move.l    8(A6),D2
00002E18  0C82 0000 5008          cmp.l     #10,D2
00002E1C  000A      
00002E1E  660A      5009          bne.s     putch_1
00002E20  4878 000D 5010          pea       13
00002E24  6100 DD16 5011          bsr       __putch
00002E28  584F      5012          addq.w    #4,A7
                    5013   putch_1:
00002E2A  2F02      5014          move.l    D2,-(A7)
00002E2C  6100 DD0E 5015          bsr       __putch
00002E30  584F      5016          addq.w    #4,A7
00002E32  2002      5017          move.l    D2,D0
00002E34  4CDF 0004 5018          movem.l   (A7)+,D2
00002E38  4E5E      5019          unlk      A6
00002E3A  4E75      5020          rts
                    5021   _getch:
00002E3C  48E7 2000 5022          movem.l   D2,-(A7)
00002E40  2439 0B00 5023          move.l    __ungetbuf,D2
00002E44  00C0      
00002E46  2039 0B00 5024          move.l    __ungetbuf,D0
00002E4A  00C0      
00002E4C  0C80 FFFF 5025          cmp.l     #-1,D0
00002E50  FFFF      
00002E52  670C      5026          beq.s     getch_1
00002E54  23FC FFFF 5027          move.l    #-1,__ungetbuf
00002E58  FFFF 0B00 
00002E5C  00C0      
00002E5E  6010      5028          bra.s     getch_3
                    5029   getch_1:
00002E60  6100 DD06 5030          bsr       __getch
00002E64  2400      5031          move.l    D0,D2
00002E66  0C80 0000 5032          cmp.l     #13,D0
00002E6A  000D      
00002E6C  6602      5033          bne.s     getch_3
00002E6E  740A      5034          moveq     #10,D2
                    5035   getch_3:
00002E70  2002      5036          move.l    D2,D0
00002E72  4CDF 0004 5037          movem.l   (A7)+,D2
00002E76  4E75      5038          rts
                    5039   _tolower:
00002E78  4E56 0000 5040          link      A6,#0
00002E7C  48E7 2000 5041          movem.l   D2,-(A7)
00002E80  242E 0008 5042          move.l    8(A6),D2
00002E84  0C82 0000 5043          cmp.l     #65,D2
00002E88  0041      
00002E8A  6D0E      5044          blt.s     tolower_1
00002E8C  0C82 0000 5045          cmp.l     #90,D2
00002E90  005A      
00002E92  6E06      5046          bgt.s     tolower_1
00002E94  84BC 0000 5047          or.l      #32,D2
00002E98  0020      
                    5048   tolower_1:
00002E9A  2002      5049          move.l    D2,D0
00002E9C  4CDF 0004 5050          movem.l   (A7)+,D2
00002EA0  4E5E      5051          unlk      A6
00002EA2  4E75      5052          rts
                    5053   _sprintf:
00002EA4  4E56 FFFC 5054          link      A6,#-4
00002EA8  48E7 2000 5055          movem.l   D2,-(A7)
00002EAC  41EE 000C 5056          lea       12(A6),A0
00002EB0  5848      5057          addq.w    #4,A0
00002EB2  2408      5058          move.l    A0,D2
00002EB4  2F02      5059          move.l    D2,-(A7)
00002EB6  2F2E 000C 5060          move.l    12(A6),-(A7)
00002EBA  2F2E 0008 5061          move.l    8(A6),-(A7)
00002EBE  6100 013E 5062          bsr       _vsprintf
00002EC2  DEFC 000C 5063          add.w     #12,A7
00002EC6  2D40 FFFC 5064          move.l    D0,-4(A6)
00002ECA  4282      5065          clr.l     D2
00002ECC  202E FFFC 5066          move.l    -4(A6),D0
00002ED0  4CDF 0004 5067          movem.l   (A7)+,D2
00002ED4  4E5E      5068          unlk      A6
00002ED6  4E75      5069          rts
                    5070   _strcat:
00002ED8  206F 0004 5071          move.l    (4,A7),A0	
00002EDC  226F 0008 5072          move.l    (8,A7),A1	
00002EE0  2008      5073          move.l    A0,D0		
                    5074   strcat_0:
00002EE2  4A18      5075          tst.b     (A0)+
00002EE4  66FC      5076          bne       strcat_0
00002EE6  5348      5077          subq      #1,A0
                    5078   strcat_1:
00002EE8  10D9      5079          move.b    (A1)+,(A0)+
00002EEA  66FC      5080          bne       strcat_1
00002EEC  4E75      5081          rts
                    5082   _toupper:
00002EEE  4E56 0000 5083          link      A6,#0
00002EF2  48E7 2000 5084          movem.l   D2,-(A7)
00002EF6  242E 0008 5085          move.l    8(A6),D2
00002EFA  0C82 0000 5086          cmp.l     #97,D2
00002EFE  0061      
00002F00  6D0E      5087          blt.s     toupper_1
00002F02  0C82 0000 5088          cmp.l     #122,D2
00002F06  007A      
00002F08  6E06      5089          bgt.s     toupper_1
00002F0A  C4BC 0000 5090          and.l     #95,D2
00002F0E  005F      
                    5091   toupper_1:
00002F10  2002      5092          move.l    D2,D0
00002F12  4CDF 0004 5093          movem.l   (A7)+,D2
00002F16  4E5E      5094          unlk      A6
00002F18  4E75      5095          rts
                    5096   _printf:
00002F1A  4E56 FFFC 5097          link      A6,#-4
00002F1E  48E7 2000 5098          movem.l   D2,-(A7)
00002F22  41EE 0008 5099          lea       8(A6),A0
00002F26  5848      5100          addq.w    #4,A0
00002F28  2408      5101          move.l    A0,D2
00002F2A  2F02      5102          move.l    D2,-(A7)
00002F2C  2F2E 0008 5103          move.l    8(A6),-(A7)
00002F30  42A7      5104          clr.l     -(A7)
00002F32  6100 00CA 5105          bsr       _vsprintf
00002F36  DEFC 000C 5106          add.w     #12,A7
00002F3A  2D40 FFFC 5107          move.l    D0,-4(A6)
00002F3E  4282      5108          clr.l     D2
00002F40  202E FFFC 5109          move.l    -4(A6),D0
00002F44  4CDF 0004 5110          movem.l   (A7)+,D2
00002F48  4E5E      5111          unlk      A6
00002F4A  4E75      5112          rts
                    5113   @vsprintf_copy:
00002F4C  4E56 0000 5114          link      A6,#0
00002F50  206E 0008 5115          move.l    8(A6),A0
00002F54  4A90      5116          tst.l     (A0)
00002F56  6710      5117          beq.s     @vsprintf_copy_1
00002F58  202E 000C 5118          move.l    12(A6),D0
00002F5C  206E 0008 5119          move.l    8(A6),A0
00002F60  2250      5120          move.l    (A0),A1
00002F62  5290      5121          addq.l    #1,(A0)
00002F64  1280      5122          move.b    D0,(A1)
00002F66  600A      5123          bra.s     @vsprintf_copy_2
                    5124   @vsprintf_copy_1:
00002F68  2F2E 000C 5125          move.l    12(A6),-(A7)
00002F6C  6100 FE9E 5126          bsr       _putch
00002F70  584F      5127          addq.w    #4,A7
                    5128   @vsprintf_copy_2:
00002F72  4E5E      5129          unlk      A6
00002F74  4E75      5130          rts
                    5131   @vsprintf_getval:
00002F76  4E56 0000 5132          link      A6,#0
00002F7A  48E7 3000 5133          movem.l   D2/D3,-(A7)
00002F7E  242E 0008 5134          move.l    8(A6),D2
00002F82  4283      5135          clr.l     D3
00002F84  2042      5136          move.l    D2,A0
00002F86  2050      5137          move.l    (A0),A0
00002F88  1010      5138          move.b    (A0),D0
00002F8A  4880      5139          ext.w     D0
00002F8C  48C0      5140          ext.l     D0
00002F8E  0C80 0000 5141          cmp.l     #42,D0
00002F92  002A      
00002F94  6612      5142          bne.s     @vsprintf_getval_1
00002F96  206E 000C 5143          move.l    12(A6),A0
00002F9A  2250      5144          move.l    (A0),A1
00002F9C  5890      5145          addq.l    #4,(A0)
00002F9E  2611      5146          move.l    (A1),D3
00002FA0  2042      5147          move.l    D2,A0
00002FA2  5290      5148          addq.l    #1,(A0)
00002FA4  6000 004E 5149          bra       @vsprintf_getval_5
                    5150   @vsprintf_getval_1:
00002FA8  2042      5151          move.l    D2,A0
00002FAA  2050      5152          move.l    (A0),A0
00002FAC  1010      5153          move.b    (A0),D0
00002FAE  4880      5154          ext.w     D0
00002FB0  48C0      5155          ext.l     D0
00002FB2  0C80 0000 5156          cmp.l     #48,D0
00002FB6  0030      
00002FB8  6D00 003A 5157          blt       @vsprintf_getval_5
00002FBC  2042      5158          move.l    D2,A0
00002FBE  2050      5159          move.l    (A0),A0
00002FC0  1010      5160          move.b    (A0),D0
00002FC2  4880      5161          ext.w     D0
00002FC4  48C0      5162          ext.l     D0
00002FC6  0C80 0000 5163          cmp.l     #57,D0
00002FCA  0039      
00002FCC  6E26      5164          bgt.s     @vsprintf_getval_5
00002FCE  2F03      5165          move.l    D3,-(A7)
00002FD0  4878 000A 5166          pea       10
00002FD4  6100 07F4 5167          bsr       LMUL
00002FD8  2017      5168          move.l    (A7),D0
00002FDA  504F      5169          addq.w    #8,A7
00002FDC  2042      5170          move.l    D2,A0
00002FDE  2250      5171          move.l    (A0),A1
00002FE0  5290      5172          addq.l    #1,(A0)
00002FE2  1211      5173          move.b    (A1),D1
00002FE4  4881      5174          ext.w     D1
00002FE6  48C1      5175          ext.l     D1
00002FE8  D081      5176          add.l     D1,D0
00002FEA  0480 0000 5177          sub.l     #48,D0
00002FEE  0030      
00002FF0  2600      5178          move.l    D0,D3
00002FF2  60B4      5179          bra       @vsprintf_getval_1
                    5180   @vsprintf_getval_5:
00002FF4  2003      5181          move.l    D3,D0
00002FF6  4CDF 000C 5182          movem.l   (A7)+,D2/D3
00002FFA  4E5E      5183          unlk      A6
00002FFC  4E75      5184          rts
                    5185   _vsprintf:
00002FFE  4E56 FFCC 5186          link      A6,#-52
00003002  48E7 3F3C 5187          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003006  45EE 0008 5188          lea       8(A6),A2
0000300A  47F8 2F4C 5189          lea       @vsprintf_copy,A3
0000300E  49F9 0000 5190          lea       _ultoa,A4
00003012  3756      
00003014  4286      5191          clr.l     D6
                    5192   vsprintf_1:
00003016  206E 000C 5193          move.l    12(A6),A0
0000301A  4A10      5194          tst.b     (A0)
0000301C  6700 0624 5195          beq       vsprintf_3
00003020  206E 000C 5196          move.l    12(A6),A0
00003024  1010      5197          move.b    (A0),D0
00003026  4880      5198          ext.w     D0
00003028  48C0      5199          ext.l     D0
0000302A  0C80 0000 5200          cmp.l     #37,D0
0000302E  0025      
00003030  671C      5201          beq.s     vsprintf_4
00003032  206E 000C 5202          move.l    12(A6),A0
00003036  52AE 000C 5203          addq.l    #1,12(A6)
0000303A  1210      5204          move.b    (A0),D1
0000303C  4881      5205          ext.w     D1
0000303E  48C1      5206          ext.l     D1
00003040  2F01      5207          move.l    D1,-(A7)
00003042  2F0A      5208          move.l    A2,-(A7)
00003044  4E93      5209          jsr       (A3)
00003046  504F      5210          addq.w    #8,A7
00003048  5286      5211          addq.l    #1,D6
0000304A  6000 05F2 5212          bra       vsprintf_2
                    5213   vsprintf_4:
0000304E  52AE 000C 5214          addq.l    #1,12(A6)
00003052  422E FFD3 5215          clr.b     -45(A6)
00003056  422E FFD2 5216          clr.b     -46(A6)
0000305A  422E FFD0 5217          clr.b     -48(A6)
0000305E  422E FFCF 5218          clr.b     -49(A6)
00003062  422E FFCE 5219          clr.b     -50(A6)
00003066  422E FFCD 5220          clr.b     -51(A6)
0000306A  42AE FFFC 5221          clr.l     -4(A6)
0000306E  7AFF      5222          moveq     #-1,D5
00003070  41EE FFDC 5223          lea       -36(A6),A0
00003074  2608      5224          move.l    A0,D3
00003076  2408      5225          move.l    A0,D2
                    5226   vsprintf_6:
00003078  206E 000C 5227          move.l    12(A6),A0
0000307C  1010      5228          move.b    (A0),D0
0000307E  4880      5229          ext.w     D0
00003080  48C0      5230          ext.l     D0
00003082  0C80 0000 5231          cmp.l     #43,D0
00003086  002B      
00003088  6730      5232          beq.s     vsprintf_12
0000308A  6E18      5233          bgt.s     vsprintf_15
0000308C  0C80 0000 5234          cmp.l     #35,D0
00003090  0023      
00003092  6700 003E 5235          beq       vsprintf_14
00003096  6E00 0046 5236          bgt       vsprintf_9
0000309A  0C80 0000 5237          cmp.l     #32,D0
0000309E  0020      
000030A0  6724      5238          beq.s     vsprintf_13
000030A2  603A      5239          bra.s     vsprintf_9
                    5240   vsprintf_15:
000030A4  0C80 0000 5241          cmp.l     #45,D0
000030A8  002D      
000030AA  6702      5242          beq.s     vsprintf_11
000030AC  6030      5243          bra.s     vsprintf_9
                    5244   vsprintf_11:
000030AE  1D7C 0001 5245          move.b    #1,-51(A6)
000030B2  FFCD      
000030B4  52AE 000C 5246          addq.l    #1,12(A6)
000030B8  6026      5247          bra.s     vsprintf_7
                    5248   vsprintf_12:
000030BA  1D7C 0001 5249          move.b    #1,-50(A6)
000030BE  FFCE      
000030C0  52AE 000C 5250          addq.l    #1,12(A6)
000030C4  601A      5251          bra.s     vsprintf_7
                    5252   vsprintf_13:
000030C6  1D7C 0001 5253          move.b    #1,-49(A6)
000030CA  FFCF      
000030CC  52AE 000C 5254          addq.l    #1,12(A6)
000030D0  600E      5255          bra.s     vsprintf_7
                    5256   vsprintf_14:
000030D2  1D7C 0001 5257          move.b    #1,-48(A6)
000030D6  FFD0      
000030D8  52AE 000C 5258          addq.l    #1,12(A6)
000030DC  6002      5259          bra.s     vsprintf_7
                    5260   vsprintf_9:
000030DE  6002      5261          bra.s     vsprintf_8
                    5262   vsprintf_7:
000030E0  6096      5263          bra       vsprintf_6
                    5264   vsprintf_8:
000030E2  206E 000C 5265          move.l    12(A6),A0
000030E6  1010      5266          move.b    (A0),D0
000030E8  4880      5267          ext.w     D0
000030EA  48C0      5268          ext.l     D0
000030EC  0C80 0000 5269          cmp.l     #48,D0
000030F0  0030      
000030F2  660A      5270          bne.s     vsprintf_16
000030F4  52AE 000C 5271          addq.l    #1,12(A6)
000030F8  1D7C 0001 5272          move.b    #1,-46(A6)
000030FC  FFD2      
                    5273   vsprintf_16:
000030FE  486E 0010 5274          pea       16(A6)
00003102  486E 000C 5275          pea       12(A6)
00003106  6100 FE6E 5276          bsr       @vsprintf_getval
0000310A  504F      5277          addq.w    #8,A7
0000310C  2A40      5278          move.l    D0,A5
0000310E  206E 000C 5279          move.l    12(A6),A0
00003112  1010      5280          move.b    (A0),D0
00003114  4880      5281          ext.w     D0
00003116  48C0      5282          ext.l     D0
00003118  0C80 0000 5283          cmp.l     #46,D0
0000311C  002E      
0000311E  6614      5284          bne.s     vsprintf_18
00003120  52AE 000C 5285          addq.l    #1,12(A6)
00003124  486E 0010 5286          pea       16(A6)
00003128  486E 000C 5287          pea       12(A6)
0000312C  6100 FE48 5288          bsr       @vsprintf_getval
00003130  504F      5289          addq.w    #8,A7
00003132  2A00      5290          move.l    D0,D5
                    5291   vsprintf_18:
00003134  206E 000C 5292          move.l    12(A6),A0
00003138  1010      5293          move.b    (A0),D0
0000313A  4880      5294          ext.w     D0
0000313C  48C0      5295          ext.l     D0
0000313E  0C80 0000 5296          cmp.l     #108,D0
00003142  006C      
00003144  660A      5297          bne.s     vsprintf_20
00003146  52AE 000C 5298          addq.l    #1,12(A6)
0000314A  1D7C 0001 5299          move.b    #1,-45(A6)
0000314E  FFD3      
                    5300   vsprintf_20:
00003150  206E 000C 5301          move.l    12(A6),A0
00003154  1010      5302          move.b    (A0),D0
00003156  4880      5303          ext.w     D0
00003158  48C0      5304          ext.l     D0
0000315A  0C80 0000 5305          cmp.l     #111,D0
0000315E  006F      
00003160  6700 00D4 5306          beq       vsprintf_27
00003164  6E34      5307          bgt.s     vsprintf_33
00003166  0C80 0000 5308          cmp.l     #100,D0
0000316A  0064      
0000316C  6700 0054 5309          beq       vsprintf_24
00003170  6E1C      5310          bgt.s     vsprintf_34
00003172  0C80 0000 5311          cmp.l     #99,D0
00003176  0063      
00003178  6700 012C 5312          beq       vsprintf_30
0000317C  6E00 016A 5313          bgt       vsprintf_22
00003180  0C80 0000 5314          cmp.l     #88,D0
00003184  0058      
00003186  6700 00E6 5315          beq       vsprintf_28
0000318A  6000 015C 5316          bra       vsprintf_22
                    5317   vsprintf_34:
0000318E  0C80 0000 5318          cmp.l     #105,D0
00003192  0069      
00003194  672C      5319          beq.s     vsprintf_24
00003196  6000 0150 5320          bra       vsprintf_22
                    5321   vsprintf_33:
0000319A  0C80 0000 5322          cmp.l     #117,D0
0000319E  0075      
000031A0  6700 005C 5323          beq       vsprintf_26
000031A4  6E0E      5324          bgt.s     vsprintf_35
000031A6  0C80 0000 5325          cmp.l     #115,D0
000031AA  0073      
000031AC  6700 011C 5326          beq       vsprintf_31
000031B0  6000 0136 5327          bra       vsprintf_22
                    5328   vsprintf_35:
000031B4  0C80 0000 5329          cmp.l     #120,D0
000031B8  0078      
000031BA  6700 00B2 5330          beq       vsprintf_28
000031BE  6000 0128 5331          bra       vsprintf_22
                    5332   vsprintf_24:
000031C2  4A2E FFD3 5333          tst.b     -45(A6)
000031C6  671A      5334          beq.s     vsprintf_36
000031C8  4878 000A 5335          pea       10
000031CC  2F03      5336          move.l    D3,-(A7)
000031CE  206E 0010 5337          move.l    16(A6),A0
000031D2  58AE 0010 5338          addq.l    #4,16(A6)
000031D6  2F10      5339          move.l    (A0),-(A7)
000031D8  6100 04F8 5340          bsr       _ltoa
000031DC  DEFC 000C 5341          add.w     #12,A7
000031E0  6018      5342          bra.s     vsprintf_37
                    5343   vsprintf_36:
000031E2  4878 000A 5344          pea       10
000031E6  2F03      5345          move.l    D3,-(A7)
000031E8  206E 0010 5346          move.l    16(A6),A0
000031EC  58AE 0010 5347          addq.l    #4,16(A6)
000031F0  2F10      5348          move.l    (A0),-(A7)
000031F2  6100 04DE 5349          bsr       _ltoa
000031F6  DEFC 000C 5350          add.w     #12,A7
                    5351   vsprintf_37:
000031FA  6000 00FA 5352          bra       vsprintf_23
                    5353   vsprintf_26:
000031FE  4A2E FFD3 5354          tst.b     -45(A6)
00003202  6718      5355          beq.s     vsprintf_38
00003204  4878 000A 5356          pea       10
00003208  2F03      5357          move.l    D3,-(A7)
0000320A  206E 0010 5358          move.l    16(A6),A0
0000320E  58AE 0010 5359          addq.l    #4,16(A6)
00003212  2F10      5360          move.l    (A0),-(A7)
00003214  4E94      5361          jsr       (A4)
00003216  DEFC 000C 5362          add.w     #12,A7
0000321A  6016      5363          bra.s     vsprintf_39
                    5364   vsprintf_38:
0000321C  4878 000A 5365          pea       10
00003220  2F03      5366          move.l    D3,-(A7)
00003222  206E 0010 5367          move.l    16(A6),A0
00003226  58AE 0010 5368          addq.l    #4,16(A6)
0000322A  2F10      5369          move.l    (A0),-(A7)
0000322C  4E94      5370          jsr       (A4)
0000322E  DEFC 000C 5371          add.w     #12,A7
                    5372   vsprintf_39:
00003232  6000 00C2 5373          bra       vsprintf_23
                    5374   vsprintf_27:
00003236  4A2E FFD3 5375          tst.b     -45(A6)
0000323A  6718      5376          beq.s     vsprintf_40
0000323C  4878 0008 5377          pea       8
00003240  2F03      5378          move.l    D3,-(A7)
00003242  206E 0010 5379          move.l    16(A6),A0
00003246  58AE 0010 5380          addq.l    #4,16(A6)
0000324A  2F10      5381          move.l    (A0),-(A7)
0000324C  4E94      5382          jsr       (A4)
0000324E  DEFC 000C 5383          add.w     #12,A7
00003252  6016      5384          bra.s     vsprintf_41
                    5385   vsprintf_40:
00003254  4878 0008 5386          pea       8
00003258  2F03      5387          move.l    D3,-(A7)
0000325A  206E 0010 5388          move.l    16(A6),A0
0000325E  58AE 0010 5389          addq.l    #4,16(A6)
00003262  2F10      5390          move.l    (A0),-(A7)
00003264  4E94      5391          jsr       (A4)
00003266  DEFC 000C 5392          add.w     #12,A7
                    5393   vsprintf_41:
0000326A  6000 008A 5394          bra       vsprintf_23
                    5395   vsprintf_28:
0000326E  4A2E FFD3 5396          tst.b     -45(A6)
00003272  6718      5397          beq.s     vsprintf_42
00003274  4878 0010 5398          pea       16
00003278  2F03      5399          move.l    D3,-(A7)
0000327A  206E 0010 5400          move.l    16(A6),A0
0000327E  58AE 0010 5401          addq.l    #4,16(A6)
00003282  2F10      5402          move.l    (A0),-(A7)
00003284  4E94      5403          jsr       (A4)
00003286  DEFC 000C 5404          add.w     #12,A7
0000328A  6016      5405          bra.s     vsprintf_43
                    5406   vsprintf_42:
0000328C  4878 0010 5407          pea       16
00003290  2F03      5408          move.l    D3,-(A7)
00003292  206E 0010 5409          move.l    16(A6),A0
00003296  58AE 0010 5410          addq.l    #4,16(A6)
0000329A  2F10      5411          move.l    (A0),-(A7)
0000329C  4E94      5412          jsr       (A4)
0000329E  DEFC 000C 5413          add.w     #12,A7
                    5414   vsprintf_43:
000032A2  6000 0052 5415          bra       vsprintf_23
                    5416   vsprintf_30:
000032A6  206E 0010 5417          move.l    16(A6),A0
000032AA  58AE 0010 5418          addq.l    #4,16(A6)
000032AE  2010      5419          move.l    (A0),D0
000032B0  2042      5420          move.l    D2,A0
000032B2  5282      5421          addq.l    #1,D2
000032B4  1080      5422          move.b    D0,(A0)
000032B6  2042      5423          move.l    D2,A0
000032B8  4210      5424          clr.b     (A0)
000032BA  200D      5425          move.l    A5,D0
000032BC  6704      5426          beq.s     vsprintf_44
000032BE  200D      5427          move.l    A5,D0
000032C0  6002      5428          bra.s     vsprintf_45
                    5429   vsprintf_44:
000032C2  7001      5430          moveq     #1,D0
                    5431   vsprintf_45:
000032C4  2A00      5432          move.l    D0,D5
000032C6  6000 002E 5433          bra       vsprintf_23
                    5434   vsprintf_31:
000032CA  206E 0010 5435          move.l    16(A6),A0
000032CE  58AE 0010 5436          addq.l    #4,16(A6)
000032D2  2610      5437          move.l    (A0),D3
000032D4  0C85 FFFF 5438          cmp.l     #-1,D5
000032D8  FFFF      
000032DA  660A      5439          bne.s     vsprintf_46
000032DC  2F03      5440          move.l    D3,-(A7)
000032DE  6100 0578 5441          bsr       _strlen
000032E2  584F      5442          addq.w    #4,A7
000032E4  2A00      5443          move.l    D0,D5
                    5444   vsprintf_46:
000032E6  600E      5445          bra.s     vsprintf_23
                    5446   vsprintf_22:
000032E8  206E 000C 5447          move.l    12(A6),A0
000032EC  2242      5448          move.l    D2,A1
000032EE  5282      5449          addq.l    #1,D2
000032F0  1290      5450          move.b    (A0),(A1)
000032F2  2042      5451          move.l    D2,A0
000032F4  4210      5452          clr.b     (A0)
                    5453   vsprintf_23:
000032F6  2F03      5454          move.l    D3,-(A7)
000032F8  6100 055E 5455          bsr       _strlen
000032FC  584F      5456          addq.w    #4,A7
000032FE  1800      5457          move.b    D0,D4
00003300  206E 000C 5458          move.l    12(A6),A0
00003304  1010      5459          move.b    (A0),D0
00003306  4880      5460          ext.w     D0
00003308  48C0      5461          ext.l     D0
0000330A  0C80 0000 5462          cmp.l     #115,D0
0000330E  0073      
00003310  6618      5463          bne.s     vsprintf_48
00003312  0C85 0000 5464          cmp.l     #0,D5
00003316  0000      
00003318  6D10      5465          blt.s     vsprintf_48
0000331A  4884      5466          ext.w     D4
0000331C  48C4      5467          ext.l     D4
0000331E  B885      5468          cmp.l     D5,D4
00003320  6F04      5469          ble.s     vsprintf_50
00003322  1005      5470          move.b    D5,D0
00003324  6002      5471          bra.s     vsprintf_51
                    5472   vsprintf_50:
00003326  1004      5473          move.b    D4,D0
                    5474   vsprintf_51:
00003328  1800      5475          move.b    D0,D4
                    5476   vsprintf_48:
0000332A  206E 000C 5477          move.l    12(A6),A0
0000332E  1010      5478          move.b    (A0),D0
00003330  4880      5479          ext.w     D0
00003332  48C0      5480          ext.l     D0
00003334  0C80 0000 5481          cmp.l     #88,D0
00003338  0058      
0000333A  6600 0026 5482          bne       vsprintf_56
0000333E  41EE FFDC 5483          lea       -36(A6),A0
00003342  2408      5484          move.l    A0,D2
                    5485   vsprintf_54:
00003344  2042      5486          move.l    D2,A0
00003346  4A10      5487          tst.b     (A0)
00003348  6718      5488          beq.s     vsprintf_56
0000334A  2042      5489          move.l    D2,A0
0000334C  1210      5490          move.b    (A0),D1
0000334E  4881      5491          ext.w     D1
00003350  48C1      5492          ext.l     D1
00003352  2F01      5493          move.l    D1,-(A7)
00003354  6100 FB98 5494          bsr       _toupper
00003358  584F      5495          addq.w    #4,A7
0000335A  2042      5496          move.l    D2,A0
0000335C  1080      5497          move.b    D0,(A0)
0000335E  5282      5498          addq.l    #1,D2
00003360  60E2      5499          bra       vsprintf_54
                    5500   vsprintf_56:
00003362  7E00      5501          moveq     #0,D7
00003364  41EE FFD4 5502          lea       -44(A6),A0
00003368  2408      5503          move.l    A0,D2
0000336A  206E 000C 5504          move.l    12(A6),A0
0000336E  1010      5505          move.b    (A0),D0
00003370  4880      5506          ext.w     D0
00003372  48C0      5507          ext.l     D0
00003374  0C80 0000 5508          cmp.l     #100,D0
00003378  0064      
0000337A  6714      5509          beq.s     vsprintf_59
0000337C  206E 000C 5510          move.l    12(A6),A0
00003380  1010      5511          move.b    (A0),D0
00003382  4880      5512          ext.w     D0
00003384  48C0      5513          ext.l     D0
00003386  0C80 0000 5514          cmp.l     #105,D0
0000338A  0069      
0000338C  6600 0076 5515          bne       vsprintf_65
                    5516   vsprintf_59:
00003390  4A2E FFCE 5517          tst.b     -50(A6)
00003394  6612      5518          bne.s     vsprintf_62
00003396  2043      5519          move.l    D3,A0
00003398  1010      5520          move.b    (A0),D0
0000339A  4880      5521          ext.w     D0
0000339C  48C0      5522          ext.l     D0
0000339E  0C80 0000 5523          cmp.l     #45,D0
000033A2  002D      
000033A4  6600 002E 5524          bne       vsprintf_60
                    5525   vsprintf_62:
000033A8  2043      5526          move.l    D3,A0
000033AA  1010      5527          move.b    (A0),D0
000033AC  4880      5528          ext.w     D0
000033AE  48C0      5529          ext.l     D0
000033B0  0C80 0000 5530          cmp.l     #45,D0
000033B4  002D      
000033B6  660E      5531          bne.s     vsprintf_63
000033B8  2043      5532          move.l    D3,A0
000033BA  5283      5533          addq.l    #1,D3
000033BC  2242      5534          move.l    D2,A1
000033BE  5282      5535          addq.l    #1,D2
000033C0  1290      5536          move.b    (A0),(A1)
000033C2  5304      5537          subq.b    #1,D4
000033C4  6008      5538          bra.s     vsprintf_64
                    5539   vsprintf_63:
000033C6  2042      5540          move.l    D2,A0
000033C8  5282      5541          addq.l    #1,D2
000033CA  10BC 002B 5542          move.b    #43,(A0)
                    5543   vsprintf_64:
000033CE  5287      5544          addq.l    #1,D7
000033D0  6000 0032 5545          bra       vsprintf_65
                    5546   vsprintf_60:
000033D4  4A2E FFCF 5547          tst.b     -49(A6)
000033D8  6700 002A 5548          beq       vsprintf_65
000033DC  2043      5549          move.l    D3,A0
000033DE  1010      5550          move.b    (A0),D0
000033E0  4880      5551          ext.w     D0
000033E2  48C0      5552          ext.l     D0
000033E4  0C80 0000 5553          cmp.l     #45,D0
000033E8  002D      
000033EA  660E      5554          bne.s     vsprintf_67
000033EC  2043      5555          move.l    D3,A0
000033EE  5283      5556          addq.l    #1,D3
000033F0  2242      5557          move.l    D2,A1
000033F2  5282      5558          addq.l    #1,D2
000033F4  1290      5559          move.b    (A0),(A1)
000033F6  5304      5560          subq.b    #1,D4
000033F8  6008      5561          bra.s     vsprintf_68
                    5562   vsprintf_67:
000033FA  2042      5563          move.l    D2,A0
000033FC  5282      5564          addq.l    #1,D2
000033FE  10BC 0020 5565          move.b    #32,(A0)
                    5566   vsprintf_68:
00003402  5287      5567          addq.l    #1,D7
                    5568   vsprintf_65:
00003404  4A2E FFD0 5569          tst.b     -48(A6)
00003408  6700 0066 5570          beq       vsprintf_77
0000340C  206E 000C 5571          move.l    12(A6),A0
00003410  1010      5572          move.b    (A0),D0
00003412  4880      5573          ext.w     D0
00003414  48C0      5574          ext.l     D0
00003416  0C80 0000 5575          cmp.l     #111,D0
0000341A  006F      
0000341C  671A      5576          beq.s     vsprintf_73
0000341E  6E0C      5577          bgt.s     vsprintf_76
00003420  0C80 0000 5578          cmp.l     #88,D0
00003424  0058      
00003426  6710      5579          beq.s     vsprintf_73
00003428  6000 0046 5580          bra       vsprintf_77
                    5581   vsprintf_76:
0000342C  0C80 0000 5582          cmp.l     #120,D0
00003430  0078      
00003432  6704      5583          beq.s     vsprintf_73
00003434  6000 003A 5584          bra       vsprintf_77
                    5585   vsprintf_73:
00003438  2042      5586          move.l    D2,A0
0000343A  5282      5587          addq.l    #1,D2
0000343C  10BC 0030 5588          move.b    #48,(A0)
00003440  5287      5589          addq.l    #1,D7
00003442  206E 000C 5590          move.l    12(A6),A0
00003446  1010      5591          move.b    (A0),D0
00003448  4880      5592          ext.w     D0
0000344A  48C0      5593          ext.l     D0
0000344C  0C80 0000 5594          cmp.l     #120,D0
00003450  0078      
00003452  6712      5595          beq.s     vsprintf_79
00003454  206E 000C 5596          move.l    12(A6),A0
00003458  1010      5597          move.b    (A0),D0
0000345A  4880      5598          ext.w     D0
0000345C  48C0      5599          ext.l     D0
0000345E  0C80 0000 5600          cmp.l     #88,D0
00003462  0058      
00003464  660A      5601          bne.s     vsprintf_77
                    5602   vsprintf_79:
00003466  2042      5603          move.l    D2,A0
00003468  5282      5604          addq.l    #1,D2
0000346A  10BC 0078 5605          move.b    #120,(A0)
0000346E  5287      5606          addq.l    #1,D7
                    5607   vsprintf_77:
00003470  2042      5608          move.l    D2,A0
00003472  4210      5609          clr.b     (A0)
00003474  206E 000C 5610          move.l    12(A6),A0
00003478  1010      5611          move.b    (A0),D0
0000347A  4880      5612          ext.w     D0
0000347C  48C0      5613          ext.l     D0
0000347E  0C80 0000 5614          cmp.l     #105,D0
00003482  0069      
00003484  6700 0076 5615          beq       vsprintf_82
00003488  6E42      5616          bgt.s     vsprintf_93
0000348A  0C80 0000 5617          cmp.l     #99,D0
0000348E  0063      
00003490  6700 0084 5618          beq       vsprintf_96
00003494  6E1C      5619          bgt.s     vsprintf_94
00003496  0C80 0000 5620          cmp.l     #88,D0
0000349A  0058      
0000349C  6700 005E 5621          beq       vsprintf_82
000034A0  6E00 0184 5622          bgt       vsprintf_80
000034A4  0C80 0000 5623          cmp.l     #69,D0
000034A8  0045      
000034AA  6700 0050 5624          beq       vsprintf_82
000034AE  6000 0176 5625          bra       vsprintf_80
                    5626   vsprintf_94:
000034B2  0C80 0000 5627          cmp.l     #101,D0
000034B6  0065      
000034B8  6700 0042 5628          beq       vsprintf_82
000034BC  6E00 0168 5629          bgt       vsprintf_80
000034C0  0C80 0000 5630          cmp.l     #100,D0
000034C4  0064      
000034C6  6734      5631          beq.s     vsprintf_82
000034C8  6000 015C 5632          bra       vsprintf_80
                    5633   vsprintf_93:
000034CC  0C80 0000 5634          cmp.l     #117,D0
000034D0  0075      
000034D2  6728      5635          beq.s     vsprintf_82
000034D4  6E1A      5636          bgt.s     vsprintf_95
000034D6  0C80 0000 5637          cmp.l     #115,D0
000034DA  0073      
000034DC  6700 0038 5638          beq       vsprintf_96
000034E0  6E00 0144 5639          bgt       vsprintf_80
000034E4  0C80 0000 5640          cmp.l     #111,D0
000034E8  006F      
000034EA  6710      5641          beq.s     vsprintf_82
000034EC  6000 0138 5642          bra       vsprintf_80
                    5643   vsprintf_95:
000034F0  0C80 0000 5644          cmp.l     #120,D0
000034F4  0078      
000034F6  6704      5645          beq.s     vsprintf_82
000034F8  6000 012C 5646          bra       vsprintf_80
                    5647   vsprintf_82:
000034FC  4A2E FFD2 5648          tst.b     -46(A6)
00003500  6714      5649          beq.s     vsprintf_96
00003502  4A2E FFCD 5650          tst.b     -51(A6)
00003506  660E      5651          bne.s     vsprintf_96
00003508  200D      5652          move.l    A5,D0
0000350A  9087      5653          sub.l     D7,D0
0000350C  4884      5654          ext.w     D4
0000350E  48C4      5655          ext.l     D4
00003510  9084      5656          sub.l     D4,D0
00003512  2D40 FFFC 5657          move.l    D0,-4(A6)
                    5658   vsprintf_96:
00003516  202E FFFC 5659          move.l    -4(A6),D0
0000351A  0C80 0000 5660          cmp.l     #0,D0
0000351E  0000      
00003520  6C04      5661          bge.s     vsprintf_98
00003522  42AE FFFC 5662          clr.l     -4(A6)
                    5663   vsprintf_98:
00003526  4A2E FFCD 5664          tst.b     -51(A6)
0000352A  6600 0030 5665          bne       vsprintf_104
0000352E  4884      5666          ext.w     D4
00003530  48C4      5667          ext.l     D4
00003532  2004      5668          move.l    D4,D0
00003534  D0AE FFFC 5669          add.l     -4(A6),D0
00003538  D087      5670          add.l     D7,D0
0000353A  1D40 FFD1 5671          move.b    D0,-47(A6)
                    5672   vsprintf_102:
0000353E  102E FFD1 5673          move.b    -47(A6),D0
00003542  4880      5674          ext.w     D0
00003544  48C0      5675          ext.l     D0
00003546  220D      5676          move.l    A5,D1
00003548  534D      5677          subq.w    #1,A5
0000354A  B081      5678          cmp.l     D1,D0
0000354C  6C0E      5679          bge.s     vsprintf_104
0000354E  4878 0020 5680          pea       32
00003552  2F0A      5681          move.l    A2,-(A7)
00003554  4E93      5682          jsr       (A3)
00003556  504F      5683          addq.w    #8,A7
00003558  5286      5684          addq.l    #1,D6
0000355A  60E2      5685          bra       vsprintf_102
                    5686   vsprintf_104:
0000355C  41EE FFD4 5687          lea       -44(A6),A0
00003560  2408      5688          move.l    A0,D2
                    5689   vsprintf_105:
00003562  2042      5690          move.l    D2,A0
00003564  4A10      5691          tst.b     (A0)
00003566  6716      5692          beq.s     vsprintf_107
00003568  2042      5693          move.l    D2,A0
0000356A  5282      5694          addq.l    #1,D2
0000356C  1210      5695          move.b    (A0),D1
0000356E  4881      5696          ext.w     D1
00003570  48C1      5697          ext.l     D1
00003572  2F01      5698          move.l    D1,-(A7)
00003574  2F0A      5699          move.l    A2,-(A7)
00003576  4E93      5700          jsr       (A3)
00003578  504F      5701          addq.w    #8,A7
0000357A  5286      5702          addq.l    #1,D6
0000357C  60E4      5703          bra       vsprintf_105
                    5704   vsprintf_107:
0000357E  202E FFFC 5705          move.l    -4(A6),D0
00003582  1D40 FFD1 5706          move.b    D0,-47(A6)
                    5707   vsprintf_108:
00003586  102E FFD1 5708          move.b    -47(A6),D0
0000358A  532E FFD1 5709          subq.b    #1,-47(A6)
0000358E  4A00      5710          tst.b     D0
00003590  670E      5711          beq.s     vsprintf_110
00003592  4878 0030 5712          pea       48
00003596  2F0A      5713          move.l    A2,-(A7)
00003598  4E93      5714          jsr       (A3)
0000359A  504F      5715          addq.w    #8,A7
0000359C  5286      5716          addq.l    #1,D6
0000359E  60E6      5717          bra       vsprintf_108
                    5718   vsprintf_110:
000035A0  2043      5719          move.l    D3,A0
000035A2  4A10      5720          tst.b     (A0)
000035A4  6700 0048 5721          beq       vsprintf_113
000035A8  206E 000C 5722          move.l    12(A6),A0
000035AC  1010      5723          move.b    (A0),D0
000035AE  4880      5724          ext.w     D0
000035B0  48C0      5725          ext.l     D0
000035B2  0C80 0000 5726          cmp.l     #115,D0
000035B6  0073      
000035B8  670C      5727          beq.s     vsprintf_116
000035BA  6E18      5728          bgt.s     vsprintf_119
000035BC  0C80 0000 5729          cmp.l     #99,D0
000035C0  0063      
000035C2  6702      5730          beq.s     vsprintf_116
000035C4  600E      5731          bra.s     vsprintf_119
                    5732   vsprintf_116:
000035C6  2005      5733          move.l    D5,D0
000035C8  5385      5734          subq.l    #1,D5
000035CA  0C80 0000 5735          cmp.l     #0,D0
000035CE  0000      
000035D0  6E02      5736          bgt.s     vsprintf_119
000035D2  6016      5737          bra.s     vsprintf_115
                    5738   vsprintf_119:
000035D4  2043      5739          move.l    D3,A0
000035D6  5283      5740          addq.l    #1,D3
000035D8  1210      5741          move.b    (A0),D1
000035DA  4881      5742          ext.w     D1
000035DC  48C1      5743          ext.l     D1
000035DE  2F01      5744          move.l    D1,-(A7)
000035E0  2F0A      5745          move.l    A2,-(A7)
000035E2  4E93      5746          jsr       (A3)
000035E4  504F      5747          addq.w    #8,A7
000035E6  5286      5748          addq.l    #1,D6
000035E8  6002      5749          bra.s     vsprintf_112
                    5750   vsprintf_115:
000035EA  6002      5751          bra.s     vsprintf_113
                    5752   vsprintf_112:
000035EC  60B2      5753          bra       vsprintf_110
                    5754   vsprintf_113:
000035EE  4A2E FFCD 5755          tst.b     -51(A6)
000035F2  6700 0030 5756          beq       vsprintf_125
000035F6  4884      5757          ext.w     D4
000035F8  48C4      5758          ext.l     D4
000035FA  2004      5759          move.l    D4,D0
000035FC  D0AE FFFC 5760          add.l     -4(A6),D0
00003600  D087      5761          add.l     D7,D0
00003602  1D40 FFD1 5762          move.b    D0,-47(A6)
                    5763   vsprintf_123:
00003606  102E FFD1 5764          move.b    -47(A6),D0
0000360A  4880      5765          ext.w     D0
0000360C  48C0      5766          ext.l     D0
0000360E  220D      5767          move.l    A5,D1
00003610  534D      5768          subq.w    #1,A5
00003612  B081      5769          cmp.l     D1,D0
00003614  6C0E      5770          bge.s     vsprintf_125
00003616  4878 0020 5771          pea       32
0000361A  2F0A      5772          move.l    A2,-(A7)
0000361C  4E93      5773          jsr       (A3)
0000361E  504F      5774          addq.w    #8,A7
00003620  5386      5775          subq.l    #1,D6
00003622  60E2      5776          bra       vsprintf_123
                    5777   vsprintf_125:
00003624  6014      5778          bra.s     vsprintf_81
                    5779   vsprintf_80:
00003626  206E 000C 5780          move.l    12(A6),A0
0000362A  1210      5781          move.b    (A0),D1
0000362C  4881      5782          ext.w     D1
0000362E  48C1      5783          ext.l     D1
00003630  2F01      5784          move.l    D1,-(A7)
00003632  2F0A      5785          move.l    A2,-(A7)
00003634  4E93      5786          jsr       (A3)
00003636  504F      5787          addq.w    #8,A7
00003638  5286      5788          addq.l    #1,D6
                    5789   vsprintf_81:
0000363A  52AE 000C 5790          addq.l    #1,12(A6)
                    5791   vsprintf_2:
0000363E  6000 F9D6 5792          bra       vsprintf_1
                    5793   vsprintf_3:
00003642  4A92      5794          tst.l     (A2)
00003644  6710      5795          beq.s     vsprintf_126
00003646  4201      5796          clr.b     D1
00003648  C2BC 0000 5797          and.l     #255,D1
0000364C  00FF      
0000364E  2F01      5798          move.l    D1,-(A7)
00003650  2F0A      5799          move.l    A2,-(A7)
00003652  4E93      5800          jsr       (A3)
00003654  504F      5801          addq.w    #8,A7
                    5802   vsprintf_126:
00003656  2006      5803          move.l    D6,D0
00003658  4CDF 3CFC 5804          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000365C  4E5E      5805          unlk      A6
0000365E  4E75      5806          rts
                    5807   @itoa_convert:
00003660  4E56 0000 5808          link      A6,#0
00003664  48E7 3C00 5809          movem.l   D2/D3/D4/D5,-(A7)
00003668  242E 0008 5810          move.l    8(A6),D2
0000366C  262E 0010 5811          move.l    16(A6),D3
00003670  2A2E 000C 5812          move.l    12(A6),D5
00003674  2F05      5813          move.l    D5,-(A7)
00003676  2F03      5814          move.l    D3,-(A7)
00003678  6100 F6B4 5815          bsr       ULDIV
0000367C  202F 0004 5816          move.l    4(A7),D0
00003680  504F      5817          addq.w    #8,A7
00003682  2800      5818          move.l    D0,D4
00003684  BA83      5819          cmp.l     D3,D5
00003686  651A      5820          blo.s     @itoa_convert_1
00003688  2F03      5821          move.l    D3,-(A7)
0000368A  2F05      5822          move.l    D5,-(A7)
0000368C  2F03      5823          move.l    D3,-(A7)
0000368E  6100 F69E 5824          bsr       ULDIV
00003692  2217      5825          move.l    (A7),D1
00003694  504F      5826          addq.w    #8,A7
00003696  2F01      5827          move.l    D1,-(A7)
00003698  2F02      5828          move.l    D2,-(A7)
0000369A  61C4      5829          bsr       @itoa_convert
0000369C  DEFC 000C 5830          add.w     #12,A7
000036A0  2400      5831          move.l    D0,D2
                    5832   @itoa_convert_1:
000036A2  0C84 0000 5833          cmp.l     #9,D4
000036A6  0009      
000036A8  6E0A      5834          bgt.s     @itoa_convert_3
000036AA  2004      5835          move.l    D4,D0
000036AC  0680 0000 5836          add.l     #48,D0
000036B0  0030      
000036B2  600E      5837          bra.s     @itoa_convert_4
                    5838   @itoa_convert_3:
000036B4  2004      5839          move.l    D4,D0
000036B6  0680 0000 5840          add.l     #97,D0
000036BA  0061      
000036BC  0480 0000 5841          sub.l     #10,D0
000036C0  000A      
                    5842   @itoa_convert_4:
000036C2  2042      5843          move.l    D2,A0
000036C4  1080      5844          move.b    D0,(A0)
000036C6  2002      5845          move.l    D2,D0
000036C8  5280      5846          addq.l    #1,D0
000036CA  4CDF 003C 5847          movem.l   (A7)+,D2/D3/D4/D5
000036CE  4E5E      5848          unlk      A6
000036D0  4E75      5849          rts
                    5850   _ltoa:
000036D2  4E56 0000 5851          link      A6,#0
000036D6  48E7 3C00 5852          movem.l   D2/D3/D4/D5,-(A7)
000036DA  242E 0008 5853          move.l    8(A6),D2
000036DE  262E 000C 5854          move.l    12(A6),D3
000036E2  2A2E 0010 5855          move.l    16(A6),D5
000036E6  2803      5856          move.l    D3,D4
000036E8  0C85 0000 5857          cmp.l     #2,D5
000036EC  0002      
000036EE  6D08      5858          blt.s     ltoa_3
000036F0  0C85 0000 5859          cmp.l     #36,D5
000036F4  0024      
000036F6  6F06      5860          ble.s     ltoa_1
                    5861   ltoa_3:
000036F8  2003      5862          move.l    D3,D0
000036FA  6000 0052 5863          bra       ltoa_4
                    5864   ltoa_1:
000036FE  0C85 0000 5865          cmp.l     #10,D5
00003702  000A      
00003704  6600 0032 5866          bne       ltoa_5
00003708  0C82 0000 5867          cmp.l     #0,D2
0000370C  0000      
0000370E  6C28      5868          bge.s     ltoa_5
00003710  2002      5869          move.l    D2,D0
00003712  4480      5870          neg.l     D0
00003714  2400      5871          move.l    D0,D2
00003716  0C82 0000 5872          cmp.l     #0,D2
0000371A  0000      
0000371C  6C12      5873          bge.s     ltoa_7
0000371E  4879 0000 5874          pea       @itoa_1
00003722  4A26      
00003724  2F03      5875          move.l    D3,-(A7)
00003726  6100 F5F6 5876          bsr       _strcpy
0000372A  504F      5877          addq.w    #8,A7
0000372C  2003      5878          move.l    D3,D0
0000372E  601E      5879          bra.s     ltoa_4
                    5880   ltoa_7:
00003730  2044      5881          move.l    D4,A0
00003732  5284      5882          addq.l    #1,D4
00003734  10BC 002D 5883          move.b    #45,(A0)
                    5884   ltoa_5:
00003738  2F05      5885          move.l    D5,-(A7)
0000373A  2F02      5886          move.l    D2,-(A7)
0000373C  2F04      5887          move.l    D4,-(A7)
0000373E  6100 FF20 5888          bsr       @itoa_convert
00003742  DEFC 000C 5889          add.w     #12,A7
00003746  2800      5890          move.l    D0,D4
00003748  2044      5891          move.l    D4,A0
0000374A  4210      5892          clr.b     (A0)
0000374C  2003      5893          move.l    D3,D0
                    5894   ltoa_4:
0000374E  4CDF 003C 5895          movem.l   (A7)+,D2/D3/D4/D5
00003752  4E5E      5896          unlk      A6
00003754  4E75      5897          rts
                    5898   _ultoa:
00003756  4E56 0000 5899          link      A6,#0
0000375A  48E7 3800 5900          movem.l   D2/D3/D4,-(A7)
0000375E  262E 0010 5901          move.l    16(A6),D3
00003762  282E 000C 5902          move.l    12(A6),D4
00003766  2404      5903          move.l    D4,D2
00003768  0C83 0000 5904          cmp.l     #2,D3
0000376C  0002      
0000376E  6D08      5905          blt.s     ultoa_3
00003770  0C83 0000 5906          cmp.l     #36,D3
00003774  0024      
00003776  6F04      5907          ble.s     ultoa_1
                    5908   ultoa_3:
00003778  2004      5909          move.l    D4,D0
0000377A  6018      5910          bra.s     ultoa_4
                    5911   ultoa_1:
0000377C  2F03      5912          move.l    D3,-(A7)
0000377E  2F2E 0008 5913          move.l    8(A6),-(A7)
00003782  2F02      5914          move.l    D2,-(A7)
00003784  6100 FEDA 5915          bsr       @itoa_convert
00003788  DEFC 000C 5916          add.w     #12,A7
0000378C  2400      5917          move.l    D0,D2
0000378E  2042      5918          move.l    D2,A0
00003790  4210      5919          clr.b     (A0)
00003792  2004      5920          move.l    D4,D0
                    5921   ultoa_4:
00003794  4CDF 001C 5922          movem.l   (A7)+,D2/D3/D4
00003798  4E5E      5923          unlk      A6
0000379A  4E75      5924          rts
                    5925   _itoa:
0000379C  4E56 0000 5926          link      A6,#0
000037A0  2F2E 0010 5927          move.l    16(A6),-(A7)
000037A4  2F2E 000C 5928          move.l    12(A6),-(A7)
000037A8  2F2E 0008 5929          move.l    8(A6),-(A7)
000037AC  6100 FF24 5930          bsr       _ltoa
000037B0  DEFC 000C 5931          add.w     #12,A7
000037B4  4E5E      5932          unlk      A6
000037B6  4E75      5933          rts
                    5934   ULMUL:
000037B8  4E56 0000 5935          link    A6,#0
000037BC  48E7 C000 5936          movem.l D0/D1,-(A7)
000037C0  222E 0008 5937          move.l  8(A6),D1
000037C4  202E 000C 5938          move.l  12(A6),D0
000037C8  602C      5939          bra.s   lmul_3
                    5940   LMUL:
000037CA  4E56 0000 5941          link    A6,#0
000037CE  48E7 C000 5942          movem.l D0/D1,-(A7)
000037D2  222E 0008 5943          move.l  8(A6),D1
000037D6  202E 000C 5944          move.l  12(A6),D0
000037DA  4A80      5945          tst.l   D0
000037DC  6A0A      5946          bpl.s   lmul_1
000037DE  4480      5947          neg.l   D0
000037E0  4A81      5948          tst.l   D1
000037E2  6A0A      5949          bpl.s   lmul_2
000037E4  4481      5950          neg.l   D1
000037E6  600E      5951          bra.s   lmul_3
                    5952   lmul_1:
000037E8  4A81      5953          tst.l   D1
000037EA  6A0A      5954          bpl.s   lmul_3
000037EC  4481      5955          neg.l   D1
                    5956   lmul_2:
000037EE  6114      5957          bsr.s   domul
000037F0  4481      5958          neg.l   D1
000037F2  4080      5959          negx.l  D0
000037F4  6002      5960          bra.s   lmul_4
                    5961   lmul_3:
000037F6  610C      5962          bsr.s   domul
                    5963   lmul_4:
000037F8  2D41 0008 5964          move.l  D1,8(A6)
000037FC  4CDF 0003 5965          movem.l (A7)+,D0/D1
00003800  4E5E      5966          unlk    A6
00003802  4E75      5967          rts
                    5968   domul:
00003804  0C81 0000 5969          cmpi.l  #$FFFF,D1
00003808  FFFF      
0000380A  620C      5970          bhi.s   domul_1
0000380C  0C80 0000 5971          cmpi.l  #$FFFF,D0
00003810  FFFF      
00003812  620E      5972          bhi.s   domul_2
00003814  C2C0      5973          mulu    D0,D1
00003816  4E75      5974          rts
                    5975   domul_1:
00003818  0C80 0000 5976          cmpi.l  #$FFFF,D0
0000381C  FFFF      
0000381E  6218      5977          bhi.s   domul_4
00003820  6002      5978          bra.s   domul_3
                    5979   domul_2
00003822  C141      5980          exg     D0,D1
                    5981   domul_3:
00003824  2F02      5982          move.l  D2,-(A7)
00003826  2401      5983          move.l  D1,D2
00003828  4842      5984          swap    D2
0000382A  C2C0      5985          mulu    D0,D1
0000382C  C4C0      5986          mulu    D0,D2
0000382E  4842      5987          swap    D2
00003830  4242      5988          clr.w   D2
00003832  D282      5989          add.l   D2,D1
00003834  241F      5990          move.l  (A7)+,D2
00003836  4E75      5991          rts
                    5992   domul_4:
00003838  48E7 3000 5993          movem.l D2/D3,-(A7)
0000383C  2401      5994          move.l  D1,D2
0000383E  2601      5995          move.l  D1,D3
00003840  C2C0      5996          mulu    D0,D1
00003842  4842      5997          swap    D2
00003844  C4C0      5998          mulu    D0,D2
00003846  4840      5999          swap    D0
00003848  C6C0      6000          mulu    D0,D3
0000384A  D483      6001          add.l   D3,D2
0000384C  4842      6002          swap    D2
0000384E  4242      6003          clr.w   D2
00003850  D282      6004          add.l   D2,D1
00003852  4CDF 000C 6005          movem.l (A7)+,D2/D3
00003856  4E75      6006          rts
                    6007   _strlen:
00003858  206F 0004 6008          move.l    (4,A7),A0
0000385C  2248      6009          move.l    A0,A1
                    6010   strlen_1:
0000385E  4A19      6011          tst.b     (A1)+
00003860  66FC      6012          bne       strlen_1
00003862  2009      6013          move.l    A1,D0
00003864  9088      6014          sub.l     A0,D0
00003866  5380      6015          subq.l    #1,D0
00003868  4E75      6016          rts
                    6017          section   const
                    6018   
                    6019   @m68kde~1_1:
0000386A  0D0A 00   6020          dc.b      13,10,0
                    6021   @m68kde~1_2:
0000386E  0D53 7769 6022          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003872  7463 6865 
00003876  7320 5357 
0000387A  5B        
0000387B  372D 305D 6023          dc.b      55,45,48,93,32,61,32,0
0000387F  203D 2000 
                    6024   @m68kde~1_3:
00003884  3000      6025          dc.b      48,0
                    6026   @m68kde~1_4:
00003886  3100      6027          dc.b      49,0
                    6028   @m68kde~1_5:
00003888  0D0A 4475 6029          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000388C  6D70 204D 
00003890  656D 6F72 
00003894  79        
00003895  2042 6C6F 6030          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003899  636B 3A20 
0000389D  3C45 5343 
000038A1  3E20      
000038A3  746F 2041 6031          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000038A7  626F 7274 
000038AB  2C20 3C53 
000038AF  50        
000038B0  4143 453E 6032          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000038B4  2074 6F20 
000038B8  436F 6E74 
000038BC  69        
000038BD  6E75 6500 6033          dc.b      110,117,101,0
                    6034   @m68kde~1_6:
000038C2  0D0A 456E 6035          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000038C6  7465 7220 
000038CA  5374 6172 
000038CE  74        
000038CF  2041 6464 6036          dc.b      32,65,100,100,114,101,115,115,58,32,0
000038D3  7265 7373 
000038D7  3A20 00   
                    6037   @m68kde~1_7:
000038DA  0D0A 2530 6038          dc.b      13,10,37,48,56,120,32,0
000038DE  3878 2000 
                    6039   @m68kde~1_8:
000038E2  2530 3258 6040          dc.b      37,48,50,88,0
000038E6  00        
                    6041   @m68kde~1_9:
000038E8  2020 00   6042          dc.b      32,32,0
                    6043   @m68kde~1_10:
000038EC  0D0A 4669 6044          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000038F0  6C6C 204D 
000038F4  656D 6F72 
000038F8  79        
000038F9  2042 6C6F 6045          dc.b      32,66,108,111,99,107,0
000038FD  636B 00   
                    6046   @m68kde~1_11:
00003900  0D0A 456E 6047          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003904  7465 7220 
00003908  456E 6420 
0000390C  41        
0000390D  6464 7265 6048          dc.b      100,100,114,101,115,115,58,32,0
00003911  7373 3A20 
00003915  00        
                    6049   @m68kde~1_12:
00003916  0D0A 456E 6050          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000391A  7465 7220 
0000391E  4669 6C6C 
00003922  20        
00003923  4461 7461 6051          dc.b      68,97,116,97,58,32,0
00003927  3A20 00   
                    6052   @m68kde~1_13:
0000392A  0D0A 4669 6053          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000392E  6C6C 696E 
00003932  6720 4164 
00003936  64        
00003937  7265 7373 6054          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000393B  6573 205B 
0000393F  2425 3038 
00003943  58        
00003944  202D 2024 6055          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003948  2530 3858 
0000394C  5D20 7769 
00003950  7468      
00003952  2024 2530 6056          dc.b      32,36,37,48,50,88,0
00003956  3258 00   
                    6057   @m68kde~1_14:
0000395A  0D0A 5573 6058          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000395E  6520 4879 
00003962  7065 7254 
00003966  65        
00003967  726D 696E 6059          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000396B  616C 2074 
0000396F  6F20 5365 
00003973  6E64 2054 6060          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003977  6578 7420 
0000397B  4669 6C65 
0000397F  2028 2E68 6061          dc.b      32,40,46,104,101,120,41,13,10,0
00003983  6578 290D 
00003987  0A00      
                    6062   @m68kde~1_15:
0000398A  0D0A 4C6F 6063          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000398E  6164 2046 
00003992  6169 6C65 
00003996  64        
00003997  2061 7420 6064          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000399B  4164 6472 
0000399F  6573 7320 
000039A3  3D        
000039A4  205B 2425 6065          dc.b      32,91,36,37,48,56,88,93,13,10,0
000039A8  3038 585D 
000039AC  0D0A 00   
                    6066   @m68kde~1_16:
000039B0  0D0A 5375 6067          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000039B4  6363 6573 
000039B8  733A 2044 
000039BC  6F        
000039BD  776E 6C6F 6068          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000039C1  6164 6564 
000039C5  2025 6420 
000039C9  6279 7465 6069          dc.b      98,121,116,101,115,13,10,0
000039CD  730D 0A00 
                    6070   @m68kde~1_17:
000039D2  0D0A 4578 6071          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000039D6  616D 696E 
000039DA  6520 616E 
000039DE  64        
000039DF  2043 6861 6072          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000039E3  6E67 6520 
000039E7  4D65 6D6F 
000039EB  72        
000039EC  7900      6073          dc.b      121,0
                    6074   @m68kde~1_18:
000039EE  0D0A 3C45 6075          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000039F2  5343 3E20 
000039F6  746F 2053 
000039FA  746F      
000039FC  702C 203C 6076          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003A00  5350 4143 
00003A04  453E 2074 
00003A08  6F20      
00003A0A  4164 7661 6077          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003A0E  6E63 652C 
00003A12  2027 2D27 
00003A16  2074      
00003A18  6F20 476F 6078          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003A1C  2042 6163 
00003A20  6B2C 203C 
00003A24  4441      
00003A26  5441 3E20 6079          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003A2A  746F 2063 
00003A2E  6861 6E67 
00003A32  65        
00003A33  00        6080          dc.b      0
                    6081   @m68kde~1_19:
00003A34  0D0A 456E 6082          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003A38  7465 7220 
00003A3C  4164 6472 
00003A40  65        
00003A41  7373 3A20 6083          dc.b      115,115,58,32,0
00003A45  00        
                    6084   @m68kde~1_20:
00003A46  0D0A 5B25 6085          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003A4A  3038 785D 
00003A4E  203A 2025 
00003A52  3032 78   
00003A55  00        6086          dc.b      0
                    6087   @m68kde~1_21:
00003A56  0D0A 5761 6088          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003A5A  726E 696E 
00003A5E  6720 4368 
00003A62  61        
00003A63  6E67 6520 6089          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003A67  4661 696C 
00003A6B  6564 3A20 
00003A6F  57        
00003A70  726F 7465 6090          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003A74  205B 2530 
00003A78  3278 5D2C 
00003A7C  20        
00003A7D  5265 6164 6091          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003A81  205B 2530 
00003A85  3278 5D00 
                    6092   @m68kde~1_22:
00003A8A  0D0A 4572 6093          dc.b      13,10,69,114,97,115,101,100,32,116,104,101,32
00003A8E  6173 6564 
00003A92  2074 6865 
00003A96  20        
00003A97  6368 6970 6094          dc.b      99,104,105,112,0
00003A9B  00        
                    6095   @m68kde~1_23:
00003A9C  0D0A 4C65 6096          dc.b      13,10,76,101,116,39,115,32,114,117,110,32,116
00003AA0  7427 7320 
00003AA4  7275 6E20 
00003AA8  74        
00003AA9  6865 2050 6097          dc.b      104,101,32,80,114,111,103,114,97,109,70,108
00003AAD  726F 6772 
00003AB1  616D 466C 
00003AB5  6173 6843 6098          dc.b      97,115,104,67,104,105,112,40,41,0
00003AB9  6869 7028 
00003ABD  2900      
                    6099   @m68kde~1_24:
00003AC0  0A0D 0A20 6100          dc.b      10,13,10,32,65,100,100,114,101,115,115,32,61
00003AC4  4164 6472 
00003AC8  6573 7320 
00003ACC  3D        
00003ACD  2025 7820 6101          dc.b      32,37,120,32,68,79,78,69,33,32,0
00003AD1  444F 4E45 
00003AD5  2120 00   
                    6102   @m68kde~1_25:
00003AD8  0D0A 466C 6103          dc.b      13,10,70,108,97,115,104,32,99,104,105,112,32
00003ADC  6173 6820 
00003AE0  6368 6970 
00003AE4  20        
00003AE5  6973 2070 6104          dc.b      105,115,32,112,114,111,103,114,97,109,109,101
00003AE9  726F 6772 
00003AED  616D 6D65 
00003AF1  6421 00   6105          dc.b      100,33,0
                    6106   @m68kde~1_26:
00003AF4  0D0A 4661 6107          dc.b      13,10,70,97,105,108,101,100,0
00003AF8  696C 6564 
00003AFC  00        
                    6108   @m68kde~1_27:
00003AFE  0D0A 5468 6109          dc.b      13,10,84,104,101,32,98,121,116,101,32,110,117
00003B02  6520 6279 
00003B06  7465 206E 
00003B0A  75        
00003B0B  6D62 6572 6110          dc.b      109,98,101,114,32,37,100,32,105,115,32,119,114
00003B0F  2025 6420 
00003B13  6973 2077 
00003B17  72        
00003B18  6F6E 6700 6111          dc.b      111,110,103,0
                    6112   @m68kde~1_28:
00003B1C  0D0A 2046 6113          dc.b      13,10,32,70,108,97,115,104,32,77,101,109,111
00003B20  6C61 7368 
00003B24  204D 656D 
00003B28  6F        
00003B29  7279 2054 6114          dc.b      114,121,32,84,101,115,116,32,83,117,99,99,101
00003B2D  6573 7420 
00003B31  5375 6363 
00003B35  65        
00003B36  7366 756C 6115          dc.b      115,102,117,108,32,33,0
00003B3A  2021 00   
                    6116   @m68kde~1_29:
00003B3E  0D0A 204C 6117          dc.b      13,10,32,76,111,97,100,105,110,103,32,102,114
00003B42  6F61 6469 
00003B46  6E67 2066 
00003B4A  72        
00003B4B  6F6D 2046 6118          dc.b      111,109,32,70,108,97,115,104,32,67,104,105,112
00003B4F  6C61 7368 
00003B53  2043 6869 
00003B57  70        
00003B58  202E 2E2E 6119          dc.b      32,46,46,46,0
00003B5C  00        
                    6120   @m68kde~1_30:
00003B5E  0D0A 4C6F 6121          dc.b      13,10,76,111,97,100,105,110,103,32,102,114,111
00003B62  6164 696E 
00003B66  6720 6672 
00003B6A  6F        
00003B6B  6D20 4368 6122          dc.b      109,32,67,104,105,112,32,105,115,32,83,117,99
00003B6F  6970 2069 
00003B73  7320 5375 
00003B77  63        
00003B78  6365 7366 6123          dc.b      99,101,115,102,117,108,33,0
00003B7C  756C 2100 
                    6124   @m68kde~1_31:
00003B80  2425 3038 6125          dc.b      36,37,48,56,88,32,32,0
00003B84  5820 2000 
                    6126   @m68kde~1_32:
00003B88  2000      6127          dc.b      32,0
                    6128   @m68kde~1_33:
00003B8A  2E00      6129          dc.b      46,0
                    6130   @m68kde~1_34:
00003B8C  2563 00   6131          dc.b      37,99,0
                    6132   @m68kde~1_35:
00003B90  00        6133          dc.b      0
                    6134   @m68kde~1_36:
00003B92  0D0A 0D0A 6135          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003B96  2044 3020 
00003B9A  3D20 2425 
00003B9E  3038 58   
00003BA1  2020 4130 6136          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003BA5  203D 2024 
00003BA9  2530 3858 
00003BAD  00        
                    6137   @m68kde~1_37:
00003BAE  0D0A 2044 6138          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003BB2  3120 3D20 
00003BB6  2425 3038 
00003BBA  5820 20   
00003BBD  4131 203D 6139          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003BC1  2024 2530 
00003BC5  3858 00   
                    6140   @m68kde~1_38:
00003BC8  0D0A 2044 6141          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003BCC  3220 3D20 
00003BD0  2425 3038 
00003BD4  5820 20   
00003BD7  4132 203D 6142          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003BDB  2024 2530 
00003BDF  3858 00   
                    6143   @m68kde~1_39:
00003BE2  0D0A 2044 6144          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003BE6  3320 3D20 
00003BEA  2425 3038 
00003BEE  5820 20   
00003BF1  4133 203D 6145          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003BF5  2024 2530 
00003BF9  3858 00   
                    6146   @m68kde~1_40:
00003BFC  0D0A 2044 6147          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003C00  3420 3D20 
00003C04  2425 3038 
00003C08  5820 20   
00003C0B  4134 203D 6148          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003C0F  2024 2530 
00003C13  3858 00   
                    6149   @m68kde~1_41:
00003C16  0D0A 2044 6150          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003C1A  3520 3D20 
00003C1E  2425 3038 
00003C22  5820 20   
00003C25  4135 203D 6151          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003C29  2024 2530 
00003C2D  3858 00   
                    6152   @m68kde~1_42:
00003C30  0D0A 2044 6153          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003C34  3620 3D20 
00003C38  2425 3038 
00003C3C  5820 20   
00003C3F  4136 203D 6154          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003C43  2024 2530 
00003C47  3858 00   
                    6155   @m68kde~1_43:
00003C4A  0D0A 2044 6156          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003C4E  3720 3D20 
00003C52  2425 3038 
00003C56  5820 20   
00003C59  4137 203D 6157          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003C5D  2024 2530 
00003C61  3858 00   
                    6158   @m68kde~1_44:
00003C64  0D0A 0D0A 6159          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003C68  5553 5020 
00003C6C  3D20 2425 
00003C70  3038 58   
00003C73  2020 2841 6160          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003C77  3729 2055 
00003C7B  7365 7220 
00003C7F  5350      
00003C81  00        6161          dc.b      0
                    6162   @m68kde~1_45:
00003C82  0D0A 5353 6163          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003C86  5020 3D20 
00003C8A  2425 3038 
00003C8E  5820 20   
00003C91  2841 3729 6164          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003C95  2053 7570 
00003C99  6572 7669 
00003C9D  73        
00003C9E  6F72 2053 6165          dc.b      111,114,32,83,80,0
00003CA2  5000      
                    6166   @m68kde~1_46:
00003CA4  0D0A 2053 6167          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003CA8  5220 3D20 
00003CAC  2425 3034 
00003CB0  5820 20   
00003CB3  2000      6168          dc.b      32,0
                    6169   @m68kde~1_47:
00003CB6  2020 205B 6170          dc.b      32,32,32,91,0
00003CBA  00        
                    6171   @m68kde~1_48:
00003CBC  0D0A 2050 6172          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003CC0  4320 3D20 
00003CC4  2425 3038 
00003CC8  5820 20   
00003CCB  00        6173          dc.b      0
                    6174   @m68kde~1_49:
00003CCC  5B40 2042 6175          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003CD0  5245 414B 
00003CD4  504F 494E 
00003CD8  545D 00   
                    6176   @m68kde~1_50:
00003CDC  0D0A 5750 6177          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003CE0  2564 203D 
00003CE4  2025 7300 
                    6178   @m68kde~1_51:
00003CE8  0D0A 0D0A 6179          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003CEC  0D0A 0D0A 
00003CF0  0D0A 0D0A 
00003CF4  5369 6E   
00003CF7  676C 6520 6180          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003CFB  5374 6570 
00003CFF  2020 3A5B 
00003D03  4F        
00003D04  4E5D 00   6181          dc.b      78,93,0
                    6182   @m68kde~1_52:
00003D08  0D0A 4272 6183          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003D0C  6561 6B20 
00003D10  506F 696E 
00003D14  74        
00003D15  7320 3A5B 6184          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003D19  4469 7361 
00003D1D  626C 6564 
00003D21  5D        
00003D22  00        6185          dc.b      0
                    6186   @m68kde~1_53:
00003D24  0D0A 5072 6187          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003D28  6573 7320 
00003D2C  3C53 5041 
00003D30  4345      
00003D32  3E20 746F 6188          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003D36  2045 7865 
00003D3A  6375 7465 
00003D3E  20        
00003D3F  4E65 7874 6189          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003D43  2049 6E73 
00003D47  7472 7563 
00003D4B  7469 6F6E 6190          dc.b      116,105,111,110,0
00003D4F  00        
                    6191   @m68kde~1_54:
00003D50  0D0A 5072 6192          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003D54  6573 7320 
00003D58  3C45 5343 
00003D5C  3E20      
00003D5E  746F 2052 6193          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003D62  6573 756D 
00003D66  6520 5072 
00003D6A  6F67 7261 6194          dc.b      111,103,114,97,109,0
00003D6E  6D00      
                    6195   @m68kde~1_55:
00003D70  0D0A 496C 6196          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003D74  6C65 6761 
00003D78  6C20 4461 
00003D7C  74        
00003D7D  6120 5265 6197          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003D81  6769 7374 
00003D85  6572 203A 
00003D89  20        
00003D8A  5573 6520 6198          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003D8E  4430 2D44 
00003D92  372E 2E2E 
00003D96  2E2E      
00003D98  0D0A 00   6199          dc.b      13,10,0
                    6200   @m68kde~1_56:
00003D9C  0D0A 4425 6201          dc.b      13,10,68,37,99,32,61,32,0
00003DA0  6320 3D20 
00003DA4  00        
                    6202   @m68kde~1_57:
00003DA6  0D0A 496C 6203          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00003DAA  6C65 6761 
00003DAE  6C20 4164 
00003DB2  64        
00003DB3  7265 7373 6204          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00003DB7  2052 6567 
00003DBB  6973 7465 
00003DBF  7220 3A20 6205          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00003DC3  5573 6520 
00003DC7  4130 2D41 
00003DCB  372E      
00003DCD  2E2E 2E2E 6206          dc.b      46,46,46,46,13,10,0
00003DD1  0D0A 00   
                    6207   @m68kde~1_58:
00003DD4  0D0A 4125 6208          dc.b      13,10,65,37,99,32,61,32,0
00003DD8  6320 3D20 
00003DDC  00        
                    6209   @m68kde~1_59:
00003DDE  0D0A 5573 6210          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00003DE2  6572 2053 
00003DE6  5020 3D20 
00003DEA  00        
                    6211   @m68kde~1_60:
00003DEC  0D0A 496C 6212          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003DF0  6C65 6761 
00003DF4  6C20 5265 
00003DF8  67        
00003DF9  6973 7465 6213          dc.b      105,115,116,101,114,46,46,46,46,0
00003DFD  722E 2E2E 
00003E01  2E00      
                    6214   @m68kde~1_61:
00003E04  0D0A 5379 6215          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00003E08  7374 656D 
00003E0C  2053 5020 
00003E10  3D        
00003E11  2000      6216          dc.b      32,0
                    6217   @m68kde~1_62:
00003E14  0D0A 5043 6218          dc.b      13,10,80,67,32,61,32,0
00003E18  203D 2000 
                    6219   @m68kde~1_63:
00003E1C  0D0A 5352 6220          dc.b      13,10,83,82,32,61,32,0
00003E20  203D 2000 
                    6221   @m68kde~1_64:
00003E24  0D0A 496C 6222          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003E28  6C65 6761 
00003E2C  6C20 5265 
00003E30  67        
00003E31  6973 7465 6223          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00003E35  723A 2055 
00003E39  7365 2041 
00003E3D  30        
00003E3E  2D41 372C 6224          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00003E42  2044 302D 
00003E46  4437 2C20 
00003E4A  5353 50   
00003E4D  2C20 5553 6225          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00003E51  502C 2050 
00003E55  4320 6F72 
00003E59  2053      
00003E5B  520D 0A00 6226          dc.b      82,13,10,0
                    6227   @m68kde~1_65:
00003E60  0D0A 0D0A 6228          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00003E64  4E75 6D20 
00003E68  2020 2020 
00003E6C  4164      
00003E6E  6472 6573 6229          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00003E72  7320 2020 
00003E76  2020 2049 
00003E7A  6E        
00003E7B  7374 7275 6230          dc.b      115,116,114,117,99,116,105,111,110,0
00003E7F  6374 696F 
00003E83  6E00      
                    6231   @m68kde~1_66:
00003E86  0D0A 2D2D 6232          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003E8A  2D20 2020 
00003E8E  2020 2D2D 
00003E92  2D2D 2D   
00003E95  2D2D 2D2D 6233          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00003E99  2020 2020 
00003E9D  2D2D 2D2D 
00003EA1  2D2D 2D   
00003EA4  2D2D 2D2D 6234          dc.b      45,45,45,45,0
00003EA8  00        
                    6235   @m68kde~1_67:
00003EAA  0D0A 4E6F 6236          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00003EAE  2042 7265 
00003EB2  616B 506F 
00003EB6  69        
00003EB7  6E74 7320 6237          dc.b      110,116,115,32,83,101,116,0
00003EBB  5365 7400 
                    6238   @m68kde~1_68:
00003EC0  0D0A 2533 6239          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00003EC4  6420 2020 
00003EC8  2020 2425 
00003ECC  3038 78   
00003ECF  00        6240          dc.b      0
                    6241   @m68kde~1_69:
00003ED0  0D0A 4E75 6242          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00003ED4  6D20 2020 
00003ED8  2020 4164 
00003EDC  6472      
00003EDE  6573 7300 6243          dc.b      101,115,115,0
                    6244   @m68kde~1_70:
00003EE2  0D0A 2D2D 6245          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003EE6  2D20 2020 
00003EEA  2020 2D2D 
00003EEE  2D2D 2D   
00003EF1  2D2D 2D2D 6246          dc.b      45,45,45,45,0
00003EF5  00        
                    6247   @m68kde~1_71:
00003EF6  0D0A 4E6F 6248          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00003EFA  2057 6174 
00003EFE  6368 506F 
00003F02  69        
00003F03  6E74 7320 6249          dc.b      110,116,115,32,83,101,116,0
00003F07  5365 7400 
                    6250   @m68kde~1_72:
00003F0C  0D0A 456E 6251          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00003F10  7465 7220 
00003F14  4272 6561 
00003F18  6B        
00003F19  2050 6F69 6252          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003F1D  6E74 204E 
00003F21  756D 6265 
00003F25  72        
00003F26  3A20 00   6253          dc.b      58,32,0
                    6254   @m68kde~1_73:
00003F2A  0D0A 496C 6255          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00003F2E  6C65 6761 
00003F32  6C20 5261 
00003F36  6E        
00003F37  6765 203A 6256          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00003F3B  2055 7365 
00003F3F  2030 202D 
00003F43  2037      
00003F45  00        6257          dc.b      0
                    6258   @m68kde~1_74:
00003F46  0D0A 4272 6259          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003F4A  6561 6B20 
00003F4E  506F 696E 
00003F52  74        
00003F53  2043 6C65 6260          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00003F57  6172 6564 
00003F5B  2E2E 2E2E 
00003F5F  2E        
00003F60  0D0A 00   6261          dc.b      13,10,0
                    6262   @m68kde~1_75:
00003F64  0D0A 4272 6263          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003F68  6561 6B20 
00003F6C  506F 696E 
00003F70  74        
00003F71  2077 6173 6264          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00003F75  6E27 7420 
00003F79  5365 742E 
00003F7D  2E        
00003F7E  2E2E 2E00 6265          dc.b      46,46,46,0
                    6266   @m68kde~1_76:
00003F82  0D0A 456E 6267          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00003F86  7465 7220 
00003F8A  5761 7463 
00003F8E  68        
00003F8F  2050 6F69 6268          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003F93  6E74 204E 
00003F97  756D 6265 
00003F9B  72        
00003F9C  3A20 00   6269          dc.b      58,32,0
                    6270   @m68kde~1_77:
00003FA0  0D0A 5761 6271          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003FA4  7463 6820 
00003FA8  506F 696E 
00003FAC  74        
00003FAD  2043 6C65 6272          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00003FB1  6172 6564 
00003FB5  2E2E 2E2E 
00003FB9  2E        
00003FBA  0D0A 00   6273          dc.b      13,10,0
                    6274   @m68kde~1_78:
00003FBE  0D0A 5761 6275          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003FC2  7463 6820 
00003FC6  506F 696E 
00003FCA  74        
00003FCB  2057 6173 6276          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00003FCF  206E 6F74 
00003FD3  2053 6574 
00003FD7  2E        
00003FD8  2E2E 2E2E 6277          dc.b      46,46,46,46,0
00003FDC  00        
                    6278   @m68kde~1_79:
00003FDE  0D0A 4E6F 6279          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00003FE2  2046 5245 
00003FE6  4520 4272 
00003FEA  6561      
00003FEC  6B20 506F 6280          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00003FF0  696E 7473 
00003FF4  2E2E 2E2E 
00003FF8  2E        
00003FF9  00        6281          dc.b      0
                    6282   @m68kde~1_80:
00003FFA  0D0A 4272 6283          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003FFE  6561 6B20 
00004002  506F 696E 
00004006  74        
00004007  2041 6464 6284          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000400B  7265 7373 
0000400F  3A20 00   
                    6285   @m68kde~1_81:
00004012  0D0A 4572 6286          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004016  726F 7220 
0000401A  3A20 4272 
0000401E  65        
0000401F  616B 2050 6287          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004023  6F69 6E74 
00004027  7320 4341 
0000402B  4E        
0000402C  4E4F 5420 6288          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004030  6265 2073 
00004034  6574 2061 
00004038  74        
00004039  204F 4444 6289          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
0000403D  2061 6464 
00004041  7265 7373 
00004045  65        
00004046  7300      6290          dc.b      115,0
                    6291   @m68kde~1_82:
00004048  0D0A 4572 6292          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000404C  726F 7220 
00004050  3A20 4272 
00004054  65        
00004055  616B 2050 6293          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004059  6F69 6E74 
0000405D  7320 4341 
00004061  4E        
00004062  4E4F 5420 6294          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004066  6265 2073 
0000406A  6574 2066 
0000406E  6F        
0000406F  7220 524F 6295          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004073  4D20 696E 
00004077  2052 616E 
0000407B  67        
0000407C  6520 3A20 6296          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004080  5B24 302D 
00004084  2430 3030 
00004088  3037 46   
0000408B  4646 5D00 6297          dc.b      70,70,93,0
                    6298   @m68kde~1_83:
00004090  0D0A 4572 6299          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004094  726F 723A 
00004098  2042 7265 
0000409C  61        
0000409D  6B20 506F 6300          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000040A1  696E 7420 
000040A5  416C 7265 
000040A9  6164 7920 6301          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000040AD  4578 6973 
000040B1  7473 2061 
000040B5  74        
000040B6  2041 6464 6302          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000040BA  7265 7373 
000040BE  203A 2025 
000040C2  30        
000040C3  3878 0D0A 6303          dc.b      56,120,13,10,0
000040C7  00        
                    6304   @m68kde~1_84:
000040C8  0D0A 4272 6305          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000040CC  6561 6B20 
000040D0  506F 696E 
000040D4  74        
000040D5  2053 6574 6306          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000040D9  2061 7420 
000040DD  4164 6472 
000040E1  65        
000040E2  7373 3A20 6307          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000040E6  5B24 2530 
000040EA  3878 5D00 
                    6308   @m68kde~1_85:
000040EE  0D0A 4E6F 6309          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000040F2  2046 5245 
000040F6  4520 5761 
000040FA  7463      
000040FC  6820 506F 6310          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004100  696E 7473 
00004104  2E2E 2E2E 
00004108  2E        
00004109  00        6311          dc.b      0
                    6312   @m68kde~1_86:
0000410A  0D0A 5761 6313          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000410E  7463 6820 
00004112  506F 696E 
00004116  74        
00004117  2041 6464 6314          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000411B  7265 7373 
0000411F  3A20 00   
                    6315   @m68kde~1_87:
00004122  0D0A 4572 6316          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004126  726F 723A 
0000412A  2057 6174 
0000412E  63        
0000412F  6820 506F 6317          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004133  696E 7420 
00004137  416C 7265 
0000413B  6164 7920 6318          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
0000413F  5365 7420 
00004143  6174 2041 
00004147  64        
00004148  6472 6573 6319          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000414C  7320 3A20 
00004150  2530 3878 
00004154  0D        
00004155  0A00      6320          dc.b      10,0
                    6321   @m68kde~1_88:
00004158  0D0A 5761 6322          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000415C  7463 6820 
00004160  506F 696E 
00004164  74        
00004165  2053 6574 6323          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004169  2061 7420 
0000416D  4164 6472 
00004171  65        
00004172  7373 3A20 6324          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004176  5B24 2530 
0000417A  3878 5D00 
                    6325   @m68kde~1_89:
0000417E  0D0A 0D0A 6326          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004182  0D0A 0D0A 
00004186  4042 5245 
0000418A  414B 50   
0000418D  4F49 4E54 6327          dc.b      79,73,78,84,0
00004191  00        
                    6328   @m68kde~1_90:
00004192  0D0A 5369 6329          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004196  6E67 6C65 
0000419A  2053 7465 
0000419E  70        
0000419F  203A 205B 6330          dc.b      32,58,32,91,79,78,93,0
000041A3  4F4E 5D00 
                    6331   @m68kde~1_91:
000041A8  0D0A 4272 6332          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000041AC  6561 6B50 
000041B0  6F69 6E74 
000041B4  73        
000041B5  203A 205B 6333          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000041B9  456E 6162 
000041BD  6C65 645D 
000041C1  00        
                    6334   @m68kde~1_92:
000041C2  0D0A 5072 6335          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000041C6  6573 7320 
000041CA  3C45 5343 
000041CE  3E20      
000041D0  746F 2052 6336          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000041D4  6573 756D 
000041D8  6520 5573 
000041DC  6572 2050 6337          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000041E0  726F 6772 
000041E4  616D 0D0A 
000041E8  00        
                    6338   @m68kde~1_93:
000041EA  0D0A 556E 6339          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000041EE  6B6E 6F77 
000041F2  6E20 436F 
000041F6  6D        
000041F7  6D61 6E64 6340          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000041FB  2E2E 2E2E 
000041FF  2E0D 0A00 
                    6341   @m68kde~1_94:
00004204  0D0A 5072 6342          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004208  6F67 7261 
0000420C  6D20 456E 
00004210  64        
00004211  6564 2028 6343          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004215  5452 4150 
00004219  2023 3135 
0000421D  292E      
0000421F  2E2E 2E00 6344          dc.b      46,46,46,0
                    6345   @m68kde~1_95:
00004224  0D0A 4B69 6346          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004228  6C6C 2041 
0000422C  6C6C 2042 
00004230  72        
00004231  6561 6B20 6347          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004235  506F 696E 
00004239  7473 2E2E 
0000423D  2E        
0000423E  2879 2F6E 6348          dc.b      40,121,47,110,41,63,0
00004242  293F 00   
                    6349   @m68kde~1_96:
00004246  0D0A 4B69 6350          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000424A  6C6C 2041 
0000424E  6C6C 2057 
00004252  61        
00004253  7463 6820 6351          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004257  506F 696E 
0000425B  7473 2E2E 
0000425F  2E        
00004260  2879 2F6E 6352          dc.b      40,121,47,110,41,63,0
00004264  293F 00   
                    6353   @m68kde~1_97:
00004268  0D0A 2D2D 6354          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000426C  2D2D 2D2D 
00004270  2D2D 2D2D 
00004274  2D2D 2D   
00004277  2D2D 2D2D 6355          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000427B  2D2D 2D2D 
0000427F  2D2D 2D2D 
00004283  2D2D 2D   
00004286  2D2D 2D2D 6356          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000428A  2D2D 2D2D 
0000428E  2D2D 2D2D 
00004292  2D2D 2D   
00004295  2D2D 2D2D 6357          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004299  2D2D 2D2D 
0000429D  2D2D 2D2D 
000042A1  2D2D 2D   
000042A4  2D2D 2D2D 6358          dc.b      45,45,45,45,45,45,0
000042A8  2D2D 00   
                    6359   @m68kde~1_98:
000042AC  0D0A 2020 6360          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000042B0  4465 6275 
000042B4  6767 6572 
000042B8  20        
000042B9  436F 6D6D 6361          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000042BD  616E 6420 
000042C1  5375 6D6D 
000042C5  6172 7900 6362          dc.b      97,114,121,0
                    6363   @m68kde~1_99:
000042CA  0D0A 2020 6364          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000042CE  2E28 7265 
000042D2  6729 2020 
000042D6  2020      
000042D8  2020 202D 6365          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000042DC  2043 6861 
000042E0  6E67 6520 
000042E4  5265      
000042E6  6769 7374 6366          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000042EA  6572 733A 
000042EE  2065 2E67 
000042F2  2041 302D 6367          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000042F6  4137 2C44 
000042FA  302D 4437 
000042FE  2C50 43   
00004301  2C53 5350 6368          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004305  2C55 5350 
00004309  2C53 5200 
                    6369   @m68kde~1_100:
0000430E  0D0A 2020 6370          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004312  4244 2F42 
00004316  532F 4243 
0000431A  2F42 4B   
0000431D  2020 2D20 6371          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004321  4272 6561 
00004325  6B20 506F 
00004329  69        
0000432A  6E74 3A20 6372          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
0000432E  4469 7370 
00004332  6C61 792F 
00004336  53        
00004337  6574 2F43 6373          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
0000433B  6C65 6172 
0000433F  2F4B 696C 
00004343  6C        
00004344  00        6374          dc.b      0
                    6375   @m68kde~1_101:
00004346  0D0A 2020 6376          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
0000434A  4320 2020 
0000434E  2020 2020 
00004352  2020 20   
00004355  2020 2D20 6377          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004359  436F 7079 
0000435D  2050 726F 
00004361  67        
00004362  7261 6D20 6378          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004366  6672 6F6D 
0000436A  2046 6C61 
0000436E  73        
0000436F  6820 746F 6379          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004373  204D 6169 
00004377  6E20 4D65 
0000437B  6D        
0000437C  6F72 7900 6380          dc.b      111,114,121,0
                    6381   @m68kde~1_102:
00004380  0D0A 2020 6382          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004384  4420 2020 
00004388  2020 2020 
0000438C  2020 20   
0000438F  2020 2D20 6383          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004393  4475 6D70 
00004397  204D 656D 
0000439B  6F        
0000439C  7279 2043 6384          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000043A0  6F6E 7465 
000043A4  6E74 7320 
000043A8  746F 2053 6385          dc.b      116,111,32,83,99,114,101,101,110,0
000043AC  6372 6565 
000043B0  6E00      
                    6386   @m68kde~1_103:
000043B2  0D0A 2020 6387          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000043B6  4520 2020 
000043BA  2020 2020 
000043BE  2020 20   
000043C1  2020 2D20 6388          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000043C5  456E 7465 
000043C9  7220 5374 
000043CD  72        
000043CE  696E 6720 6389          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000043D2  696E 746F 
000043D6  204D 656D 
000043DA  6F72 7900 6390          dc.b      111,114,121,0
                    6391   @m68kde~1_104:
000043DE  0D0A 2020 6392          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000043E2  4620 2020 
000043E6  2020 2020 
000043EA  2020 20   
000043ED  2020 2D20 6393          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000043F1  4669 6C6C 
000043F5  204D 656D 
000043F9  6F        
000043FA  7279 2077 6394          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000043FE  6974 6820 
00004402  4461 7461 
00004406  00        
                    6395   @m68kde~1_105:
00004408  0D0A 2020 6396          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000440C  4720 2020 
00004410  2020 2020 
00004414  2020 20   
00004417  2020 2D20 6397          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
0000441B  476F 2050 
0000441F  726F 6772 
00004423  61        
00004424  6D20 5374 6398          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004428  6172 7469 
0000442C  6E67 2061 
00004430  74        
00004431  2041 6464 6399          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004435  7265 7373 
00004439  3A20 2425 
0000443D  30        
0000443E  3858 00   6400          dc.b      56,88,0
                    6401   @m68kde~1_106:
00004442  0D0A 2020 6402          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004446  4C20 2020 
0000444A  2020 2020 
0000444E  2020 20   
00004451  2020 2D20 6403          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004455  4C6F 6164 
00004459  2050 726F 
0000445D  67        
0000445E  7261 6D20 6404          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004462  282E 4845 
00004466  5820 6669 
0000446A  6C        
0000446B  6529 2066 6405          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000446F  726F 6D20 
00004473  4C61 7074 
00004477  6F        
00004478  7000      6406          dc.b      112,0
                    6407   @m68kde~1_107:
0000447A  0D0A 2020 6408          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000447E  4D20 2020 
00004482  2020 2020 
00004486  2020 20   
00004489  2020 2D20 6409          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000448D  4D65 6D6F 
00004491  7279 2045 
00004495  78        
00004496  616D 696E 6410          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000449A  6520 616E 
0000449E  6420 4368 
000044A2  61        
000044A3  6E67 6500 6411          dc.b      110,103,101,0
                    6412   @m68kde~1_108:
000044A8  0D0A 2020 6413          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000044AC  5020 2020 
000044B0  2020 2020 
000044B4  2020 20   
000044B7  2020 2D20 6414          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000044BB  5072 6F67 
000044BF  7261 6D20 
000044C3  46        
000044C4  6C61 7368 6415          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000044C8  204D 656D 
000044CC  6F72 7920 
000044D0  7769 7468 6416          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000044D4  2055 7365 
000044D8  7220 5072 
000044DC  6F67 7261 6417          dc.b      111,103,114,97,109,0
000044E0  6D00      
                    6418   @m68kde~1_109:
000044E2  0D0A 2020 6419          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000044E6  5220 2020 
000044EA  2020 2020 
000044EE  2020 20   
000044F1  2020 2D20 6420          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000044F5  4469 7370 
000044F9  6C61 7920 
000044FD  36        
000044FE  3830 3030 6421          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004502  2052 6567 
00004506  6973 7465 
0000450A  72        
0000450B  7300      6422          dc.b      115,0
                    6423   @m68kde~1_110:
0000450E  0D0A 2020 6424          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004512  5320 2020 
00004516  2020 2020 
0000451A  2020 20   
0000451D  2020 2D20 6425          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004521  546F 6767 
00004525  6C65 204F 
00004529  4E        
0000452A  2F4F 4646 6426          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
0000452E  2053 696E 
00004532  676C 6520 
00004536  53        
00004537  7465 7020 6427          dc.b      116,101,112,32,77,111,100,101,0
0000453B  4D6F 6465 
0000453F  00        
                    6428   @m68kde~1_111:
00004540  0D0A 2020 6429          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004544  544D 2020 
00004548  2020 2020 
0000454C  2020 20   
0000454F  2020 2D20 6430          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004553  5465 7374 
00004557  204D 656D 
0000455B  6F        
0000455C  7279 00   6431          dc.b      114,121,0
                    6432   @m68kde~1_112:
00004560  0D0A 2020 6433          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004564  5453 2020 
00004568  2020 2020 
0000456C  2020 20   
0000456F  2020 2D20 6434          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004573  5465 7374 
00004577  2053 7769 
0000457B  74        
0000457C  6368 6573 6435          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004580  3A20 5357 
00004584  372D 3000 
                    6436   @m68kde~1_113:
00004588  0D0A 2020 6437          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000458C  5444 2020 
00004590  2020 2020 
00004594  2020 20   
00004597  2020 2D20 6438          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000459B  5465 7374 
0000459F  2044 6973 
000045A3  70        
000045A4  6C61 7973 6439          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000045A8  3A20 4C45 
000045AC  4473 2061 
000045B0  6E        
000045B1  6420 372D 6440          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000045B5  5365 676D 
000045B9  656E 7400 
                    6441   @m68kde~1_114:
000045BE  0D0A 2020 6442          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000045C2  5744 2F57 
000045C6  532F 5743 
000045CA  2F57 4B   
000045CD  2020 2D20 6443          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000045D1  5761 7463 
000045D5  6820 506F 
000045D9  696E      
000045DB  743A 2044 6444          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000045DF  6973 706C 
000045E3  6179 2F53 
000045E7  65        
000045E8  742F 436C 6445          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000045EC  6561 722F 
000045F0  4B69 6C6C 
000045F4  00        
                    6446   @m68kde~1_115:
000045F6  0D0A 2300 6447          dc.b      13,10,35,0
                    6448   @m68kde~1_116:
000045FA  0D0A 5072 6449          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000045FE  6F67 7261 
00004602  6D20 5275 
00004606  6E        
00004607  6E69 6E67 6450          dc.b      110,105,110,103,46,46,46,46,46,0
0000460B  2E2E 2E2E 
0000460F  2E00      
                    6451   @m68kde~1_117:
00004612  0D0A 5072 6452          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004616  6573 7320 
0000461A  3C52 4553 
0000461E  4554      
00004620  3E20 6275 6453          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004624  7474 6F6E 
00004628  203C 4B65 
0000462C  79        
0000462D  303E 206F 6454          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004631  6E20 4445 
00004635  3120 746F 
00004639  2073      
0000463B  746F 7000 6455          dc.b      116,111,112,0
                    6456   @m68kde~1_118:
00004640  0D0A 4572 6457          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004644  726F 723A 
00004648  2050 7265 
0000464C  73        
0000464D  7320 2747 6458          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004651  2720 6669 
00004655  7273 7420 
00004659  74        
0000465A  6F20 7374 6459          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000465E  6172 7420 
00004662  7072 6F67 
00004666  7261 6D00 6460          dc.b      114,97,109,0
                    6461   @m68kde~1_119:
0000466A  0D0A 5369 6462          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000466E  6E67 6C65 
00004672  2053 7465 
00004676  70        
00004677  2020 3A5B 6463          dc.b      32,32,58,91,79,78,93,0
0000467B  4F4E 5D00 
                    6464   @m68kde~1_120:
00004680  0D0A 5072 6465          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004684  6573 7320 
00004688  2747 2720 
0000468C  74        
0000468D  6F20 5472 6466          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004691  6163 6520 
00004695  5072 6F67 
00004699  72        
0000469A  616D 2066 6467          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000469E  726F 6D20 
000046A2  6164 6472 
000046A6  6573 7320 6468          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000046AA  2425 582E 
000046AE  2E2E 2E2E 
000046B2  00        
                    6469   @m68kde~1_121:
000046B4  0D0A 5075 6470          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000046B8  7368 203C 
000046BC  5245 5345 
000046C0  5420      
000046C2  4275 7474 6471          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000046C6  6F6E 3E20 
000046CA  746F 2053 
000046CE  74        
000046CF  6F70 2E2E 6472          dc.b      111,112,46,46,46,46,46,0
000046D3  2E2E 2E00 
                    6473   @m68kde~1_122:
000046D8  0D0A 5369 6474          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000046DC  6E67 6C65 
000046E0  2053 7465 
000046E4  70        
000046E5  203A 205B 6475          dc.b      32,58,32,91,79,70,70,93,0
000046E9  4F46 465D 
000046ED  00        
                    6476   @m68kde~1_123:
000046EE  0D0A 4272 6477          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000046F2  6561 6B20 
000046F6  506F 696E 
000046FA  74        
000046FB  7320 3A5B 6478          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000046FF  456E 6162 
00004703  6C65 645D 
00004707  00        
                    6479   @m68kde~1_124:
00004708  0D0A 5072 6480          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000470C  6573 7320 
00004710  3C45 5343 
00004714  3E20      
00004716  746F 2052 6481          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000471A  6573 756D 
0000471E  6520 5573 
00004722  6572 2050 6482          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004726  726F 6772 
0000472A  616D 2E2E 
0000472E  2E        
0000472F  2E2E 00   6483          dc.b      46,46,0
                    6484   @m68kde~1_125:
00004732  0D0A 5369 6485          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004736  6E67 6C65 
0000473A  2053 7465 
0000473E  70        
0000473F  2020 3A5B 6486          dc.b      32,32,58,91,79,70,70,93,0
00004743  4F46 465D 
00004747  00        
                    6487   @m68kde~1_126:
00004748  0D0A 0D0A 6488          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000474C  5072 6F67 
00004750  7261 6D20 
00004754  41        
00004755  424F 5254 6489          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004759  2021 2121 
0000475D  2121 210D 
00004761  0A00      
                    6490   @m68kde~1_127:
00004764  2573 0D0A 6491          dc.b      37,115,13,10,0
00004768  00        
                    6492   @m68kde~1_128:
0000476A  0D0A 0D0A 6493          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000476E  5072 6F67 
00004772  7261 6D20 
00004776  41        
00004777  424F 5254 6494          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000477B  2021 2121 
0000477F  2121 00   
                    6495   @m68kde~1_129:
00004782  0D0A 556E 6496          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004786  6861 6E64 
0000478A  6C65 6420 
0000478E  49        
0000478F  6E74 6572 6497          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004793  7275 7074 
00004797  3A20 4952 
0000479B  5125 6420 6498          dc.b      81,37,100,32,33,33,33,33,33,0
0000479F  2121 2121 
000047A3  2100      
                    6499   @m68kde~1_130:
000047A6  4144 4452 6500          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000047AA  4553 5320 
000047AE  4552 524F 
000047B2  523A 20   
000047B5  3136 206F 6501          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000047B9  7220 3332 
000047BD  2042 6974 
000047C1  2054      
000047C3  7261 6E73 6502          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000047C7  6665 7220 
000047CB  746F 2F66 
000047CF  726F 6D20 6503          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000047D3  616E 204F 
000047D7  4444 2041 
000047DB  64        
000047DC  6472 6573 6504          dc.b      100,114,101,115,115,46,46,46,46,0
000047E0  732E 2E2E 
000047E4  2E00      
                    6505   @m68kde~1_131:
000047E6  556E 6861 6506          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000047EA  6E64 6C65 
000047EE  6420 5472 
000047F2  6170 2021 6507          dc.b      97,112,32,33,33,33,33,33,0
000047F6  2121 2121 
000047FA  00        
                    6508   @m68kde~1_132:
000047FC  4255 5320 6509          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004800  4572 726F 
00004804  7221 00   
                    6510   @m68kde~1_133:
00004808  4144 4452 6511          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000480C  4553 5320 
00004810  4572 726F 
00004814  7221      
00004816  00        6512          dc.b      0
                    6513   @m68kde~1_134:
00004818  494C 4C45 6514          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000481C  4741 4C20 
00004820  494E 5354 
00004824  5255 43   
00004827  5449 4F4E 6515          dc.b      84,73,79,78,0
0000482B  00        
                    6516   @m68kde~1_135:
0000482C  4449 5649 6517          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004830  4445 2042 
00004834  5920 5A45 
00004838  524F 00   
                    6518   @m68kde~1_136:
0000483C  2743 484B 6519          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004840  2720 494E 
00004844  5354 5255 
00004848  4354 49   
0000484B  4F4E 00   6520          dc.b      79,78,0
                    6521   @m68kde~1_137:
0000484E  5452 4150 6522          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004852  5620 494E 
00004856  5354 5255 
0000485A  4354 49   
0000485D  4F4E 00   6523          dc.b      79,78,0
                    6524   @m68kde~1_138:
00004860  5052 4956 6525          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004864  494C 4547 
00004868  4520 5649 
0000486C  4F4C 41   
0000486F  5449 4F4E 6526          dc.b      84,73,79,78,0
00004873  00        
                    6527   @m68kde~1_139:
00004874  554E 494E 6528          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004878  4954 4941 
0000487C  4C49 5345 
00004880  4420 49   
00004883  5251 00   6529          dc.b      82,81,0
                    6530   @m68kde~1_140:
00004886  5350 5552 6531          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000488A  494F 5553 
0000488E  2049 5251 
00004892  00        
                    6532   @m68kde~1_141:
00004894  0D0A 5374 6533          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004898  6172 7420 
0000489C  4164 6472 
000048A0  65        
000048A1  7373 2069 6534          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000048A5  6E20 4D65 
000048A9  6D6F 7279 
000048AD  3A20 00   6535          dc.b      58,32,0
                    6536   @m68kde~1_142:
000048B0  0D0A 456E 6537          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000048B4  7465 7220 
000048B8  5374 7269 
000048BC  6E        
000048BD  6720 2845 6538          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000048C1  5343 2074 
000048C5  6F20 656E 
000048C9  64        
000048CA  2920 3A00 6539          dc.b      41,32,58,0
                    6540   @m68kde~1_143:
000048CE  5065 7266 6541          dc.b      80,101,114,102,111,114,109,105,110,103,32,77
000048D2  6F72 6D69 
000048D6  6E67 204D 
000048DA  656D 6F72 6542          dc.b      101,109,111,114,121,32,84,101,115,116,33,0
000048DE  7920 5465 
000048E2  7374 2100 
                    6543   @m68kde~1_144:
000048E6  0D0A 5374 6544          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000048EA  6172 7420 
000048EE  4164 6472 
000048F2  65        
000048F3  7373 3A20 6545          dc.b      115,115,58,32,0
000048F7  00        
                    6546   @m68kde~1_145:
000048F8  0D0A 456E 6547          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
000048FC  6420 4164 
00004900  6472 6573 
00004904  73        
00004905  3A20 00   6548          dc.b      58,32,0
                    6549   @m68kde~1_146:
00004908  0D0A 4D65 6550          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
0000490C  6D6F 7279 
00004910  2054 6573 
00004914  74        
00004915  2046 6169 6551          dc.b      32,70,97,105,108,101,100,33,0
00004919  6C65 6421 
0000491D  00        
                    6552   @m68kde~1_147:
0000491E  0D0A 4164 6553          dc.b      13,10,65,100,100,114,101,115,115,32,61,32,37
00004922  6472 6573 
00004926  7320 3D20 
0000492A  25        
0000492B  7500      6554          dc.b      117,0
                    6555   @m68kde~1_148:
0000492E  0D0A 4578 6556          dc.b      13,10,69,120,112,101,99,116,101,100,32,100,97
00004932  7065 6374 
00004936  6564 2064 
0000493A  61        
0000493B  7461 203D 6557          dc.b      116,97,32,61,32,37,117,0
0000493F  2025 7500 
                    6558   @m68kde~1_149:
00004944  0D0A 4375 6559          dc.b      13,10,67,117,114,114,101,110,116,32,100,97,116
00004948  7272 656E 
0000494C  7420 6461 
00004950  74        
00004951  6120 3D20 6560          dc.b      97,32,61,32,37,117,0
00004955  2575 00   
                    6561   @m68kde~1_150:
00004958  4D65 6D6F 6562          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
0000495C  7279 2054 
00004960  6573 7420 
00004964  4661 696C 6563          dc.b      70,97,105,108,101,100,33,0
00004968  6564 2100 
                    6564   @m68kde~1_151:
0000496C  0D0A 4D65 6565          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
00004970  6D6F 7279 
00004974  2054 6573 
00004978  74        
00004979  2053 7563 6566          dc.b      32,83,117,99,99,101,115,115,102,117,108,33,0
0000497D  6365 7373 
00004981  6675 6C21 
00004985  00        
                    6567   @m68kde~1_152:
00004986  4D65 6D6F 6568          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
0000498A  7279 2054 
0000498E  6573 7420 
00004992  5061 7373 6569          dc.b      80,97,115,115,101,100,33,0
00004996  6564 2100 
                    6570   @m68kde~1_153:
0000499A  4E61 6D65 6571          dc.b      78,97,109,101,61,32,65,116,97,104,97,110,32
0000499E  3D20 4174 
000049A2  6168 616E 
000049A6  20        
000049A7  416B 6172 6572          dc.b      65,107,97,114,0
000049AB  00        
                    6573   @m68kde~1_154:
000049AC  5374 7564 6574          dc.b      83,116,117,100,101,110,116,32,78,117,109,98
000049B0  656E 7420 
000049B4  4E75 6D62 
000049B8  6572 203D 6575          dc.b      101,114,32,61,32,50,48,51,48,49,55,50,55,0
000049BC  2032 3033 
000049C0  3031 3732 
000049C4  3700      
                    6576   @m68kde~1_155:
000049C6  0D0A 5275 6577          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000049CA  6E6E 696E 
000049CE  672E 2E2E 
000049D2  2E        
000049D3  2E00      6578          dc.b      46,0
                    6579   @m68kde~1_156:
000049D6  5275 6E6E 6580          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000049DA  696E 672E 
000049DE  2E2E 2E2E 
000049E2  00        
                    6581   @m68kde~1_157:
000049E4  4279 3A20 6582          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000049E8  504A 2044 
000049EC  6176 6965 
000049F0  73        
000049F1  00        6583          dc.b      0
                    6584   @m68kde~1_158:
000049F2  0D0A 2573 6585          dc.b      13,10,37,115,0
000049F6  00        
                    6586   @m68kde~1_159:
000049F8  4E61 6D65 6587          dc.b      78,97,109,101,61,32,83,111,110,103,122,104,117
000049FC  3D20 536F 
00004A00  6E67 7A68 
00004A04  75        
00004A05  205A 6861 6588          dc.b      32,90,104,97,110,103,0
00004A09  6E67 00   
                    6589   @m68kde~1_160:
00004A0C  5374 7564 6590          dc.b      83,116,117,100,101,110,116,32,78,117,109,98
00004A10  656E 7420 
00004A14  4E75 6D62 
00004A18  6572 203D 6591          dc.b      101,114,32,61,32,49,48,54,49,54,49,54,55,0
00004A1C  2031 3036 
00004A20  3136 3136 
00004A24  3700      
                    6592          section   data
00004A26            6593                   align
          0000 4A26 6594   DataStart       equ       *
                    6595   
                    6596   *********************************************************************************************************
                    6597   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6598   * to ram as part of the CStart routine in this file
                    6599   *********************************************************************************************************
                    6600   
                    6601   @itoa_1:
00004A26  2D32 3134 6602          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004A2A  3734 3833 
00004A2E  3634 3800 
                    6603          section   bss
00004A32            6604                   align
          0000 4A32 6605   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6606   
                    6607   *********************************************************************************************************
                    6608   * Section for Uninitialised Data held in ROM as constants
                    6609   *********************************************************************************************************
                    6610   
0B000000            6611                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 6612   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6613   
                    6614   
0B000000            6615   bss             org       bss
                    6616   
                    6617   *********************************************************************************************************
                    6618   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6619   * install the exception handler using the C function InstallExceptionHandler()
                    6620   *********************************************************************************************************
                    6621   
                    6622   
                    6623   
0B000000            6624   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            6625   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            6626   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            6627   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            6628   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            6629   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            6630   VCheck           ds.l    1      ditto
0B00001C            6631   VTrapV           ds.l    1      ditto
0B000020            6632   VPrivilege       ds.l    1      ditto
0B000024            6633   VTrace           ds.l    1
0B000028            6634   VLine1010emul    ds.l    1
0B00002C            6635   VLine1111emul    ds.l    1
0B000030            6636   VUnassigned1     ds.l    1
0B000034            6637   VUnassigned2     ds.l    1
0B000038            6638   VUnassigned3     ds.l    1
0B00003C            6639   VUninit_IRQ      ds.l    1
0B000040            6640   VUnassigned4     ds.l    1
0B000044            6641   VUnassigned5     ds.l    1
0B000048            6642   VUnassigned6     ds.l    1
0B00004C            6643   VUnassigned7     ds.l    1
0B000050            6644   VUnassigned8     ds.l    1
0B000054            6645   VUnassigned9     ds.l    1
0B000058            6646   VUnassigned10    ds.l    1
0B00005C            6647   VUnassigned11    ds.l    1
0B000060            6648   VSpuriousIRQ     ds.l    1
                    6649   
                    6650   * Interrupt handlers Vector 25-31
0B000064            6651   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            6652   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            6653   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            6654   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            6655   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            6656   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            6657   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6658   
                    6659   * Trap Handler vectors 32-47
0B000080            6660   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            6661   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            6662   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            6663   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            6664   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            6665   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            6666   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            6667   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            6668   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            6669   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            6670   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            6671   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            6672   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            6673   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            6674   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            6675   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6676   
                    6677   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6678   
                    6679   ***********************************************************************************************************
                    6680   * Other Variables
                    6681   ***********************************************************************************************************
                    6682   *__DebugA5       ds.l    1
                    6683   *__UserA5        ds.l    1
                    6684   
                    6685   ***********************************************************************************************************
0B0000C0            6686   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            6687   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            6688   __heap:         ds.l    0       ; pointers for malloc functions
                    6689   
                    6690   *__himem:       ds.l    himem            ; highest memory location + 1
                    6691   *__stklen:      ds.l    stklen           ; default stack size
                    6692   
                    6693   *********************************************************************************************************
                    6694   * Section for Heap
                    6695   *********************************************************************************************************
                    6696   
                    6697   _i:
0B0000C4            6698          ds.b      4
                    6699   _x:
0B0000C8            6700          ds.b      4
                    6701   _y:
0B0000CC            6702          ds.b      4
                    6703   _z:
0B0000D0            6704          ds.b      4
                    6705   _PortA_Count:
0B0000D4            6706          ds.b      4
                    6707   _Trace:
0B0000D8            6708          ds.b      4
                    6709   _GoFlag:
0B0000DC            6710          ds.b      4
                    6711   _Echo:
0B0000E0            6712          ds.b      4
                    6713   _d0:
0B0000E4            6714          ds.b      4
                    6715   _d1:
0B0000E8            6716          ds.b      4
                    6717   _d2:
0B0000EC            6718          ds.b      4
                    6719   _d3:
0B0000F0            6720          ds.b      4
                    6721   _d4:
0B0000F4            6722          ds.b      4
                    6723   _d5:
0B0000F8            6724          ds.b      4
                    6725   _d6:
0B0000FC            6726          ds.b      4
                    6727   _d7:
0B000100            6728          ds.b      4
                    6729   _a0:
0B000104            6730          ds.b      4
                    6731   _a1:
0B000108            6732          ds.b      4
                    6733   _a2:
0B00010C            6734          ds.b      4
                    6735   _a3:
0B000110            6736          ds.b      4
                    6737   _a4:
0B000114            6738          ds.b      4
                    6739   _a5:
0B000118            6740          ds.b      4
                    6741   _a6:
0B00011C            6742          ds.b      4
                    6743   _PC:
0B000120            6744          ds.b      4
                    6745   _SSP:
0B000124            6746          ds.b      4
                    6747   _USP:
0B000128            6748          ds.b      4
                    6749   _SR:
0B00012C            6750          ds.b      2
                    6751   _BreakPointAddress:
0B00012E            6752          ds.b      32
                    6753   _BreakPointInstruction:
0B00014E            6754          ds.b      16
                    6755   _BreakPointSetOrCleared:
0B00015E            6756          ds.b      32
                    6757   _InstructionSize:
0B00017E            6758          ds.b      4
                    6759   _WatchPointAddress:
0B000182            6760          ds.b      32
                    6761   _WatchPointSetOrCleared:
0B0001A2            6762          ds.b      32
                    6763   _WatchPointString:
0B0001C2            6764          ds.b      800
                    6765   _TempString:
0B0004E2            6766          ds.b      100
                    6767          section   heap
0B000546            6768                   align
          0B00 0546 6769   bssEnd          equ *                   end of storage space for unitialised variables
                    6770   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 6771   heap   equ       *
0B000546            6772                    align
          0000 0000

Assembly errors: 0
